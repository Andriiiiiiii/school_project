# fix_scheduler_file.py
def fix_scheduler():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é process_daily_reset –≤ services/scheduler.py"""
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
        with open('services/scheduler.py', 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        print("üìñ –ß–∏—Ç–∞–µ–º services/scheduler.py...")
        
        # –ò—â–µ–º –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ process_daily_reset
        start_line = None
        end_line = None
        
        for i, line in enumerate(lines):
            if line.strip().startswith('def process_daily_reset(chat_id):'):
                start_line = i
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è process_daily_reset –Ω–∞ —Å—Ç—Ä–æ–∫–µ {i+1}")
                break
        
        if start_line is None:
            print("‚ùå –§—É–Ω–∫—Ü–∏—è process_daily_reset –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        # –ò—â–µ–º –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ (—Å–ª–µ–¥—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–ª–∏ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞)
        indent_level = len(lines[start_line]) - len(lines[start_line].lstrip())
        
        for i in range(start_line + 1, len(lines)):
            line = lines[i]
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è –∏ –Ω–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∏ –∏–º–µ–µ—Ç —Ç–∞–∫–æ–π –∂–µ –∏–ª–∏ –º–µ–Ω—å—à–∏–π –æ—Ç—Å—Ç—É–ø
            if line.strip() and not line.strip().startswith('#'):
                current_indent = len(line) - len(line.lstrip())
                if current_indent <= indent_level and (line.strip().startswith('def ') or 
                                                      line.strip().startswith('class ') or
                                                      line.strip().startswith('if __name__')):
                    end_line = i
                    break
        
        if end_line is None:
            end_line = len(lines)
        
        print(f"üìç –§—É–Ω–∫—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ {start_line+1}-{end_line}")
        
        # –ù–æ–≤–∞—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        new_function = '''def process_daily_reset(chat_id):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –æ–±—Ä–∞–±–æ—Ç–∫–æ–π streak."""
    try:
        today = datetime.now().strftime("%Y-%m-%d")
        reset_key = f"{chat_id}_reset_{today}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Å–±—Ä–æ—Å
        if hasattr(process_daily_reset, 'processed_resets') and reset_key in process_daily_reset.processed_resets:
            return
            
        if not hasattr(process_daily_reset, 'processed_resets'):
            process_daily_reset.processed_resets = set()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–±—Ä–æ—Å–∞ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
        try:
            from database.crud import get_user_streak, reset_user_streak
            streak, last_test_date = get_user_streak(chat_id)
            
            if streak > 0:
                yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
                
                logger.debug(f"Checking streak for user {chat_id}: streak={streak}, last_test_date={last_test_date}, yesterday={yesterday}")
                
                should_reset = False
                reset_reason = ""
                
                if not last_test_date:
                    # –ù–µ—Ç –∑–∞–ø–∏—Å–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ç–µ—Å—Ç–µ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
                    should_reset = True
                    reset_reason = "no_test_date"
                elif last_test_date < yesterday:
                    # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç –±—ã–ª –ø–æ–∑–∞–≤—á–µ—Ä–∞ –∏–ª–∏ —Ä–∞–Ω—å—à–µ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
                    should_reset = True
                    reset_reason = f"test_too_old_{last_test_date}"
                elif last_test_date == yesterday:
                    # –¢–µ—Å—Ç –±—ã–ª –≤—á–µ—Ä–∞ - –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
                    should_reset = False
                    reset_reason = "test_yesterday_ok"
                elif last_test_date == today:
                    # –¢–µ—Å—Ç —É–∂–µ –±—ã–ª —Å–µ–≥–æ–¥–Ω—è - –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
                    should_reset = False
                    reset_reason = "test_today_ok"
                else:
                    # –î–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å) - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
                    should_reset = True
                    reset_reason = f"future_date_{last_test_date}"
                
                if should_reset:
                    logger.info(f"Resetting streak for user {chat_id}: reason={reset_reason}, old_streak={streak}")
                    reset_user_streak(chat_id)
                    
                    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–±—Ä–æ—Å–µ streak (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                    if not PRODUCTION_MODE:
                        logger.info(f"DEBUG: User {chat_id} streak reset from {streak} to 0. Reason: {reset_reason}")
                else:
                    logger.debug(f"Keeping streak for user {chat_id}: reason={reset_reason}, streak={streak}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ streak –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ leftover —Å–ª–æ–≤ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞)
        if chat_id in daily_words_cache:
            entry = daily_words_cache[chat_id]
            unique_words = entry[8] if len(entry) > 8 and entry[8] else []
            is_revision = entry[9] if len(entry) > 9 else False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º leftover —Å–ª–æ–≤–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –ù–ï —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            if not is_revision and unique_words:
                try:
                    learned_raw = crud.get_learned_words(chat_id)
                    learned_set = set(extract_english(item[0]).lower() for item in learned_raw)
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
                    leftover_words = []
                    for word in unique_words:
                        english_part = extract_english(word).lower()
                        if english_part and english_part not in learned_set:
                            leftover_words.append(word)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º leftover —Å–ª–æ–≤–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
                    if leftover_words:
                        previous_daily_words[chat_id] = leftover_words
                        if not PRODUCTION_MODE:
                            logger.info(f"Saved {len(leftover_words)} leftover words for user {chat_id}")
                    elif chat_id in previous_daily_words:
                        del previous_daily_words[chat_id]
                        
                except Exception as e:
                    logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ leftover —Å–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", chat_id, e)
            else:
                # –í —Ä–µ–∂–∏–º–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º leftover —Å–ª–æ–≤–∞
                if chat_id in previous_daily_words:
                    del previous_daily_words[chat_id]
                
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à —Å–ª–æ–≤ –¥–Ω—è
            reset_daily_words_cache(chat_id)
        
        # –°–±—Ä–æ—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç–µ—Å—Ç–µ
        if chat_id in test_reminder_sent:
            del test_reminder_sent[chat_id]
        
        process_daily_reset.processed_resets.add(reset_key)
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
        if len(process_daily_reset.processed_resets) > 1000:
            yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
            today_check = datetime.now().strftime("%Y-%m-%d")
            process_daily_reset.processed_resets = {
                key for key in process_daily_reset.processed_resets 
                if today_check in key or yesterday in key
            }
            
        if not PRODUCTION_MODE:
            logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", chat_id)
            
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", chat_id, e)

'''
        
        # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –Ω–æ–≤—É—é
        new_lines = lines[:start_line] + [new_function] + lines[end_line:]
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open('services/scheduler.py', 'w', encoding='utf-8') as f:
            f.writelines(new_lines)
        
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è process_daily_reset –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –§–£–ù–ö–¶–ò–ò process_daily_reset")
    print("=" * 50)
    
    if fix_scheduler():
        print("\nüéâ –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ê!")
        print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì:")
        print("   python debug_streak_system.py")
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –û–ë–ù–û–í–õ–ï–ù–ò–ò")
        print("   –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –≤—Ä—É—á–Ω—É—é")