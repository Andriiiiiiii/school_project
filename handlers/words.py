# handlers/words.py
import random
import os
import tempfile
import logging
from aiogram import types, Dispatcher, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from gtts import gTTS
from database import crud
from utils.helpers import load_words_for_level
from utils.constants import levels_order

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–æ–≤–∞ –¥–Ω—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏
async def send_word_of_day(chat_id: int, bot: Bot):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–æ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    proficiency = crud.get_user_proficiency(chat_id)
    if not proficiency:
        proficiency = "A1"
    try:
        current_index = levels_order.index(proficiency)
    except ValueError:
        current_index = 0
    next_index = current_index + 1 if current_index < len(levels_order) - 1 else current_index
    next_level = levels_order[next_index]
    words = load_words_for_level(next_level)
    if not words:
        await bot.send_message(chat_id, f"–°–ª–æ–≤–∞—Ä—å –¥–ª—è —É—Ä–æ–≤–Ω—è {next_level} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.")
        return
    word = random.choice(words)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞)
    text = f"–°–ª–æ–≤–æ –¥–Ω—è (—É—Ä–æ–≤–µ–Ω—å {next_level}):\n\n" \
           f"–°–ª–æ–≤–æ: {word}\n" \
           f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: (–ø—Ä–∏–º–µ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏)\n" \
           f"–ü–µ—Ä–µ–≤–æ–¥: (–ø—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–≤–æ–¥–∞)\n" \
           f"–ü—Ä–∏–º–µ—Ä: (–ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏)"
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("üìö –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å", callback_data=f"add_word:{word}"))
    await bot.send_message(chat_id, text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
async def process_add_word(callback_query: types.CallbackQuery, bot: Bot):
    word = callback_query.data.split(":")[1]
    chat_id = callback_query.from_user.id
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ CRUD-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ (—Å –¥–µ—Ç–∞–ª—è–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å)
    crud.add_word_to_dictionary(chat_id, {"word": word})
    await bot.send_message(chat_id, f"–°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å!")
    await callback_query.answer()

def register_words_handlers(dp: Dispatcher, bot: Bot):
    dp.register_callback_query_handler(lambda c: c.data.startswith("add_word:"), lambda c: process_add_word(c, bot))
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è —Å–ª–æ–≤–∞ –¥–Ω—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    dp.register_callback_query_handler(lambda c: c.data == "menu:get_word", lambda c: send_word_of_day(c.from_user.id, bot))
