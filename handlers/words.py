# handlers/words.py
from aiogram import types, Dispatcher, Bot
from database import crud
from keyboards.submenus import words_day_keyboard
from utils.helpers import get_daily_words_for_user
from config import REMINDER_START, DURATION_HOURS
from zoneinfo import ZoneInfo
from datetime import datetime

async def send_words_day_schedule(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ª–æ–≤–∞ –¥–Ω—è".
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏,
    –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ —Å —É—á—ë—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    chat_id = callback.from_user.id
    user = crud.get_user(chat_id)
    if not user:
        await bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return
    result = get_daily_words_for_user(chat_id, user[1], user[2], user[3],
                                       first_time=REMINDER_START, duration_hours=DURATION_HOURS)
    if result is None:
        await bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —É—Ä–æ–≤–Ω—è {user[1]}.")
        return
    messages, times = result
    total_notifications = user[2] * user[3]
    text = "üìå –°–µ–≥–æ–¥–Ω—è –≤–∞–º –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å–ª–æ–≤–∞:\n\n"
    for i in range(total_notifications):
        t = times[i]
        msg = messages[i] if messages[i] else "(–Ω–µ—Ç —Å–ª–æ–≤)"
        text += f"‚è∞ {t}:\n{msg}\n\n"
    text += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    await bot.send_message(chat_id, text, reply_markup=words_day_keyboard())
    await callback.answer()

def register_words_handlers(dp: Dispatcher, bot: Bot):
    dp.register_callback_query_handler(
        lambda c: send_words_day_schedule(c, bot),
        lambda c: c.data == "menu:words_day"
    )
