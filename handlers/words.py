# handlers/words.py
import random
import os
import tempfile
import logging
from datetime import datetime

from aiogram import types, Dispatcher, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from gtts import gTTS

from database import crud
from utils.helpers import load_words_for_level
from utils.constants import levels_order

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–∞ –∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
test_states = {}
quiz_data = {}

async def send_proficiency_word_of_day(chat_id: int, bot: Bot):
    proficiency = crud.get_user_proficiency(chat_id)
    if not proficiency:
        proficiency = "A1"
    try:
        current_index = levels_order.index(proficiency)
    except ValueError:
        current_index = 0
    next_index = current_index + 1 if current_index < len(levels_order) - 1 else current_index
    next_level = levels_order[next_index]
    words = load_words_for_level(next_level)
    if not words:
        await bot.send_message(chat_id, f"–§–∞–π–ª –¥–ª—è —É—Ä–æ–≤–Ω—è {next_level} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.")
        return
    word = random.choice(words)
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üîä –ü–æ—Å–ª—É—à–∞—Ç—å", callback_data=f"pronounce:{word}"),
        InlineKeyboardButton("üìö –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å", callback_data=f"add:{word}")
    )
    await bot.send_message(chat_id, f"–°–ª–æ–≤–æ –¥–Ω—è (—É—Ä–æ–≤–µ–Ω—å {next_level}): {word}", reply_markup=keyboard)

async def start_test(chat_id: int, bot: Bot):
    initial_level = "A1"
    words = load_words_for_level(initial_level)
    if not words:
        await bot.send_message(chat_id, f"–§–∞–π–ª –¥–ª—è —É—Ä–æ–≤–Ω—è {initial_level} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.")
        return
    test_states[chat_id] = {
        'current_level': initial_level,
        'words': words,
        'index': 0,
        'batch_size': 5
    }
    await bot.send_message(chat_id, f"–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —É—Ä–æ–≤–Ω—è. –£—Ä–æ–≤–µ–Ω—å: {initial_level}")
    await send_test_question(chat_id, bot)

async def send_test_question(chat_id: int, bot: Bot):
    state = test_states.get(chat_id)
    if not state:
        return
    if state['index'] >= state['batch_size']:
        await bot.send_message(chat_id, "–í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
        del test_states[chat_id]
        return
    word = state['words'][state['index']]
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ó–Ω–∞—é", callback_data="test:know"),
        InlineKeyboardButton("–ù–µ –∑–Ω–∞—é", callback_data="test:donot")
    )
    await bot.send_message(chat_id, f"–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã —Å–ª–æ–≤–æ: {word}?", reply_markup=keyboard)

async def process_test_answer(callback_query: types.CallbackQuery, bot: Bot):
    chat_id = callback_query.from_user.id
    answer = callback_query.data.split(":")[1]  # "know" –∏–ª–∏ "donot"
    state = test_states.get(chat_id)
    if not state:
        await bot.send_message(chat_id, "–¢–µ—Å—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /test –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        await callback_query.answer()
        return
    current_level = state['current_level']
    if answer == "donot":
        crud.update_user_proficiency(chat_id, current_level)
        await bot.send_message(chat_id, f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {current_level}")
        del test_states[chat_id]
    else:
        state['index'] += 1
        if state['index'] >= state['batch_size']:
            current_index = levels_order.index(current_level)
            if current_index < len(levels_order) - 1:
                new_level = levels_order[current_index + 1]
                state['current_level'] = new_level
                await bot.send_message(chat_id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ —É—Ä–æ–≤–µ–Ω—å {current_level}. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {new_level}.")
                words = load_words_for_level(new_level)
                state['words'] = words
                state['index'] = 0
            else:
                crud.update_user_proficiency(chat_id, current_level)
                await bot.send_message(chat_id, f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {current_level}")
                del test_states[chat_id]
                await callback_query.answer()
                return
        await send_test_question(chat_id, bot)
    await callback_query.answer()

async def process_pronounce(callback_query: types.CallbackQuery, bot: Bot):
    word = callback_query.data.split(":")[1]
    chat_id = callback_query.from_user.id
    try:
        tts = gTTS(text=word, lang='en')
        with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tf:
            temp_filename = tf.name
            tts.save(temp_filename)
        with open(temp_filename, 'rb') as audio:
            await bot.send_audio(chat_id, audio, caption=f"–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ: {word}")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è")
        await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ.")
    finally:
        if os.path.exists(temp_filename):
            os.remove(temp_filename)
    await callback_query.answer()

async def process_add_word(callback_query: types.CallbackQuery, bot: Bot):
    word = callback_query.data.split(":")[1]
    chat_id = callback_query.from_user.id
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å CRUD-—Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞
    await bot.send_message(chat_id, f"–°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å!")
    await callback_query.answer()

def register_words_handlers(dp: Dispatcher, bot: Bot):
    dp.register_callback_query_handler(lambda c: c.data.startswith("pronounce:"), lambda c: process_pronounce(c, bot))
    dp.register_callback_query_handler(lambda c: c.data.startswith("add:"), lambda c: process_add_word(c, bot))
    dp.register_callback_query_handler(lambda c: c.data.startswith("test:"), lambda c: process_test_answer(c, bot))
    dp.register_message_handler(lambda message: start_test(message.chat.id, bot), commands=["test"])
