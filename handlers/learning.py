
# –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
import random
from aiogram import types, Dispatcher, Bot
from keyboards.submenus import learning_menu_keyboard, learning_settings_keyboard
from keyboards.main_menu import main_menu_keyboard
from utils.helpers import load_words_for_set, extract_english
from utils.quiz_helpers import load_quiz_data
from database import crud
from database.db import db_manager
from functools import partial
import logging
import os
from config import LEVELS_DIR

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞
pending_learning_settings = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ (–∫–∞–∫ –≤ quiz.py)
learning_test_states = {}

# –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ handlers/learning.py:

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER_LEVEL = 1
USER_WORDS_PER_DAY = 2
USER_REPETITIONS = 3
USER_REMINDER_TIME = 4
USER_TIMEZONE = 5
USER_CHOSEN_SET = 6
USER_TEST_WORDS_COUNT = 7
USER_MEMORIZE_WORDS_COUNT = 8

def test_words_count_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç 1 –¥–æ 20 –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –≤ —Ç–µ—Å—Ç–µ."""
    keyboard = types.InlineKeyboardMarkup(row_width=5)
    
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: 1-5
    row1 = [types.InlineKeyboardButton(str(i), callback_data=f"learn:test_count:{i}") for i in range(1, 6)]
    keyboard.row(*row1)
    
    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: 6-10
    row2 = [types.InlineKeyboardButton(str(i), callback_data=f"learn:test_count:{i}") for i in range(6, 11)]
    keyboard.row(*row2)
    
    # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞: 11-15
    row3 = [types.InlineKeyboardButton(str(i), callback_data=f"learn:test_count:{i}") for i in range(11, 16)]
    keyboard.row(*row3)
    
    # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞: 16-20
    row4 = [types.InlineKeyboardButton(str(i), callback_data=f"learn:test_count:{i}") for i in range(16, 21)]
    keyboard.row(*row4)
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="learning:settings"))
    
    return keyboard

def memorize_words_count_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç 1 –¥–æ 20 –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è."""
    keyboard = types.InlineKeyboardMarkup(row_width=5)
    
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: 1-5
    row1 = [types.InlineKeyboardButton(str(i), callback_data=f"learn:memorize_count:{i}") for i in range(1, 6)]
    keyboard.row(*row1)
    
    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: 6-10
    row2 = [types.InlineKeyboardButton(str(i), callback_data=f"learn:memorize_count:{i}") for i in range(6, 11)]
    keyboard.row(*row2)
    
    # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞: 11-15
    row3 = [types.InlineKeyboardButton(str(i), callback_data=f"learn:memorize_count:{i}") for i in range(11, 16)]
    keyboard.row(*row3)
    
    # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞: 16-20
    row4 = [types.InlineKeyboardButton(str(i), callback_data=f"learn:memorize_count:{i}") for i in range(16, 21)]
    keyboard.row(*row4)
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="learning:settings"))
    
    return keyboard

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
def get_user_setting(user, index, default_value):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º"""
    try:
        if user and len(user) > index and user[index] is not None:
            return user[index]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –∏–Ω–¥–µ–∫—Å–æ–º {index}: {e}")
    return default_value

# –ó–∞—Ç–µ–º –∏–∑–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é handle_dictionary_test:

async def handle_dictionary_test(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ —Å–ª–æ–≤–∞—Ä—é"""
    chat_id = callback.from_user.id
    user = crud.get_user(chat_id)
    if not user:
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    learned_words = crud.get_learned_words(chat_id)
    if not learned_words:
        await callback.message.edit_text(
            "üìö *–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç*\n\n"
            "–ü—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑—ã, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –≤ —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å!",
            parse_mode="Markdown",
            reply_markup=learning_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    test_words_count = 5  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    try:
        if len(user) > 7 and user[7] is not None:
            test_words_count = int(user[7])
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ test_words_count –∏–∑ –±–∞–∑—ã: {test_words_count}")
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å test_words_count –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª–∏–Ω–æ–π {len(user)}")
            # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            with db_manager.get_cursor() as cursor:
                cursor.execute("SELECT test_words_count FROM users WHERE chat_id = ?", (chat_id,))
                result = cursor.fetchone()
                if result and result[0]:
                    test_words_count = int(result[0])
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ test_words_count –ø—Ä—è–º—ã–º –∑–∞–ø—Ä–æ—Å–æ–º: {test_words_count}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ test_words_count: {e}")
        
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –ø–æ —Å–ª–æ–≤–∞—Ä—é —Å {test_words_count} —Å–ª–æ–≤–∞–º–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ
    if test_words_count > len(learned_words):
        logger.info(f"–í —Å–ª–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –º–µ–Ω—å—à–µ —Å–ª–æ–≤ ({len(learned_words)}), —á–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–æ ({test_words_count})")
        test_words_count = len(learned_words)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    selected_words = random.sample(learned_words, test_words_count)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–≤–∏–∑–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    level = get_user_setting(user, USER_LEVEL, "A1")
    chosen_set = get_user_setting(user, USER_CHOSEN_SET, None)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–≤–∏–∑–∞
    quiz_data = load_quiz_data(level, chosen_set)
    if not quiz_data:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–≤–∏–∑–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è {level}.",
            parse_mode="Markdown",
            reply_markup=learning_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    translations = {item["word"].lower(): item["translation"] for item in quiz_data}
    
    # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞
    questions = []
    for word, translation in selected_words:
        english_word = extract_english(word).lower()
        correct_translation = translation
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–∏—Å–∫–ª—é—á–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
        options = [correct_translation]
        all_translations = list(translations.values())
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –ø—É–ª–∞ –¥–∏—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–≤
        if correct_translation in all_translations:
            all_translations.remove(correct_translation)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å—Ç—Ä–∞–∫—Ç–æ—Ä—ã
        if len(all_translations) >= 3:
            options.extend(random.sample(all_translations, 3))
        else:
            options.extend(random.choices(all_translations, k=3) if all_translations else ["???", "???", "???"])
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        random.shuffle(options)
        
        correct_index = options.index(correct_translation)
        
        questions.append({
            "word": word,
            "correct": correct_translation,
            "options": options,
            "correct_index": correct_index,
            "is_revision": True,  # –≠—Ç–æ —Ç–µ—Å—Ç –ø–æ —Å–ª–æ–≤–∞—Ä—é, —Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏
            "test_type": "dictionary"  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞ –¥–ª—è –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
        })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
    learning_test_states[chat_id] = {
        "questions": questions,
        "current_index": 0,
        "correct": 0,
        "is_revision": True,
        "test_type": "dictionary"
    }
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç
    await callback.answer()
    await send_learning_test_question(chat_id, bot)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—É—á–µ–Ω–∏—è
def ensure_learning_columns():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—É—á–µ–Ω–∏—è"""
    try:
        from database.db import db_manager
        with db_manager.get_cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("PRAGMA table_info(users)")
            columns = [row[1] for row in cursor.fetchall()]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if 'test_words_count' not in columns:
                cursor.execute("ALTER TABLE users ADD COLUMN test_words_count INTEGER DEFAULT 5")
                
            if 'memorize_words_count' not in columns:
                cursor.execute("ALTER TABLE users ADD COLUMN memorize_words_count INTEGER DEFAULT 5")
                
            # –ö–æ–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db_manager.conn.commit()
            
        logger.info("–ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–æ–Ω–æ–∫: {e}")

# –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
ensure_learning_columns()

async def handle_memorize_set(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –∑–∞—É—á–∏–≤–∞–Ω–∏—è —Å–µ—Ç–∞"""
    chat_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = crud.get_user(chat_id)
    if not user:
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç
    level = user[1]
    
    # –ò—â–µ–º —Å–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    chosen_set = None
    if len(user) > 6 and user[6]:
        chosen_set = user[6]
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–µ—Ç '{chosen_set}' –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    
    # –ï—Å–ª–∏ —Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –≤ –∫—ç—à–µ
    if not chosen_set:
        try:
            from handlers.settings import user_set_selection
            chosen_set = user_set_selection.get(chat_id)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–µ—Ç '{chosen_set}' –∏–∑ –∫—ç—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        except ImportError:
            logger.error("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ user_set_selection, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–±–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    # –ï—Å–ª–∏ —Å–µ—Ç –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
    if not chosen_set:
        from config import DEFAULT_SETS
        chosen_set = DEFAULT_SETS.get(level)
        if chosen_set:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∫—ç—à
            crud.update_user_chosen_set(chat_id, chosen_set)
            try:
                from handlers.settings import user_set_selection
                user_set_selection[chat_id] = chosen_set
            except ImportError:
                logger.error("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ user_set_selection –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞")
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–µ—Ç '{chosen_set}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        else:
            await callback.message.edit_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è {level}.",
                parse_mode="Markdown",
                reply_markup=learning_menu_keyboard()
            )
            await callback.answer()
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞
    set_file_path = os.path.join(LEVELS_DIR, level, f"{chosen_set}.txt")
    
    if not os.path.exists(set_file_path):
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª —Å –¥—Ä—É–≥–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º
        found = False
        try:
            parent_dir = os.path.dirname(set_file_path)
            if os.path.exists(parent_dir):
                for file in os.listdir(parent_dir):
                    if file.lower() == f"{chosen_set}.txt".lower():
                        set_file_path = os.path.join(parent_dir, file)
                        found = True
                        break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–∞ —Å –¥—Ä—É–≥–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º: {e}")
        
        if not found:
            await callback.message.edit_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è —Å–µ—Ç–∞ '{chosen_set}' —É—Ä–æ–≤–Ω—è {level}.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
                parse_mode="Markdown",
                reply_markup=learning_menu_keyboard()
            )
            await callback.answer()
            return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ —Å–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    set_words = []
    try:
        encodings = ['utf-8', 'cp1251', 'latin-1', 'iso-8859-1']  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–¥–∏—Ä–æ–≤–æ–∫
        for encoding in encodings:
            try:
                with open(set_file_path, 'r', encoding=encoding) as f:
                    set_words = [line.strip() for line in f if line.strip()]
                if set_words:  # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–ª–æ–≤–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                    logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π {encoding}")
                    break
            except UnicodeDecodeError:
                continue  # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π {encoding}: {e}")
                break
        
        if not set_words:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª —Å–µ—Ç–∞ –Ω–∏ —Å –æ–¥–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π: {set_file_path}")
            await callback.message.edit_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="Markdown",
                reply_markup=learning_menu_keyboard()
            )
            await callback.answer()
            return
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞ {set_file_path}: {e}")
        await callback.message.edit_text(
            f"‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞.",
            parse_mode="Markdown",
            reply_markup=learning_menu_keyboard()
        )
        await callback.answer()
        return
    
    if not set_words:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –°–µ—Ç '{chosen_set}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤.",
            parse_mode="Markdown",
            reply_markup=learning_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–ª–∏–Ω—ã –∫–æ—Ä—Ç–µ–∂–∞
    memorize_words_count = 5  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    try:
        if len(user) > 8 and user[8] is not None:
            memorize_words_count = user[8]
        else:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∏–∑ –ë–î
            with db_manager.get_cursor() as cursor:
                cursor.execute("SELECT memorize_words_count FROM users WHERE chat_id = ?", (chat_id,))
                result = cursor.fetchone()
                if result and result[0] is not None:
                    memorize_words_count = result[0]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ memorize_words_count –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞—É—á–∏–≤–∞–Ω–∏–µ —Å–µ—Ç–∞ —Å {memorize_words_count} —Å–ª–æ–≤–∞–º–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∞
    if memorize_words_count > len(set_words):
        logger.info(f"–í —Å–µ—Ç–µ '{chosen_set}' –º–µ–Ω—å—à–µ —Å–ª–æ–≤ ({len(set_words)}), —á–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–æ ({memorize_words_count})")
        memorize_words_count = len(set_words)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–µ—Ç–∞
    selected_words = random.sample(set_words, memorize_words_count)
    
    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    learned_raw = crud.get_learned_words(chat_id)
    learned_set = set(extract_english(item[0]).lower() for item in learned_raw)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–≤–∏–∑–∞
    quiz_data = load_quiz_data(level, chosen_set)
    if not quiz_data:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–≤–∏–∑–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è {level}.",
            parse_mode="Markdown",
            reply_markup=learning_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    translations = {item["word"].lower(): item["translation"] for item in quiz_data}
    
    # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è
    questions = []
    for word_line in selected_words:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞
        english_part = ""
        russian_part = ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        for separator in [" - ", " ‚Äì ", ": "]:
            if separator in word_line:
                parts = word_line.split(separator, 1)
                english_part = parts[0].strip()
                russian_part = parts[1].strip() if len(parts) > 1 else ""
                break
        
        # –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é extract_english
        if not english_part:
            english_part = extract_english(word_line)
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        if not russian_part:
            russian_part = translations.get(english_part.lower(), english_part)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º –∏–ª–∏ –∏–∑—É—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        is_revision = english_part.lower() in learned_set
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–∏—Å–∫–ª—é—á–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
        options = [russian_part]
        all_translations = list(translations.values())
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –ø—É–ª–∞ –¥–∏—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–≤
        if russian_part in all_translations:
            all_translations.remove(russian_part)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å—Ç—Ä–∞–∫—Ç–æ—Ä—ã
        if len(all_translations) >= 3:
            options.extend(random.sample(all_translations, 3))
        else:
            options.extend(random.choices(all_translations, k=3) if all_translations else ["???", "???", "???"])
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        random.shuffle(options)
        
        correct_index = options.index(russian_part)
        
        questions.append({
            "word": english_part,  # –¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ
            "correct": russian_part,
            "options": options,
            "correct_index": correct_index,
            "is_revision": is_revision,
            "test_type": "memorize"  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞ –¥–ª—è –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
        })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
    learning_test_states[chat_id] = {
        "questions": questions,
        "current_index": 0,
        "correct": 0,
        "is_revision": False,  # –≠—Ç–æ –∑–∞—É—á–∏–≤–∞–Ω–∏–µ, –∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
        "test_type": "memorize"
    }
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç
    await callback.answer()
    await send_learning_test_question(chat_id, bot)

async def handle_learning_menu(callback: types.CallbackQuery, bot: Bot):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    
    await callback.message.edit_text("üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è:", reply_markup=learning_menu_keyboard())
    await callback.answer()

async def handle_learning_settings(callback: types.CallbackQuery, bot: Bot):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è"""
    await callback.message.edit_text(
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ –∏ –∑–∞—É—á–∏–≤–∞–Ω–∏—è.",
        parse_mode="Markdown",
        reply_markup=learning_settings_keyboard()
    )
    await callback.answer()

# –ó–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é handle_test_settings:

async def handle_test_settings(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ—Å—Ç–∞ –ø–æ —Å–ª–æ–≤–∞—Ä—é"""
    chat_id = callback.from_user.id
    user = crud.get_user(chat_id)
    if not user:
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    test_words_count = get_user_setting(user, USER_TEST_WORDS_COUNT, 5)
    memorize_words_count = get_user_setting(user, USER_MEMORIZE_WORDS_COUNT, 5)
    
    await callback.message.edit_text(
        f"üìä *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞ –ø–æ —Å–ª–æ–≤–∞—Ä—é*\n\n"
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ—Å—Ç–µ: *{test_words_count}*\n"
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –∑–∞—É—á–∏–≤–∞–Ω–∏–∏: *{memorize_words_count}*\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ (–æ—Ç 1 –¥–æ 20):\n"
        f"–ï—Å–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –º–µ–Ω—å—à–µ —Å–ª–æ–≤, —á–µ–º —É–∫–∞–∑–∞–Ω–æ, –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞.",
        parse_mode="Markdown",
        reply_markup=test_words_count_keyboard()
    )
    await callback.answer()

# –ó–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é handle_memorize_settings:

async def handle_memorize_settings(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞—É—á–∏–≤–∞–Ω–∏—è —Å–µ—Ç–∞"""
    chat_id = callback.from_user.id
    user = crud.get_user(chat_id)
    if not user:
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è
    test_words_count = get_user_setting(user, USER_TEST_WORDS_COUNT, 5)
    memorize_words_count = get_user_setting(user, USER_MEMORIZE_WORDS_COUNT, 5)
    
    await callback.message.edit_text(
        f"üìù *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—É—á–∏–≤–∞–Ω–∏—è —Å–µ—Ç–∞*\n\n"
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ—Å—Ç–µ: *{test_words_count}*\n"
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –∑–∞—É—á–∏–≤–∞–Ω–∏–∏: *{memorize_words_count}*\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è (–æ—Ç 1 –¥–æ 20):",
        parse_mode="Markdown",
        reply_markup=memorize_words_count_keyboard()
    )
    await callback.answer()

async def handle_test_count_selection(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞."""
    chat_id = callback.from_user.id
    try:
        _, _, count_str = callback.data.split(":", 2)
        count = int(count_str)
        
        if not (1 <= count <= 20):
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
            crud.update_user_test_words_count(chat_id, count)
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {count}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            user = crud.get_user(chat_id)
            test_words_count = get_user_setting(user, USER_TEST_WORDS_COUNT, count)
            memorize_words_count = get_user_setting(user, USER_MEMORIZE_WORDS_COUNT, 5)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await callback.message.edit_text(
                f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ—Å—Ç–µ: *{test_words_count}*\n"
                f"üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –∑–∞—É—á–∏–≤–∞–Ω–∏–∏: *{memorize_words_count}*",
                parse_mode="Markdown",
                reply_markup=learning_settings_keyboard()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞: {e}")
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                reply_markup=learning_settings_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

async def handle_memorize_count_selection(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è."""
    chat_id = callback.from_user.id
    try:
        _, _, count_str = callback.data.split(":", 2)
        count = int(count_str)
        
        if not (1 <= count <= 20):
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è
            crud.update_user_memorize_words_count(chat_id, count)
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {count}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            user = crud.get_user(chat_id)
            test_words_count = get_user_setting(user, USER_TEST_WORDS_COUNT, 5)
            memorize_words_count = get_user_setting(user, USER_MEMORIZE_WORDS_COUNT, count)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await callback.message.edit_text(
                f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ—Å—Ç–µ: *{test_words_count}*\n"
                f"üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –∑–∞—É—á–∏–≤–∞–Ω–∏–∏: *{memorize_words_count}*",
                parse_mode="Markdown",
                reply_markup=learning_settings_keyboard()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è: {e}")
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                reply_markup=learning_settings_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

# –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∏—Å–ª–∞
def is_valid_number(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 20"""
    if not text.isdigit():
        return False
    value = int(text)
    return 1 <= value <= 20

async def process_learning_settings_input(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞/–∑–∞—É—á–∏–≤–∞–Ω–∏—è"""
    chat_id = message.chat.id
    text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not text.isdigit():
        if chat_id not in pending_learning_settings:
            return False
        else:
            await message.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
                reply_markup=learning_settings_keyboard()
            )
            return True
    
    value = int(text)
    if not (1 <= value <= 20):
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20.",
            reply_markup=learning_settings_keyboard()
        )
        return True
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    setting_type = None
    if chat_id in pending_learning_settings:
        setting_type = pending_learning_settings[chat_id]
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–≤–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {setting_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {value}")
    else:
        # –ï—Å–ª–∏ –Ω–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —Ç.–∫. –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        return False
    
    try:
        if setting_type == "test_words":
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ—Å—Ç–∞
            with db_manager.transaction() as conn:
                conn.execute("UPDATE users SET test_words_count = ? WHERE chat_id = ?", (value, chat_id))
            
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {value}")
            
            if chat_id in pending_learning_settings:
                del pending_learning_settings[chat_id]
            
            await message.answer(
                f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {value}.",
                reply_markup=learning_settings_keyboard()
            )
            return True
            
        elif setting_type == "memorize_words":
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è
            with db_manager.transaction() as conn:
                conn.execute("UPDATE users SET memorize_words_count = ? WHERE chat_id = ?", (value, chat_id))
            
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {value}")
            
            if chat_id in pending_learning_settings:
                del pending_learning_settings[chat_id]
            
            await message.answer(
                f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {value}.",
                reply_markup=learning_settings_keyboard()
            )
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        if chat_id in pending_learning_settings:
            del pending_learning_settings[chat_id]
        
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=learning_settings_keyboard()
        )
        return True
    
    return False

# –ó–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é send_learning_test_question –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é:
# –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ handlers/learning.py:

def format_progress_bar(current: int, total: int, length: int = 10) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —à–∫–∞–ª—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    filled_length = int(length * current / total) if total > 0 else 0
    filled = "‚ñà" * filled_length
    empty = "‚ñë" * (length - filled_length)
    bar = filled + empty
    return f"[{bar}] {current}/{total}"


async def send_learning_test_question(chat_id, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞/–∑–∞—É—á–∏–≤–∞–Ω–∏—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    state = learning_test_states.get(chat_id)
    if not state:
        return
    
    if state["current_index"] >= len(state["questions"]):
        await finish_learning_test(chat_id, bot)
        return
    
    question = state["questions"][state["current_index"]]
    test_type = state.get("test_type", "")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
    current_index = state["current_index"] + 1
    total_questions = len(state["questions"])
    progress_bar = format_progress_bar(current_index, total_questions)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
    if test_type == "dictionary":
        title = "üìö –¢–ï–°–¢ –ü–û –°–õ–û–í–ê–†–Æ"
    else:  # memorize
        title = "üìù –ó–ê–£–ß–ò–í–ê–ù–ò–ï –°–ï–¢–ê"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    formatted_question = (
        f"{title}\n"
        f"{progress_bar}\n\n"
        f"–í–æ–ø—Ä–æ—Å {current_index}/{total_questions}:\n\n"
        f"–ö–∞–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ '*{question['word']}*'?"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = learning_quiz_keyboard(question["options"], state["current_index"])
    
    await bot.send_message(
        chat_id, 
        formatted_question,
        parse_mode="Markdown", 
        reply_markup=keyboard
    )

# –ó–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é process_learning_test_answer:

async def process_learning_test_answer(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞/–∑–∞—É—á–∏–≤–∞–Ω–∏—è"""
    from datetime import datetime
    
    chat_id = callback.from_user.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if callback.data == "learn:back":
        from keyboards.main_menu import main_menu_keyboard
        await bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard())
        if chat_id in learning_test_states:
            del learning_test_states[chat_id]
        await callback.answer()
        return
        
    if callback.data == "learn:stop":
        await bot.send_message(chat_id, "–¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=learning_menu_keyboard())
        if chat_id in learning_test_states:
            del learning_test_states[chat_id]
        await callback.answer()
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    try:
        data = callback.data.split(":")
        if len(data) != 4:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
            return
            
        _, _, q_index_str, option_index_str = data
        q_index = int(q_index_str)
        option_index = int(option_index_str)
        
        state = learning_test_states.get(chat_id)
        if not state:
            await callback.answer("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
            
        if q_index != state["current_index"]:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤.", show_alert=True)
            return
            
        question = state["questions"][q_index]
        test_type = state.get("test_type", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        is_correct = (option_index == question["correct_index"])
        
        if is_correct:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
                if test_type == "dictionary":
                    # –≠—Ç–æ —Ç–µ—Å—Ç –ø–æ —Å–ª–æ–≤–∞—Ä—é, —Å–ª–æ–≤–æ —É–∂–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
                    await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
                elif test_type == "memorize":
                    # –≠—Ç–æ –∑–∞—É—á–∏–≤–∞–Ω–∏–µ —Å–µ—Ç–∞, —Å–ª–æ–≤–æ –ù–ï –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ä—å
                    await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! (–°–ª–æ–≤–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ä—å)")
                else:
                    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∞, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                    await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
                    
                state["correct"] += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
                await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
        else:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            await callback.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['correct']}")
            
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        state["current_index"] += 1
        await send_learning_test_question(chat_id, bot)
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ó–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é finish_learning_test:

async def finish_learning_test(chat_id, bot: Bot):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    state = learning_test_states.get(chat_id)
    if not state:
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    correct = state['correct']
    total = len(state['questions'])
    percentage = (correct / total) * 100 if total > 0 else 0
    
    # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if percentage >= 90:
        emoji = "üéâ"
    elif percentage >= 70:
        emoji = "üëç"
    elif percentage >= 50:
        emoji = "üëå"
    else:
        emoji = "üîÑ"
    
    # –°–æ–∑–¥–∞–µ–º —à–∫–∞–ª—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress = format_progress_bar(correct, total, 20)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
    if state['test_type'] == "dictionary":
        header = f"{emoji} –¢–µ—Å—Ç –ø–æ —Å–ª–æ–≤–∞—Ä—é –∑–∞–≤–µ—Ä—à–µ–Ω! {emoji}"
    else:  # memorize
        header = f"{emoji} –ó–∞—É—á–∏–≤–∞–Ω–∏–µ —Å–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! {emoji}"
    
    message = f"{header}\n\n"
    message += f"*–°—á–µ—Ç:* {correct} –∏–∑ {total} ({percentage:.1f}%)\n{progress}\n\n"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
    if state['test_type'] == "dictionary":
        message += "–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–ª –≤–∞—à–µ –∑–Ω–∞–Ω–∏–µ —Å–ª–æ–≤ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è.\n\n"
    else:  # memorize
        message += "–ó–∞—É—á–∏–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–∞ –≤ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ö–≤–∏–∑ –¥–ª—è —ç—Ç–æ–≥–æ.\n\n"
    
    # –°–æ–≤–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if percentage < 70:
        message += "üí° *–°–æ–≤–µ—Ç:* –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –∑–∞–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–∞."
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back"))
    keyboard.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—É—á–µ–Ω–∏—é", callback_data="learning:back"))
    
    await bot.send_message(
        chat_id, 
        message,
        parse_mode="Markdown", 
        reply_markup=keyboard
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    if percentage >= 70:
        from utils.sticker_helper import get_congratulation_sticker
        sticker_id = get_congratulation_sticker()
        if sticker_id:
            await bot.send_sticker(chat_id, sticker_id)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
    del learning_test_states[chat_id]

# –ó–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é register_learning_handlers:

def register_learning_handlers(dp: Dispatcher, bot: Bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è"""
    # –í–ê–ñ–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–º
    dp.register_message_handler(
        partial(process_learning_settings_input, bot=bot),
        lambda message: message.text and message.text.strip().isdigit() or message.chat.id in pending_learning_settings,
        content_types=['text'],
        state="*"  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    )
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
    dp.register_callback_query_handler(
        partial(handle_test_count_selection, bot=bot),
        lambda c: c.data and c.data.startswith("learn:test_count:")
    )
    
    dp.register_callback_query_handler(
        partial(handle_memorize_count_selection, bot=bot),
        lambda c: c.data and c.data.startswith("learn:memorize_count:")
    )
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ—Å–ª–µ
    dp.register_callback_query_handler(
        partial(handle_learning_menu, bot=bot),
        lambda c: c.data == "menu:learning"
    )
    
    dp.register_callback_query_handler(
        partial(handle_learning_menu, bot=bot),
        lambda c: c.data == "learning:back"
    )
    
    dp.register_callback_query_handler(
        partial(handle_learning_settings, bot=bot),
        lambda c: c.data == "learning:settings"
    )
    
    dp.register_callback_query_handler(
        partial(handle_test_settings, bot=bot),
        lambda c: c.data == "learning:test_settings"
    )
    
    dp.register_callback_query_handler(
        partial(handle_memorize_settings, bot=bot),
        lambda c: c.data == "learning:memorize_settings"
    )
    
    dp.register_callback_query_handler(
        partial(handle_dictionary_test, bot=bot),
        lambda c: c.data == "learning:dictionary_test"
    )
    
    dp.register_callback_query_handler(
        partial(handle_memorize_set, bot=bot),
        lambda c: c.data == "learning:memorize_set"
    )
    
    dp.register_callback_query_handler(
        partial(process_learning_test_answer, bot=bot),
        lambda c: c.data and c.data.startswith("learn:answer:")
    )
    
    dp.register_callback_query_handler(
        partial(process_learning_test_answer, bot=bot),
        lambda c: c.data in ["learn:back", "learn:stop"]
    )

def learning_quiz_keyboard(options, question_index):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ—Å—Ç–∞ –æ–±—É—á–µ–Ω–∏—è —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ callback_data."""
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for i, option in enumerate(options):
        keyboard.add(types.InlineKeyboardButton(option, callback_data=f"learn:answer:{question_index}:{i}"))
    keyboard.add(
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="learn:back"),
        types.InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç", callback_data="learn:stop")
    )
    return keyboard