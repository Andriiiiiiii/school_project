import random
from aiogram import types, Dispatcher, Bot
from keyboards.submenus import learning_menu_keyboard, learning_settings_keyboard
from keyboards.main_menu import main_menu_keyboard
from utils.helpers import load_words_for_set, extract_english
from utils.quiz_helpers import load_quiz_data
from database import crud
from functools import partial
import logging
import os
from config import LEVELS_DIR

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞
pending_learning_settings = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ (–∫–∞–∫ –≤ quiz.py)
learning_test_states = {}

async def handle_learning_menu(callback: types.CallbackQuery, bot: Bot):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è"""
    await callback.message.edit_text("üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è:", reply_markup=learning_menu_keyboard())
    await callback.answer()

async def handle_learning_settings(callback: types.CallbackQuery, bot: Bot):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è"""
    await callback.message.edit_text(
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ –∏ –∑–∞—É—á–∏–≤–∞–Ω–∏—è.",
        parse_mode="Markdown",
        reply_markup=learning_settings_keyboard()
    )
    await callback.answer()

async def handle_test_settings(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ—Å—Ç–∞ –ø–æ —Å–ª–æ–≤–∞—Ä—é"""
    chat_id = callback.from_user.id
    user = crud.get_user(chat_id)
    if not user:
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
    test_words_count = user[7] if len(user) > 7 and user[7] else 5
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞
    pending_learning_settings[chat_id] = "test_words"
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="learning:settings"))
    
    await callback.message.edit_text(
        f"üìä *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞ –ø–æ —Å–ª–æ–≤–∞—Ä—é*\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ—Å—Ç–µ: *{test_words_count}*\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ (–æ—Ç 1 –¥–æ 20):",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback.answer()

async def handle_memorize_set(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –∑–∞—É—á–∏–≤–∞–Ω–∏—è —Å–µ—Ç–∞"""
    chat_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    from database import crud
    user = crud.get_user(chat_id)
    if not user:
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç
    level = user[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —Å–µ—Ç –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    chosen_set = None
    if len(user) > 6 and user[6]:
        chosen_set = user[6]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫—ç—à–µ –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    from handlers.settings import user_set_selection
    if not chosen_set and chat_id in user_set_selection:
        chosen_set = user_set_selection[chat_id]
    
    # –ï—Å–ª–∏ —Å–µ—Ç –≤—Å–µ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not chosen_set:
        from config import DEFAULT_SETS
        chosen_set = DEFAULT_SETS.get(level)
        if chosen_set:
            crud.update_user_chosen_set(chat_id, chosen_set)
            user_set_selection[chat_id] = chosen_set
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞
    import os
    from config import LEVELS_DIR
    set_file_path = os.path.join(LEVELS_DIR, level, f"{chosen_set}.txt")
    if not os.path.exists(set_file_path):
        await callback.message.edit_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è —Å–µ—Ç–∞ '{chosen_set}' —É—Ä–æ–≤–Ω—è {level}.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
            parse_mode="Markdown",
            reply_markup=learning_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ —Å–µ—Ç–∞
    set_words = []
    try:
        with open(set_file_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line:
                    set_words.append(line)
    except UnicodeDecodeError:
        try:
            with open(set_file_path, 'r', encoding='cp1251') as f:
                for line in f:
                    line = line.strip()
                    if line:
                        set_words.append(line)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞: {e}")
            await callback.message.edit_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞.",
                parse_mode="Markdown",
                reply_markup=learning_menu_keyboard()
            )
            await callback.answer()
            return
    
    if not set_words:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –°–µ—Ç '{chosen_set}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤.",
            parse_mode="Markdown",
            reply_markup=learning_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è
    memorize_words_count = user[8] if len(user) > 8 and user[8] else 5
    memorize_words_count = min(memorize_words_count, len(set_words))
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–µ—Ç–∞
    selected_words = random.sample(set_words, memorize_words_count)
    
    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    learned_raw = crud.get_learned_words(chat_id)
    learned_set = set(extract_english(item[0]).lower() for item in learned_raw)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–≤–∏–∑–∞
    from utils.quiz_helpers import load_quiz_data
    quiz_data = load_quiz_data(level, chosen_set)
    if not quiz_data:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–≤–∏–∑–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è {level}.",
            parse_mode="Markdown",
            reply_markup=learning_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    translations = {item["word"].lower(): item["translation"] for item in quiz_data}
    
    # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è
    questions = []
    for word_line in selected_words:
        english_word = extract_english(word_line).lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
        if " - " in word_line:
            correct_translation = word_line.split(" - ", 1)[1].strip()
        elif " ‚Äì " in word_line:
            correct_translation = word_line.split(" ‚Äì ", 1)[1].strip()
        elif ": " in word_line:
            correct_translation = word_line.split(": ", 1)[1].strip()
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            correct_translation = translations.get(english_word, english_word)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–∏—Å–∫–ª—é—á–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
        options = [correct_translation]
        all_translations = list(translations.values())
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –ø—É–ª–∞ –¥–∏—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–≤
        if correct_translation in all_translations:
            all_translations.remove(correct_translation)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å—Ç—Ä–∞–∫—Ç–æ—Ä—ã
        if len(all_translations) >= 3:
            options.extend(random.sample(all_translations, 3))
        else:
            options.extend(random.choices(all_translations, k=3) if all_translations else ["???", "???", "???"])
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        random.shuffle(options)
        
        correct_index = options.index(correct_translation)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º –∏–ª–∏ –∏–∑—É—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        is_revision = english_word.lower() in learned_set
        
        questions.append({
            "word": english_word,  # –¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –≤–º–µ—Å—Ç–æ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏
            "correct": correct_translation,
            "options": options,
            "correct_index": correct_index,
            "is_revision": is_revision
        })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
    learning_test_states[chat_id] = {
        "questions": questions,
        "current_index": 0,
        "correct": 0,
        "is_revision": False,  # –≠—Ç–æ –∑–∞—É—á–∏–≤–∞–Ω–∏–µ, –∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
        "test_type": "memorize"
    }
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç
    await callback.answer()
    await send_learning_test_question(chat_id, bot)

async def process_learning_settings_input(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞/–∑–∞—É—á–∏–≤–∞–Ω–∏—è"""
    chat_id = message.chat.id
    if chat_id not in pending_learning_settings:
        return
    
    setting_type = pending_learning_settings.pop(chat_id)
    text = message.text.strip()
    
    if not text.isdigit():
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=learning_settings_keyboard()
        )
        return
    
    value = int(text)
    if not (1 <= value <= 20):
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20.",
            reply_markup=learning_settings_keyboard()
        )
        return
    
    if setting_type == "test_words":
        crud.update_user_test_words_count(chat_id, value)
        await message.answer(
            f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {value}.",
            reply_markup=learning_settings_keyboard()
        )
    elif setting_type == "memorize_words":
        crud.update_user_memorize_words_count(chat_id, value)
        await message.answer(
            f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {value}.",
            reply_markup=learning_settings_keyboard()
        )

async def handle_dictionary_test(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ —Å–ª–æ–≤–∞—Ä—é"""
    chat_id = callback.from_user.id
    user = crud.get_user(chat_id)
    if not user:
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    learned_words = crud.get_learned_words(chat_id)
    if not learned_words:
        await callback.message.edit_text(
            "üìö *–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç*\n\n"
            "–ü—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑—ã –∏–ª–∏ –∑–∞—É—á–∏–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –≤ —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å!",
            parse_mode="Markdown",
            reply_markup=learning_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    test_words_count = user[7] if len(user) > 7 and user[7] else 5
    test_words_count = min(test_words_count, len(learned_words))
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    selected_words = random.sample(learned_words, test_words_count)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–≤–∏–∑–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    level = user[1]
    chosen_set = user[6] if len(user) > 6 and user[6] else None
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–≤–∏–∑–∞
    quiz_data = load_quiz_data(level, chosen_set)
    if not quiz_data:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–≤–∏–∑–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è {level}.",
            parse_mode="Markdown",
            reply_markup=learning_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    translations = {item["word"].lower(): item["translation"] for item in quiz_data}
    
    # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞
    questions = []
    for word, translation in selected_words:
        english_word = extract_english(word).lower()
        correct_translation = translation
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–∏—Å–∫–ª—é—á–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
        options = [correct_translation]
        all_translations = list(translations.values())
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –ø—É–ª–∞ –¥–∏—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–≤
        if correct_translation in all_translations:
            all_translations.remove(correct_translation)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å—Ç—Ä–∞–∫—Ç–æ—Ä—ã
        if len(all_translations) >= 3:
            options.extend(random.sample(all_translations, 3))
        else:
            options.extend(random.choices(all_translations, k=3) if all_translations else ["???", "???", "???"])
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        random.shuffle(options)
        
        correct_index = options.index(correct_translation)
        
        questions.append({
            "word": word,
            "correct": correct_translation,
            "options": options,
            "correct_index": correct_index,
            "is_revision": True  # –≠—Ç–æ —Ç–µ—Å—Ç –ø–æ —Å–ª–æ–≤–∞—Ä—é, –≤—Å–µ–≥–¥–∞ —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
    learning_test_states[chat_id] = {
        "questions": questions,
        "current_index": 0,
        "correct": 0,
        "is_revision": True,
        "test_type": "dictionary"
    }
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç
    await callback.answer()
    await send_learning_test_question(chat_id, bot)

async def handle_memorize_set(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –∑–∞—É—á–∏–≤–∞–Ω–∏—è —Å–µ—Ç–∞"""
    chat_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    from database import crud
    user = crud.get_user(chat_id)
    if not user:
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç
    level = user[1]
    
    # –ò—â–µ–º —Å–µ—Ç –¢–û–õ–¨–ö–û –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
    chosen_set = None
    if len(user) > 6 and user[6]:
        chosen_set = user[6]
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–µ—Ç '{chosen_set}' –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    
    # –ï—Å–ª–∏ —Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
    if not chosen_set:
        from config import DEFAULT_SETS
        chosen_set = DEFAULT_SETS.get(level)
        if chosen_set:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∫—ç—à
            crud.update_user_chosen_set(chat_id, chosen_set)
            from handlers.settings import user_set_selection
            user_set_selection[chat_id] = chosen_set
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–µ—Ç '{chosen_set}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        else:
            await callback.message.edit_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è {level}.",
                parse_mode="Markdown",
                reply_markup=learning_menu_keyboard()
            )
            await callback.answer()
            return
    
    logger.info(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} —Å —É—Ä–æ–≤–Ω–µ–º {level} –≤—ã–±—Ä–∞–Ω —Å–µ—Ç '{chosen_set}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞
    import os
    from config import LEVELS_DIR
    
    set_file_path = os.path.join(LEVELS_DIR, level, f"{chosen_set}.txt")
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É —Å–µ—Ç–∞: {set_file_path}")
    
    if not os.path.exists(set_file_path):
        logger.error(f"–§–∞–π–ª —Å–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {set_file_path}")
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª —Å –ø–æ—Ö–æ–∂–∏–º –∏–º–µ–Ω–µ–º (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        level_dir = os.path.join(LEVELS_DIR, level)
        if os.path.exists(level_dir):
            similar_files = []
            for file in os.listdir(level_dir):
                if file.lower() == f"{chosen_set.lower()}.txt":
                    similar_files.append(file)
            
            if similar_files:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø–æ—Ö–æ–∂–∏–º –∏–º–µ–Ω–µ–º
                file_name = similar_files[0]
                set_file_path = os.path.join(level_dir, file_name)
                logger.info(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –ø–æ—Ö–æ–∂–∏–º –∏–º–µ–Ω–µ–º: {set_file_path}")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç –≤ –±–∞–∑–µ –∏ –∫—ç—à–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º
                chosen_set = os.path.splitext(file_name)[0]
                crud.update_user_chosen_set(chat_id, chosen_set)
                from handlers.settings import user_set_selection
                user_set_selection[chat_id] = chosen_set
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ—Ö–æ–∂–∏–π —Ñ–∞–π–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–µ—Ç
                from config import DEFAULT_SETS
                default_set = DEFAULT_SETS.get(level)
                default_set_path = os.path.join(level_dir, f"{default_set}.txt")
                
                if default_set and os.path.exists(default_set_path):
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–µ—Ç
                    set_file_path = default_set_path
                    chosen_set = default_set
                    crud.update_user_chosen_set(chat_id, chosen_set)
                    from handlers.settings import user_set_selection
                    user_set_selection[chat_id] = chosen_set
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–µ—Ç '{chosen_set}' –≤–º–µ—Å—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ")
                    
                    await callback.message.edit_text(
                        f"‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç '{user[6]}' –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                        f"–ò—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–µ—Ç '{chosen_set}' –¥–ª—è —É—Ä–æ–≤–Ω—è {level}.",
                        parse_mode="Markdown",
                        reply_markup=learning_menu_keyboard()
                    )
                    await callback.answer()
                    return
                else:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –ø–æ—Ö–æ–∂–∏–π —Ñ–∞–π–ª, –Ω–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–µ—Ç
                    await callback.message.edit_text(
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è —Å–µ—Ç–∞ '{chosen_set}' —É—Ä–æ–≤–Ω—è {level}.\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
                        parse_mode="Markdown",
                        reply_markup=learning_menu_keyboard()
                    )
                    await callback.answer()
                    return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ —Å–µ—Ç–∞
    set_words = []
    try:
        with open(set_file_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line:
                    set_words.append(line)
    except UnicodeDecodeError:
        try:
            with open(set_file_path, 'r', encoding='cp1251') as f:
                for line in f:
                    line = line.strip()
                    if line:
                        set_words.append(line)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞: {e}")
            await callback.message.edit_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞.",
                parse_mode="Markdown",
                reply_markup=learning_menu_keyboard()
            )
            await callback.answer()
            return
    
    if not set_words:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –°–µ—Ç '{chosen_set}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤.",
            parse_mode="Markdown",
            reply_markup=learning_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è
    memorize_words_count = user[8] if len(user) > 8 and user[8] else 5
    memorize_words_count = min(memorize_words_count, len(set_words))
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–µ—Ç–∞
    selected_words = random.sample(set_words, memorize_words_count)
    
    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    learned_raw = crud.get_learned_words(chat_id)
    learned_set = set(extract_english(item[0]).lower() for item in learned_raw)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–≤–∏–∑–∞
    from utils.quiz_helpers import load_quiz_data
    quiz_data = load_quiz_data(level, chosen_set)
    if not quiz_data:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–≤–∏–∑–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è {level}.",
            parse_mode="Markdown",
            reply_markup=learning_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    translations = {item["word"].lower(): item["translation"] for item in quiz_data}
    
    # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è
    questions = []
    for word_line in selected_words:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞
        english_part = ""
        russian_part = ""
        
        if " - " in word_line:
            parts = word_line.split(" - ", 1)
            english_part = parts[0].strip()
            russian_part = parts[1].strip() if len(parts) > 1 else ""
        elif " ‚Äì " in word_line:
            parts = word_line.split(" ‚Äì ", 1)
            english_part = parts[0].strip()
            russian_part = parts[1].strip() if len(parts) > 1 else ""
        elif ": " in word_line:
            parts = word_line.split(": ", 1)
            english_part = parts[0].strip()
            russian_part = parts[1].strip() if len(parts) > 1 else ""
        else:
            english_part = extract_english(word_line)
            russian_part = translations.get(english_part.lower(), "")
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        if not russian_part:
            russian_part = translations.get(english_part.lower(), english_part)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º –∏–ª–∏ –∏–∑—É—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        is_revision = english_part.lower() in learned_set
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–∏—Å–∫–ª—é—á–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
        options = [russian_part]
        all_translations = list(translations.values())
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –ø—É–ª–∞ –¥–∏—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–≤
        if russian_part in all_translations:
            all_translations.remove(russian_part)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å—Ç—Ä–∞–∫—Ç–æ—Ä—ã
        if len(all_translations) >= 3:
            options.extend(random.sample(all_translations, 3))
        else:
            options.extend(random.choices(all_translations, k=3) if all_translations else ["???", "???", "???"])
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        random.shuffle(options)
        
        correct_index = options.index(russian_part)
        
        questions.append({
            "word": english_part,  # –¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ
            "correct": russian_part,
            "options": options,
            "correct_index": correct_index,
            "is_revision": is_revision
        })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
    learning_test_states[chat_id] = {
        "questions": questions,
        "current_index": 0,
        "correct": 0,
        "is_revision": False,
        "test_type": "memorize"
    }
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç
    await callback.answer()
    await send_learning_test_question(chat_id, bot)

async def send_learning_test_question(chat_id, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞/–∑–∞—É—á–∏–≤–∞–Ω–∏—è"""
    from utils.visual_helpers import format_quiz_question
    
    state = learning_test_states.get(chat_id)
    if not state:
        return
    
    if state["current_index"] >= len(state["questions"]):
        await finish_learning_test(chat_id, bot)
        return
    
    question = state["questions"][state["current_index"]]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∑–∞–ø–∏—Å—å
    logger.debug(f"–í–æ–ø—Ä–æ—Å —Å–ª–æ–≤–æ: '{question['word']}', –ø–µ—Ä–µ–≤–æ–¥: '{question['correct']}'")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
    if state["test_type"] == "dictionary":
        title = "üìö –¢–ï–°–¢ –ü–û –°–õ–û–í–ê–†–Æ"
    else:  # memorize
        title = "üìù –ó–ê–£–ß–ò–í–ê–ù–ò–ï –°–ï–¢–ê"
    
    formatted_question = format_quiz_question(
        state["current_index"] + 1,
        len(state["questions"]),
        question["word"],  # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ
        question["options"],
        False  # –í—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_revision –≤ False –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    )
    
    # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    formatted_question = formatted_question.replace("üéØ –°–õ–û–í–ê–†–ù–´–ô –ö–í–ò–ó", title)
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ—Å—Ç –ø–æ —Å–ª–æ–≤–∞—Ä—é, –∏ —Å–ª–æ–≤–æ —É–∂–µ –≤—ã—É—á–µ–Ω–æ, –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
    if state["test_type"] == "dictionary" and question["is_revision"]:
        formatted_question = formatted_question.replace(title, "üîÑ –ü–û–í–¢–û–†–ï–ù–ò–ï –°–õ–û–í–ê–†–Ø")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = learning_quiz_keyboard(question["options"], state["current_index"])
    
    await bot.send_message(
        chat_id, 
        formatted_question,
        parse_mode="Markdown", 
        reply_markup=keyboard
    )

async def process_learning_test_answer(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞/–∑–∞—É—á–∏–≤–∞–Ω–∏—è"""
    from datetime import datetime
    
    if callback.data == "learn:back":
        from keyboards.main_menu import main_menu_keyboard
        await bot.send_message(callback.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard())
        if callback.from_user.id in learning_test_states:
            del learning_test_states[callback.from_user.id]
        await callback.answer()
        return
        
    if callback.data == "learn:stop":
        await bot.send_message(callback.from_user.id, "–¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=learning_menu_keyboard())
        if callback.from_user.id in learning_test_states:
            del learning_test_states[callback.from_user.id]
        await callback.answer()
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    data = callback.data.split(":")
    if len(data) != 4:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
        
    _, _, q_index_str, option_index_str = data
    q_index = int(q_index_str)
    option_index = int(option_index_str)
    
    chat_id = callback.from_user.id
    state = learning_test_states.get(chat_id)
    if not state:
        await callback.answer("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
        
    if q_index != state["current_index"]:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤.", show_alert=True)
        return
        
    question = state["questions"][q_index]
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —ç—Ç—É —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ process_learning_test_answer
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if option_index == question["correct_index"]:
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞—É—á–∏–≤–∞–Ω–∏–µ –∏ –Ω–µ —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –≤—ã—É—á–µ–Ω–Ω—ã–µ
            if state["test_type"] == "memorize" and not question["is_revision"]:
                word = question["word"]  # –¢–µ–ø–µ—Ä—å –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ
                translation = question["correct"]
                
                # –Ø–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç crud
                from database import crud
                crud.add_learned_word(chat_id, word, translation, datetime.now().strftime("%Y-%m-%d"))
                await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å.")
            else:
                await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
                
            state["correct"] += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
            await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
    else:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await callback.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['correct']}")
        
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    state["current_index"] += 1
    await send_learning_test_question(chat_id, bot)

async def finish_learning_test(chat_id, bot: Bot):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    from utils.visual_helpers import format_result_message
    
    state = learning_test_states.get(chat_id)
    if not state:
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    result_message = format_result_message(
        state['correct'], 
        len(state['questions']),
        state['test_type'] == "dictionary"  # dictionary = –≤—Å–µ–≥–¥–∞ —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back"))
    keyboard.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—É—á–µ–Ω–∏—é", callback_data="learning:back"))
    
    await bot.send_message(
        chat_id, 
        result_message,
        parse_mode="Markdown", 
        reply_markup=keyboard
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    if state['correct'] / len(state['questions']) >= 0.7:
        from utils.sticker_helper import get_congratulation_sticker
        sticker_id = get_congratulation_sticker()
        if sticker_id:
            await bot.send_sticker(chat_id, sticker_id)
    
    del learning_test_states[chat_id]

def register_learning_handlers(dp: Dispatcher, bot: Bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è"""
    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è
    dp.register_callback_query_handler(
        partial(handle_learning_menu, bot=bot),
        lambda c: c.data == "menu:learning"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è
    dp.register_callback_query_handler(
        partial(handle_learning_menu, bot=bot),
        lambda c: c.data == "learning:back"
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è
    dp.register_callback_query_handler(
        partial(handle_learning_settings, bot=bot),
        lambda c: c.data == "learning:settings"
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞ –ø–æ —Å–ª–æ–≤–∞—Ä—é
    dp.register_callback_query_handler(
        partial(handle_test_settings, bot=bot),
        lambda c: c.data == "learning:test_settings"
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—É—á–∏–≤–∞–Ω–∏—è —Å–µ—Ç–∞
    dp.register_callback_query_handler(
        partial(handle_memorize_set, bot=bot),
        lambda c: c.data == "learning:memorize_settings"
    )
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–æ —Å–ª–æ–≤–∞—Ä—é
    dp.register_callback_query_handler(
        partial(handle_dictionary_test, bot=bot),
        lambda c: c.data == "learning:dictionary_test"
    )
    
    # –ó–∞–ø—É—Å–∫ –∑–∞—É—á–∏–≤–∞–Ω–∏—è —Å–µ—Ç–∞
    dp.register_callback_query_handler(
        partial(handle_memorize_set, bot=bot),
        lambda c: c.data == "learning:memorize_set"
    )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞/–∑–∞—É—á–∏–≤–∞–Ω–∏—è
    dp.register_callback_query_handler(
        partial(process_learning_test_answer, bot=bot),
        lambda c: c.data and c.data.startswith("learn:answer:")
    )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ —Ç–µ—Å—Ç–∞
    dp.register_callback_query_handler(
        partial(process_learning_test_answer, bot=bot),
        lambda c: c.data in ["learn:back", "learn:stop"]
    )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    dp.register_message_handler(
        partial(process_learning_settings_input, bot=bot),
        lambda message: message.from_user.id in pending_learning_settings and message.text,
        content_types=['text']
    )

def learning_quiz_keyboard(options, question_index):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ—Å—Ç–∞ –æ–±—É—á–µ–Ω–∏—è —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ callback_data."""
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for i, option in enumerate(options):
        keyboard.add(types.InlineKeyboardButton(option, callback_data=f"learn:answer:{question_index}:{i}"))
    keyboard.add(
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="learn:back"),
        types.InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç", callback_data="learn:stop")
    )
    return keyboard