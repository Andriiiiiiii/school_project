from aiogram import types, Dispatcher, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboards.submenus import (
    notification_settings_menu_keyboard, 
    settings_menu_keyboard,
    level_selection_keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
)
from keyboards.main_menu import main_menu_keyboard
from database import crud
from functools import partial
from utils.helpers import reset_daily_words_cache, LEVELS_DIR
import os
import logging
from zoneinfo import ZoneInfo

from utils.visual_helpers import format_settings_overview
from utils.sticker_helper import get_congratulation_sticker

import urllib.parse

from config import DEFAULT_SETS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ (–∫–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
pending_settings = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∫–ª—é—á: chat_id, –∑–Ω–∞—á–µ–Ω–∏–µ: –∏–º—è —Å–µ—Ç–∞)
user_set_selection = {}

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–∏—è UTC —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞/—Ä–µ–≥–∏–æ–Ω–∞
timezones_map = {
    2: "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥",
    3: "–ú–æ—Å–∫–≤–∞",
    4: "–°–∞–º–∞—Ä–∞",
    5: "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
    6: "–û–º—Å–∫",
    7: "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫",
    8: "–ò—Ä–∫—É—Ç—Å–∫",
    9: "–Ø–∫—É—Ç—Å–∫–æ–µ",
    10: "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",
    11: "–ú–∞–≥–∞–¥–∞–Ω—Å–∫–æ–µ",
    12: "–ö–∞–º—á–∞—Ç—Å–∫–æ–µ"
}

# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º IANA –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º
russian_tzs = {
    2: "Europe/Kaliningrad",  # UTC+2
    3: "Europe/Moscow",       # UTC+3
    4: "Europe/Samara",       # UTC+4
    5: "Asia/Yekaterinburg",  # UTC+5
    6: "Asia/Omsk",           # UTC+6
    7: "Asia/Krasnoyarsk",    # UTC+7
    8: "Asia/Irkutsk",        # UTC+8
    9: "Asia/Yakutsk",        # UTC+9
    10: "Asia/Vladivostok",   # UTC+10
    11: "Asia/Magadan",       # UTC+11
    12: "Asia/Kamchatka"      # UTC+12
}

def is_valid_timezone(tz_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞."""
    try:
        ZoneInfo(tz_name)
        return True
    except Exception:
        return False

async def show_settings_callback(callback: types.CallbackQuery, bot: Bot):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ"""
    await callback.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:", reply_markup=settings_menu_keyboard())
    await callback.answer()

async def process_settings_choice_callback(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    –û–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ UX.
    """
    chat_id = callback.from_user.id
    try:
        _, option = callback.data.split(":", 1)
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    if option == "level":
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
        await callback.message.edit_text(
            "üî§ *–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:*\n\n"
            "üü¢ *A1-A2* - –ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å\n"
            "üü° *B1-B2* - –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å\n"
            "üî¥ *C1-C2* - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å", 
            parse_mode="Markdown",
            reply_markup=level_selection_keyboard()
        )

    elif option == "notifications":
        await callback.message.edit_text(
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, "
            "–∞ —Ç–∞–∫–∂–µ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.",
            parse_mode="Markdown",
            reply_markup=notification_settings_menu_keyboard()
        )

    elif option == "words":
        pending_settings[chat_id] = "words"
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings:back"))
        
        await callback.message.edit_text(
            "üìä *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ. "
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç 5 –¥–æ 15 —Å–ª–æ–≤ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20:",
            parse_mode="Markdown",
            reply_markup=keyboard
        )

    elif option == "repetitions":
        pending_settings[chat_id] = "repetitions"
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings:back"))
        
        await callback.message.edit_text(
            "üîÑ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è. "
            "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –ª—É—á—à–µ –∑–∞–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–∞.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5:",
            parse_mode="Markdown",
            reply_markup=keyboard
        )

    elif option == "timezone":
        keyboard = InlineKeyboardMarkup(row_width=2)
        
        for offset in range(2, 13):
            city_name = timezones_map.get(offset, "")
            tz_label = f"UTC+{offset} {city_name}"
            callback_data = f"set_timezone:UTC+{offset}"
            
            keyboard.insert(InlineKeyboardButton(tz_label, callback_data=callback_data))
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings:back"))
        
        await callback.message.edit_text(
            "üåê *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å*\n\n"
            "–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è.",
            parse_mode="Markdown",
            reply_markup=keyboard
        )

    elif option == "set":
        await process_my_sets(callback, bot)

    elif option == "mysettings":
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await process_settings_mysettings(callback, bot)

    await callback.answer()

async def process_my_sets(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ —Å–µ—Ç—ã". –°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    chat_id = callback.from_user.id
    try:
        user = crud.get_user(chat_id)
        if not user:
            await bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            return
            
        user_level = user[1]
        level_dir = os.path.join(LEVELS_DIR, user_level)
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}, —É—Ä–æ–≤–µ–Ω—å {user_level}, –ø—É—Ç—å: {level_dir}")
        
        if not os.path.exists(level_dir):
            logger.warning(f"Level directory not found: {level_dir}")
            await bot.send_message(chat_id, f"–ü–∞–ø–∫–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è {user_level} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
            
        try:
            set_files = [f for f in os.listdir(level_dir) if f.endswith(".txt")]
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(set_files)} —Ñ–∞–π–ª–æ–≤ —Å–µ—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {level_dir}")
        except PermissionError:
            logger.error(f"Permission denied when accessing directory: {level_dir}")
            await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ —É—Ä–æ–≤–Ω—è {user_level}.")
            return
        except Exception as e:
            logger.error(f"Error listing directory {level_dir}: {e}")
            await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ —É—Ä–æ–≤–Ω—è {user_level}.")
            return
            
        if not set_files:
            await bot.send_message(chat_id, f"–í –ø–∞–ø–∫–µ {user_level} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ç–æ–≤.")
            return

        # Get current set and learned words
        current_set = user_set_selection.get(chat_id, None)
        
        # –ï—Å–ª–∏ –Ω–µ –≤ –∫—ç—à–µ, —Å–º–æ—Ç—Ä–∏–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if not current_set and len(user) > 6 and user[6]:
            current_set = user[6]
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
            user_set_selection[chat_id] = current_set
        
        # Check if user has any learned words
        try:
            learned_words = crud.get_learned_words(chat_id)
            has_learned_words = len(learned_words) > 0
        except Exception as e:
            logger.error(f"Error checking learned words: {e}")
            has_learned_words = False
        
        # Prepare message with current set info
        message_text = f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ç—ã –¥–ª—è —É—Ä–æ–≤–Ω—è {user_level}:"
        if current_set:
            message_text = f"–¢–µ–∫—É—â–∏–π —Å–µ—Ç: *{current_set}*\n\n" + message_text
        
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É callback_data, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ Button_data_invalid
        for filename in set_files:
            set_name = os.path.splitext(filename)[0]
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏ —Å–µ—Ç–∞ –≤ callback_data –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∫—ç—à–µ
            set_index = len(set_files) - set_files.index(filename)  # –ù–∞—á–∏–Ω–∞–µ–º —Å 1
            callback_data = f"set_idx:{set_index}" if not has_learned_words else f"confirm_idx:{set_index}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Å–µ—Ç–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π cache –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å—É
            if not hasattr(process_my_sets, 'set_cache'):
                process_my_sets.set_cache = {}
            process_my_sets.set_cache[f"{chat_id}_{set_index}"] = set_name
            
            keyboard.add(types.InlineKeyboardButton(set_name, callback_data=callback_data))
        
        keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="menu:settings"))
        
        await bot.send_message(chat_id, message_text, parse_mode="Markdown", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ process_my_sets –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

async def handle_set_by_index(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
    chat_id = callback.from_user.id
    try:
        _, set_index = callback.data.split(":", 1)
        set_index = int(set_index)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–µ—Ç–∞ –∏–∑ –∫—ç—à–∞
        if not hasattr(process_my_sets, 'set_cache'):
            process_my_sets.set_cache = {}
        
        set_name = process_my_sets.set_cache.get(f"{chat_id}_{set_index}")
        if not set_name:
            await callback.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —É—Ä–æ–≤–µ–Ω—å
        user = crud.get_user(chat_id)
        if not user:
            await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            return
        
        user_level = user[1]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç
        current_set = None
        if chat_id in user_set_selection:
            current_set = user_set_selection[chat_id]
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, —Å–º–æ—Ç—Ä–∏–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if not current_set and len(user) > 6 and user[6]:
            current_set = user[6]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–º–µ–Ω–æ–π —Å–µ—Ç–∞
        is_change = current_set and current_set != set_name
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç –≤ –±–¥ –∏ –∫—ç—à–µ
        crud.update_user_chosen_set(chat_id, set_name)
        user_set_selection[chat_id] = set_name
        reset_daily_words_cache(chat_id)
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–º–µ–Ω–∞ —Å–µ—Ç–∞, –æ—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
        if is_change:
            crud.clear_learned_words_for_user(chat_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–±–æ—Ä–µ —Å–µ—Ç–∞
        await callback.message.edit_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω —Å–µ—Ç '{set_name}' –¥–ª—è —É—Ä–æ–≤–Ω—è {user_level}.\n\n"
            f"{'‚ö†Ô∏è –°–ª–æ–≤–∞—Ä—å –æ—á–∏—â–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –±—ã–ª –≤—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π —Å–µ—Ç.' if is_change else ''}",
            parse_mode="Markdown",
            reply_markup=settings_menu_keyboard()
        )
        
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ç–∞.")

async def handle_confirm_set_by_index(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã —Å–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
    chat_id = callback.from_user.id
    try:
        _, set_index = callback.data.split(":", 1)
        set_index = int(set_index)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–µ—Ç–∞ –∏–∑ –∫—ç—à–∞
        if not hasattr(process_my_sets, 'set_cache'):
            process_my_sets.set_cache = {}
        
        set_name = process_my_sets.set_cache.get(f"{chat_id}_{set_index}")
        if not set_name:
            await callback.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç
        current_set = None
        if chat_id in user_set_selection:
            current_set = user_set_selection[chat_id]
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, —Å–º–æ—Ç—Ä–∏–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = crud.get_user(chat_id)
        if not current_set and user and len(user) > 6 and user[6]:
            current_set = user[6]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, —Å–º–µ–Ω–∏—Ç—å", callback_data=f"set_chg_idx:{set_index}"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="set_change_cancel")
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        await callback.message.edit_text(
            f"‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ! –°–º–µ–Ω–∞ —Å–µ—Ç–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ–ª–Ω–æ–º—É —Å–±—Ä–æ—Å—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.*\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å–µ—Ç: *{current_set}*\n"
            f"–ù–æ–≤—ã–π —Å–µ—Ç: *{set_name}*\n\n"
            f"–ü—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∞ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω. –í—ã —É–≤–µ—Ä–µ–Ω—ã?",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–º–µ–Ω—ã —Å–µ—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

async def handle_set_change_confirmed_by_index(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π —Å–º–µ–Ω—ã —Å–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
    chat_id = callback.from_user.id
    try:
        _, set_index = callback.data.split(":", 1)
        set_index = int(set_index)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–µ—Ç–∞ –∏–∑ –∫—ç—à–∞
        if not hasattr(process_my_sets, 'set_cache'):
            process_my_sets.set_cache = {}
        
        set_name = process_my_sets.set_cache.get(f"{chat_id}_{set_index}")
        if not set_name:
            await callback.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        crud.clear_learned_words_for_user(chat_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç
        crud.update_user_chosen_set(chat_id, set_name)
        user_set_selection[chat_id] = set_name
        reset_daily_words_cache(chat_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
        from utils.sticker_helper import get_congratulation_sticker
        sticker_id = get_congratulation_sticker()
        if sticker_id:
            await bot.send_sticker(chat_id, sticker_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Å–º–µ–Ω–µ —Å–µ—Ç–∞
        await callback.message.edit_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω —Å–µ—Ç '{set_name}'.\n‚ö†Ô∏è –°–ª–æ–≤–∞—Ä—å —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.",
            reply_markup=settings_menu_keyboard()
        )
        
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π —Å–º–µ–Ω–µ —Å–µ—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∞.")

# Updated process_choose_set function with both fixes for long messages
# and for automatically clearing the dictionary when changing sets

async def process_choose_set(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∞. –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ç–∞.
    –ü—Ä–∏ –±–æ–ª—å—à–æ–º –æ–±—ä–µ–º–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å —Å–ª–æ–≤.
    –ü—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    chat_id = callback.from_user.id
    try:
        try:
            _, encoded_set_name = callback.data.split(":", 1)
            # URL-decode the set name to get original name with special characters
            set_name = urllib.parse.unquote(encoded_set_name)
        except ValueError as e:
            logger.error(f"Error parsing callback data: {e}, data: {callback.data}")
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
            return

        user = crud.get_user(chat_id)
        if not user:
            await bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            return

        user_level = user[1]
        set_path = os.path.join(LEVELS_DIR, user_level, f"{set_name}.txt")
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É —Å–µ—Ç–∞: {set_path} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞
        if not os.path.exists(set_path):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å –¥—Ä—É–≥–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º
            parent_dir = os.path.dirname(set_path)
            file_name = os.path.basename(set_path)
            
            if os.path.exists(parent_dir):
                try:
                    files = os.listdir(parent_dir)
                    for file in files:
                        if file.lower() == file_name.lower():
                            set_path = os.path.join(parent_dir, file)
                            logger.info(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –¥—Ä—É–≥–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º: {set_path}")
                            break
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–∞ —Å –¥—Ä—É–≥–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º: {e}")
            
            if not os.path.exists(set_path):
                logger.warning(f"Set file not found: {set_path}")
                await bot.send_message(chat_id, f"–°–µ—Ç {set_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É—Ä–æ–≤–Ω—è {user_level}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ç.")
                return
        
        content = ""
        try:
            with open(set_path, "r", encoding="utf-8") as f:
                content = f.read()
        except UnicodeDecodeError:
            logger.warning(f"Unicode decode error in file {set_path}, trying cp1251 encoding")
            try:
                with open(set_path, "r", encoding="cp1251") as f:
                    content = f.read()
            except Exception as e:
                logger.error(f"Failed to read file with alternative encoding: {e}")
                await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞.")
                return
        except Exception as e:
            logger.error(f"Error reading file {set_path}: {e}")
            await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å (–µ—Å–ª–∏ —ç—Ç–æ —Å–º–µ–Ω–∞ —Å–µ—Ç–∞, –∞ –Ω–µ –ø–µ—Ä–≤–∏—á–Ω—ã–π –≤—ã–±–æ—Ä)
        current_set = user_set_selection.get(chat_id, None)
        dictionary_cleared = False
        
        if current_set and current_set != set_name:
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–º–µ–Ω–∞ —Å–µ—Ç–∞ (–∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç–æ–≥–æ –∂–µ —Å–µ—Ç–∞), –æ—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
            try:
                crud.clear_learned_words_for_user(chat_id)
                dictionary_cleared = True
                logger.info(f"Dictionary cleared for user {chat_id} due to set change from '{current_set}' to '{set_name}'")
            except Exception as e:
                logger.error(f"Error clearing dictionary for user {chat_id}: {e}")
        
        # Store the original (non-encoded) set name
        user_set_selection[chat_id] = set_name
        reset_daily_words_cache(chat_id)  # –æ—á–∏—â–∞–µ–º –∫—ç—à '–°–ª–æ–≤–∞ –¥–Ω—è' –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        intro_text = f"–í—ã–±—Ä–∞–Ω —Å–µ—Ç {set_name} –¥–ª—è —É—Ä–æ–≤–Ω—è {user_level}."
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—á–∏—Å—Ç–∫–µ —Å–ª–æ–≤–∞—Ä—è, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞
        if dictionary_cleared:
            intro_text += "\n‚ö†Ô∏è –°–ª–æ–≤–∞—Ä—å –æ—á–∏—â–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –±—ã–ª –≤—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π —Å–µ—Ç."
            
        intro_text += "\n–°–ª–æ–≤–∞ —Å–µ—Ç–∞:\n\n"
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
        lines = content.split('\n')
        
        # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ ~4096 —Å–∏–º–≤–æ–ª–æ–≤
        MAX_MESSAGE_LENGTH = 3800  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –∏–Ω—Ç—Ä–æ –∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
        
        # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å
        if len(intro_text) + len(content) > MAX_MESSAGE_LENGTH:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –º–æ–∂–µ–º –ø–æ–∫–∞–∑–∞—Ç—å
            preview_content = ""
            preview_line_count = 0
            word_count = len(lines)
            
            for line in lines:
                if len(intro_text) + len(preview_content) + len(line) + 100 < MAX_MESSAGE_LENGTH:  # +100 –¥–ª—è –∑–∞–ø–∞—Å–∞
                    preview_content += line + "\n"
                    preview_line_count += 1
                else:
                    break
            
            note = f"\n\n...–∏ –µ—â–µ {word_count - preview_line_count} —Å–ª–æ–≤(–∞). –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ –æ–±—É—á–µ–Ω–∏–∏."
            message_text = intro_text + preview_content + note
        else:
            message_text = intro_text + content

        await bot.send_message(chat_id, message_text, reply_markup=settings_menu_keyboard())
        
    except Exception as e:
        logger.error(f"Unexpected error in process_choose_set for user {chat_id}: {e}")
        await bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ç–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()


async def process_set_level_callback(callback: types.CallbackQuery, bot: Bot):
    chat_id = callback.from_user.id
    try:
        _, level = callback.data.split(":", 1)
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = crud.get_user(chat_id)
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_set = None
    if chat_id in user_set_selection:
        current_set = user_set_selection[chat_id]
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, —Å–º–æ—Ç—Ä–∏–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not current_set and len(user) > 6 and user[6]:
        current_set = user[6]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
    crud.update_user_level(chat_id, level)
    
    # –ï—Å–ª–∏ —Å–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    if not current_set:
        default_set = DEFAULT_SETS.get(level)
        if default_set:
            try:
                crud.update_user_chosen_set(chat_id, default_set)
                user_set_selection[chat_id] = default_set
                current_set = default_set
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∞–∑–æ–≤—ã–π —Å–µ—Ç {default_set} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –ø—Ä–∏ —Å–º–µ–Ω–µ —É—Ä–æ–≤–Ω—è –Ω–∞ {level}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–∞–∑–æ–≤–æ–≥–æ —Å–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–ª–æ–≤
    reset_daily_words_cache(chat_id)
    
    set_info = f"\n–¢–µ–∫—É—â–∏–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤: {current_set}" if current_set else ""
    await bot.send_message(chat_id, f"–£—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {level}.{set_info}", reply_markup=settings_menu_keyboard())
    await callback.answer()

async def process_set_timezone_callback(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç UTC+X –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π IANA –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.
    """
    chat_id = callback.from_user.id
    try:
        _, tz = callback.data.split(":", 1)
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç UTC+ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π IANA —Ñ–æ—Ä–º–∞—Ç
    if tz.startswith("UTC+"):
        try:
            offset = int(tz[4:])
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞, –≥–¥–µ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
            if offset in russian_tzs:
                tz_mapped = russian_tzs[offset]
            else:
                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: UTC+X —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Etc/GMT-X 
                # (–≤ POSIX –∑–Ω–∞–∫ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω)
                tz_mapped = f"Etc/GMT-{offset}"
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            if not is_valid_timezone(tz_mapped):
                logger.warning(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å {tz_mapped} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                tz_mapped = "Europe/Moscow"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        except ValueError:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ {tz} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            tz_mapped = "Europe/Moscow"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
    else:
        tz_mapped = tz
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –ø–æ—è—Å –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
        if not is_valid_timezone(tz_mapped):
            logger.warning(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å {tz_mapped} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            tz_mapped = "Europe/Moscow"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    crud.update_user_timezone(chat_id, tz_mapped)
    reset_daily_words_cache(chat_id)
    await bot.send_message(chat_id, f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {tz}.", reply_markup=notification_settings_menu_keyboard())
    await callback.answer()

async def process_text_setting(message: types.Message):
    chat_id = message.chat.id
    if chat_id not in pending_settings:
        return
    setting_type = pending_settings.pop(chat_id)
    text = message.text.strip()
    if not text.isdigit():
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=notification_settings_menu_keyboard())
        return
    value = int(text)
    if setting_type == "words":
        if not (1 <= value <= 20):
            await message.answer("–û—à–∏–±–∫–∞: —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20.", reply_markup=notification_settings_menu_keyboard())
            return
        crud.update_user_words_per_day(chat_id, value)
        reset_daily_words_cache(chat_id)
        await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {value}.", reply_markup=notification_settings_menu_keyboard())
    elif setting_type == "repetitions":
        if not (1 <= value <= 5):
            await message.answer("–û—à–∏–±–∫–∞: —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5.", reply_markup=notification_settings_menu_keyboard())
            return
        crud.update_user_notifications(chat_id, value)
        reset_daily_words_cache(chat_id)
        await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {value}.", reply_markup=notification_settings_menu_keyboard())

async def process_notification_back(callback: types.CallbackQuery, bot: Bot):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ"""
    await callback.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:", reply_markup=settings_menu_keyboard())
    await callback.answer()

def register_settings_handlers(dp: Dispatcher, bot: Bot):
    """Register all settings handlers"""
    # Basic settings handlers
    dp.register_callback_query_handler(
        partial(show_settings_callback, bot=bot),
        lambda c: c.data == "menu:settings"
    )
    dp.register_callback_query_handler(
        partial(process_notification_back, bot=bot),
        lambda c: c.data == "settings:back"
    )
    dp.register_callback_query_handler(
        partial(process_settings_choice_callback, bot=bot),
        lambda c: c.data and c.data.startswith("settings:") and c.data != "settings:back"
    )
    dp.register_callback_query_handler(
        partial(process_set_level_callback, bot=bot),
        lambda c: c.data and c.data.startswith("set_level:")
    )
    dp.register_callback_query_handler(
        partial(process_set_timezone_callback, bot=bot),
        lambda c: c.data and c.data.startswith("set_timezone:")
    )
    
    # Set change confirmation handlers
    dp.register_callback_query_handler(
        partial(handle_confirm_set_change, bot=bot),
        lambda c: c.data and c.data.startswith("confirm_set_change:")
    )
    dp.register_callback_query_handler(
        partial(handle_set_change_confirmed, bot=bot),
        lambda c: c.data and c.data.startswith("set_change_confirmed:")
    )
    dp.register_callback_query_handler(
        partial(handle_set_change_cancelled, bot=bot),
        lambda c: c.data == "set_change_cancel"
    )
    
    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    dp.register_callback_query_handler(
        partial(handle_set_by_index, bot=bot),
        lambda c: c.data and c.data.startswith("set_idx:")
    )
    dp.register_callback_query_handler(
        partial(handle_confirm_set_by_index, bot=bot),
        lambda c: c.data and c.data.startswith("confirm_idx:")
    )
    dp.register_callback_query_handler(
        partial(handle_set_change_confirmed_by_index, bot=bot),
        lambda c: c.data and c.data.startswith("set_chg_idx:")
    )
    
    # Final choose_set handler (keep last)
    dp.register_callback_query_handler(
        partial(process_choose_set, bot=bot),
        lambda c: c.data and c.data.startswith("choose_set:")
    )
    
    # Text input handler
    dp.register_message_handler(process_text_setting, content_types=['text'])


async def process_settings_mysettings(callback: types.CallbackQuery, bot: Bot):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    chat_id = callback.from_user.id
    user = crud.get_user(chat_id)
    
    if not user:
        await callback.message.edit_text(
            "‚ö†Ô∏è *–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.",
            parse_mode="Markdown",
            reply_markup=types.InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu:back")
            )
        )
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–µ—Ç, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        current_set = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç –≤ –∫—ç—à–µ
        if chat_id in user_set_selection:
            current_set = user_set_selection[chat_id]
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, —Å–º–æ—Ç—Ä–∏–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if not current_set and len(user) > 6 and user[6]:
            current_set = user[6]
        
        # –ï—Å–ª–∏ —Å–µ—Ç –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π
        if not current_set:
            level = user[1]
            default_set = DEFAULT_SETS.get(level)
            if default_set:
                try:
                    crud.update_user_chosen_set(chat_id, default_set)
                    user_set_selection[chat_id] = default_set
                    current_set = default_set
                    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∞–∑–æ–≤—ã–π —Å–µ—Ç {default_set} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–æ—Ñ–∏–ª—è")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–∞–∑–æ–≤–æ–≥–æ —Å–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_settings = {
            "level": user[1],
            "words_per_day": user[2],
            "repetitions": user[3],
            "timezone": user[5] if len(user) > 5 and user[5] else "–ù–µ –∑–∞–¥–∞–Ω",
            "chosen_set": current_set or "–ù–µ –≤—ã–±—Ä–∞–Ω"
        }
        
        # –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        message = "üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
        message += f"üî§ *–£—Ä–æ–≤–µ–Ω—å:* {user_settings['level']}\n"
        message += f"üìä *–°–ª–æ–≤ –≤ –¥–µ–Ω—å:* {user_settings['words_per_day']}\n"
        message += f"üîÑ *–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:* {user_settings['repetitions']}\n"
        message += f"üåê *–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:* {user_settings['timezone']}\n"
        message += f"üìö *–í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä:* {user_settings['chosen_set']}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        try:
            learned_words = crud.get_learned_words(chat_id)
            message += f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n"
            message += f"üìù –í—ã—É—á–µ–Ω–æ —Å–ª–æ–≤: {len(learned_words)}\n"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        await callback.message.edit_text(
            message,
            parse_mode="Markdown",
            reply_markup=settings_menu_keyboard()
        )

async def handle_confirm_set_change(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã —Å–µ—Ç–∞. 
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
    """
    chat_id = callback.from_user.id
    try:
        # Extract encoded set name from callback data
        _, encoded_set_name = callback.data.split(":", 1)
        # URL-decode the set name
        set_name = urllib.parse.unquote(encoded_set_name)
        
        # Get current set name
        current_set = user_set_selection.get(chat_id, "–Ω–µ –≤—ã–±—Ä–∞–Ω")
        
        # Create confirmation keyboard
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, —Å–º–µ–Ω–∏—Ç—å", callback_data=f"set_change_confirmed:{encoded_set_name}"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="set_change_cancel")
        )
        
        # Send confirmation message
        await bot.send_message(
            chat_id,
            f"‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ! –°–º–µ–Ω–∞ —Å–µ—Ç–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ–ª–Ω–æ–º—É —Å–±—Ä–æ—Å—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.*\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å–µ—Ç: *{current_set}*\n"
            f"–ù–æ–≤—ã–π —Å–µ—Ç: *{set_name}*\n\n"
            f"–ü—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∞ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω. –í—ã —É–≤–µ—Ä–µ–Ω—ã?",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error in handle_confirm_set_change: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

async def handle_set_change_confirmed(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã —Å–µ—Ç–∞.
    –û—á–∏—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∞.
    """
    chat_id = callback.from_user.id
    try:
        # Extract the encoded set name
        _, encoded_set_name = callback.data.split(":", 1)
        set_name = urllib.parse.unquote(encoded_set_name)
        
        # Clear user's dictionary
        try:
            crud.clear_learned_words_for_user(chat_id)
            logger.info(f"Dictionary cleared for user {chat_id} due to set change")
        except Exception as e:
            logger.error(f"Error clearing dictionary: {e}")
            await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ª–æ–≤–∞—Ä—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await callback.answer()
            return
        
        # Get user level
        user = crud.get_user(chat_id)
        if not user:
            await bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            await callback.answer()
            return
            
        user_level = user[1]
        set_path = os.path.join(LEVELS_DIR, user_level, f"{set_name}.txt")
        
        if not os.path.exists(set_path):
            logger.warning(f"Set file not found: {set_path}")
            await bot.send_message(chat_id, f"–°–µ—Ç {set_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É—Ä–æ–≤–Ω—è {user_level}.")
            await callback.answer()
            return
        
        # Read file content
        try:
            with open(set_path, "r", encoding="utf-8") as f:
                content = f.read()
        except UnicodeDecodeError:
            try:
                with open(set_path, "r", encoding="cp1251") as f:
                    content = f.read()
            except Exception as e:
                logger.error(f"Error reading file: {e}")
                await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await callback.answer()
                return
        except Exception as e:
            logger.error(f"Error reading file: {e}")
            await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await callback.answer()
            return
        
        # Store the selected set and reset cache
        user_set_selection[chat_id] = set_name
        reset_daily_words_cache(chat_id)
        
        # Store the selected set and reset cache
        user_set_selection[chat_id] = set_name
        reset_daily_words_cache(chat_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –¥–ª—è —Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è
        sticker_id = get_congratulation_sticker()
        if sticker_id:
            await bot.send_sticker(chat_id, sticker_id)

        # Format message with truncation for large sets
        intro_text = f"–í—ã–±—Ä–∞–Ω —Å–µ—Ç {set_name} –¥–ª—è —É—Ä–æ–≤–Ω—è {user_level}.\n‚ö†Ô∏è –°–ª–æ–≤–∞—Ä—å —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.\n–°–ª–æ–≤–∞ —Å–µ—Ç–∞:\n\n"
        
        # Split content into lines
        lines = content.split('\n')
        
        # Max message length for Telegram
        MAX_MESSAGE_LENGTH = 3800
        
        # Check if content is too large
        if len(intro_text) + len(content) > MAX_MESSAGE_LENGTH:
            preview_content = ""
            preview_line_count = 0
            word_count = len(lines)
            
            for line in lines:
                if len(intro_text) + len(preview_content) + len(line) + 100 < MAX_MESSAGE_LENGTH:
                    preview_content += line + "\n"
                    preview_line_count += 1
                else:
                    break
            
            note = f"\n\n...–∏ –µ—â–µ {word_count - preview_line_count} —Å–ª–æ–≤(–∞). –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ –æ–±—É—á–µ–Ω–∏–∏."
            message_text = intro_text + preview_content + note
        else:
            message_text = intro_text + content
        
        # Send the message
        await bot.send_message(chat_id, message_text, reply_markup=settings_menu_keyboard())
        
    except Exception as e:
        logger.error(f"Error in handle_set_change_confirmed: {e}")
        await bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()


async def handle_set_change_cancelled(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–º–µ–Ω—ã —Å–µ—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É —Å–µ—Ç–æ–≤.
    """
    chat_id = callback.from_user.id
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–µ—Ç–æ–≤
    await process_my_sets(callback, bot)
    await callback.answer("–°–º–µ–Ω–∞ —Å–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")