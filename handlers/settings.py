# handlers/settings.py - –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏
from aiogram import types, Dispatcher, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboards.submenus import (
    notification_settings_menu_keyboard, 
    settings_menu_keyboard,
    level_selection_keyboard
)
from keyboards.main_menu import main_menu_keyboard
from database import crud
from functools import partial
from utils.helpers import reset_daily_words_cache, extract_english
import os
import logging
from zoneinfo import ZoneInfo
import sqlite3
from config import DEFAULT_SETS, DB_PATH, LEVELS_DIR
from utils.visual_helpers import format_progress_bar

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞
pending_settings = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
user_set_selection = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –∏–º–µ–Ω —Å–µ—Ç–æ–≤
set_index_cache = {}

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–∏—è UTC —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞/—Ä–µ–≥–∏–æ–Ω–∞
timezones_map = {
    2: "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥",
    3: "–ú–æ—Å–∫–≤–∞",
    4: "–°–∞–º–∞—Ä–∞",
    5: "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
    6: "–û–º—Å–∫",
    7: "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫",
    8: "–ò—Ä–∫—É—Ç—Å–∫",
    9: "–Ø–∫—É—Ç—Å–∫–æ–µ",
    10: "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",
    11: "–ú–∞–≥–∞–¥–∞–Ω—Å–∫–æ–µ",
    12: "–ö–∞–º—á–∞—Ç—Å–∫–æ–µ"
}

# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º IANA –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º
russian_tzs = {
    2: "Europe/Kaliningrad",  # UTC+2
    3: "Europe/Moscow",       # UTC+3
    4: "Europe/Samara",       # UTC+4
    5: "Asia/Yekaterinburg",  # UTC+5
    6: "Asia/Omsk",           # UTC+6
    7: "Asia/Krasnoyarsk",    # UTC+7
    8: "Asia/Irkutsk",        # UTC+8
    9: "Asia/Yakutsk",        # UTC+9
    10: "Asia/Vladivostok",   # UTC+10
    11: "Asia/Magadan",       # UTC+11
    12: "Asia/Kamchatka"      # UTC+12
}

settings_input_state = {}

async def process_settings_input(message: types.Message, bot: Bot):
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    chat_id = message.chat.id
    text = message.text.strip()
    
    # –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: '{text}'")
    logger.info(f"–¢–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞: {pending_settings}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ–≤–æ–π –≤–≤–æ–¥
    if not text.isdigit():
        if chat_id in pending_settings:
            await message.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
                reply_markup=notification_settings_menu_keyboard()
            )
            return True
        return False
    
    # –ß–∏—Å–ª–æ–≤–æ–π –≤–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –æ–Ω
    if chat_id not in pending_settings:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞")
        return False
    
    value = int(text)
    setting_type = pending_settings[chat_id]
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {setting_type}: {value}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
    if setting_type == "words":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if not (1 <= value <= 20):
            await message.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20.",
                reply_markup=notification_settings_menu_keyboard()
            )
            return True
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è "–¥–æ" –∏ "–ø–æ—Å–ª–µ"
            user_before = crud.get_user(chat_id)
            current_words_before = user_before[2] if user_before else 5
            
            # –ù–∞–ø—Ä—è–º—É—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ db_manager
            with db_manager.transaction() as conn:
                conn.execute(
                    "UPDATE users SET words_per_day = ? WHERE chat_id = ?",
                    (value, chat_id)
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ–∏–∑–æ—à–ª–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            user_after = crud.get_user(chat_id)
            current_words_after = user_after[2] if user_after else current_words_before
            
            # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ crud
            if current_words_after == current_words_before:
                logger.warning(f"–ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ crud")
                crud.update_user_words_per_day(chat_id, value)
                user_after = crud.get_user(chat_id)
                current_words_after = user_after[2] if user_after else current_words_before
            
            logger.info(f"–ó–Ω–∞—á–µ–Ω–∏–µ words_per_day –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {current_words_before} -> {current_words_after}")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            reset_daily_words_cache(chat_id)
            del pending_settings[chat_id]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            current_repetitions = user_after[3] if user_after else 3
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await message.answer(
                f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å: *{current_words_after}*\n"
                f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: *{current_repetitions}*",
                parse_mode="Markdown",
                reply_markup=notification_settings_menu_keyboard()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                reply_markup=notification_settings_menu_keyboard()
            )
        
        return True
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    elif setting_type == "repetitions":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if not (1 <= value <= 5):
            await message.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5.",
                reply_markup=notification_settings_menu_keyboard()
            )
            return True
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è "–¥–æ" –∏ "–ø–æ—Å–ª–µ"
            user_before = crud.get_user(chat_id)
            current_repetitions_before = user_before[3] if user_before else 3
            
            # –ù–∞–ø—Ä—è–º—É—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ db_manager
            with db_manager.transaction() as conn:
                conn.execute(
                    "UPDATE users SET notifications = ? WHERE chat_id = ?",
                    (value, chat_id)
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ–∏–∑–æ—à–ª–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            user_after = crud.get_user(chat_id)
            current_repetitions_after = user_after[3] if user_after else current_repetitions_before
            
            # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ crud
            if current_repetitions_after == current_repetitions_before:
                logger.warning(f"–ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ crud")
                crud.update_user_notifications(chat_id, value)
                user_after = crud.get_user(chat_id)
                current_repetitions_after = user_after[3] if user_after else current_repetitions_before
            
            logger.info(f"–ó–Ω–∞—á–µ–Ω–∏–µ notifications –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {current_repetitions_before} -> {current_repetitions_after}")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            reset_daily_words_cache(chat_id)
            del pending_settings[chat_id]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            current_words = user_after[2] if user_after else 5
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await message.answer(
                f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å: *{current_words}*\n"
                f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: *{current_repetitions_after}*",
                parse_mode="Markdown",
                reply_markup=notification_settings_menu_keyboard()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                reply_markup=notification_settings_menu_keyboard()
            )
        
        return True
    
    return False

async def update_word_and_repetition_settings(chat_id, words_per_day, repetitions_per_word):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        crud.update_user_words_and_repetitions(chat_id, words_per_day, repetitions_per_word)
        logger.info(f"User {chat_id}: updated words per day to {words_per_day} and repetitions to {repetitions_per_word}")
    except Exception as e:
        logger.error(f"Error updating user {chat_id} settings: {e}")

def is_valid_timezone(tz_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞."""
    try:
        ZoneInfo(tz_name)
        return True
    except Exception:
        return False

async def show_settings_callback(callback: types.CallbackQuery, bot: Bot):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ"""
    await callback.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:", reply_markup=settings_menu_keyboard())
    await callback.answer()

async def process_settings_choice_callback(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.
    """
    chat_id = callback.from_user.id
    try:
        data_parts = callback.data.split(":", 1)
        if len(data_parts) != 2:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
            return
        
        _, option = data_parts
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    if option == "level":
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
        await callback.message.edit_text(
            "üî§ *–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:*\n\n"
            "üü¢ *A1-A2* - –ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å\n"
            "üü° *B1-B2* - –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å\n"
            "üî¥ *C1-C2* - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å", 
            parse_mode="Markdown",
            reply_markup=level_selection_keyboard()
        )

    elif option == "notifications":
        await callback.message.edit_text(
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, "
            "–∞ —Ç–∞–∫–∂–µ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.",
            parse_mode="Markdown",
            reply_markup=notification_settings_menu_keyboard()
        )

    # –í —Ñ—É–Ω–∫—Ü–∏–∏ process_settings_choice_callback –∑–∞–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É options "words" –∏ "repetitions":

    elif option == "words":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user = crud.get_user(chat_id)
        current_words = user[2] if user else 5
        current_repetitions = user[3] if user else 3
        
        await callback.message.edit_text(
            f"üìä *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å*\n\n"
            f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: *{current_words}*\n"
            f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: *{current_repetitions}*\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ. "
            f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç 5 –¥–æ 15 —Å–ª–æ–≤ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.",
            parse_mode="Markdown",
            reply_markup=words_count_keyboard()
        )

    elif option == "repetitions":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user = crud.get_user(chat_id)
        current_words = user[2] if user else 5
        current_repetitions = user[3] if user else 3
        
        await callback.message.edit_text(
            f"üîÑ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π*\n\n"
            f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: *{current_words}*\n"
            f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: *{current_repetitions}*\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è. "
            f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –ª—É—á—à–µ –∑–∞–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–∞.",
            parse_mode="Markdown",
            reply_markup=repetitions_count_keyboard()
        )

    elif option == "timezone":
        keyboard = InlineKeyboardMarkup(row_width=2)
        
        for offset in range(2, 13):
            city_name = timezones_map.get(offset, "")
            tz_label = f"UTC+{offset} {city_name}"
            callback_data = f"set_timezone:UTC+{offset}"
            
            keyboard.insert(InlineKeyboardButton(tz_label, callback_data=callback_data))
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings:back"))
        
        await callback.message.edit_text(
            "üåê *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å*\n\n"
            "–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è.",
            parse_mode="Markdown",
            reply_markup=keyboard
        )

    elif option == "set":
        await process_my_sets(callback, bot)

    elif option == "mysettings":
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await process_settings_mysettings(callback, bot)

    await callback.answer()

def words_count_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç 1 –¥–æ 20 –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤."""
    keyboard = InlineKeyboardMarkup(row_width=5)
    
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: 1-5
    row1 = [InlineKeyboardButton(str(i), callback_data=f"set_words:{i}") for i in range(1, 6)]
    keyboard.row(*row1)
    
    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: 6-10
    row2 = [InlineKeyboardButton(str(i), callback_data=f"set_words:{i}") for i in range(6, 11)]
    keyboard.row(*row2)
    
    # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞: 11-15
    row3 = [InlineKeyboardButton(str(i), callback_data=f"set_words:{i}") for i in range(11, 16)]
    keyboard.row(*row3)
    
    # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞: 16-20
    row4 = [InlineKeyboardButton(str(i), callback_data=f"set_words:{i}") for i in range(16, 21)]
    keyboard.row(*row4)
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard.row(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings:notifications"))
    
    return keyboard

def repetitions_count_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç 1 –¥–æ 5 –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π."""
    keyboard = InlineKeyboardMarkup(row_width=5)
    
    # –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ 1-5
    buttons = [InlineKeyboardButton(str(i), callback_data=f"set_repetitions:{i}") for i in range(1, 6)]
    keyboard.row(*buttons)
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard.row(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings:notifications"))
    
    return keyboard

async def handle_set_words_count(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å."""
    chat_id = callback.from_user.id
    try:
        _, count_str = callback.data.split(":", 1)
        count = int(count_str)
        
        if not (1 <= count <= 20):
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            user_before = crud.get_user(chat_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
            crud.update_user_words_per_day(chat_id, count)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à
            reset_daily_words_cache(chat_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            user_after = crud.get_user(chat_id)
            current_words = user_after[2] if user_after else count
            current_repetitions = user_after[3] if user_after else 3
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await callback.message.edit_text(
                f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å: *{current_words}*\n"
                f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: *{current_repetitions}*",
                parse_mode="Markdown",
                reply_markup=notification_settings_menu_keyboard()
            )
            
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {count}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤: {e}")
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                reply_markup=notification_settings_menu_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

async def handle_set_repetitions_count(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π."""
    chat_id = callback.from_user.id
    try:
        _, count_str = callback.data.split(":", 1)
        count = int(count_str)
        
        if not (1 <= count <= 5):
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            user_before = crud.get_user(chat_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            crud.update_user_notifications(chat_id, count)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à
            reset_daily_words_cache(chat_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            user_after = crud.get_user(chat_id)
            current_words = user_after[2] if user_after else 5
            current_repetitions = user_after[3] if user_after else count
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await callback.message.edit_text(
                f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å: *{current_words}*\n"
                f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: *{current_repetitions}*",
                parse_mode="Markdown",
                reply_markup=notification_settings_menu_keyboard()
            )
            
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {count}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {e}")
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                reply_markup=notification_settings_menu_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

async def process_my_sets(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ —Å–µ—Ç—ã". –°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    chat_id = callback.from_user.id
    try:
        user = crud.get_user(chat_id)
        if not user:
            await bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            return
            
        user_level = user[1]
        level_dir = os.path.join(LEVELS_DIR, user_level)
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}, —É—Ä–æ–≤–µ–Ω—å {user_level}, –ø—É—Ç—å: {level_dir}")
        
        if not os.path.exists(level_dir):
            logger.warning(f"Level directory not found: {level_dir}")
            await bot.send_message(chat_id, f"–ü–∞–ø–∫–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è {user_level} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
            
        try:
            set_files = [f for f in os.listdir(level_dir) if f.endswith(".txt")]
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(set_files)} —Ñ–∞–π–ª–æ–≤ —Å–µ—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {level_dir}")
        except PermissionError:
            logger.error(f"Permission denied when accessing directory: {level_dir}")
            await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ —É—Ä–æ–≤–Ω—è {user_level}.")
            return
        except Exception as e:
            logger.error(f"Error listing directory {level_dir}: {e}")
            await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ —É—Ä–æ–≤–Ω—è {user_level}.")
            return
            
        if not set_files:
            await bot.send_message(chat_id, f"–í –ø–∞–ø–∫–µ {user_level} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ç–æ–≤.")
            return

        # Get current set and learned words
        current_set = user_set_selection.get(chat_id, None)
        
        # –ï—Å–ª–∏ –Ω–µ –≤ –∫—ç—à–µ, —Å–º–æ—Ç—Ä–∏–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if not current_set and len(user) > 6 and user[6]:
            current_set = user[6]
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
            user_set_selection[chat_id] = current_set
        
        # Prepare message with current set info
        message_text = f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ç—ã –¥–ª—è —É—Ä–æ–≤–Ω—è {user_level}:"
        if current_set:
            message_text = f"–¢–µ–∫—É—â–∏–π —Å–µ—Ç: *{current_set}*\n\n" + message_text
        
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        global set_index_cache
        for key in list(set_index_cache.keys()):
            if key.startswith(f"{chat_id}_"):
                del set_index_cache[key]
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É callback_data, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ Button_data_invalid
        for idx, filename in enumerate(set_files):
            set_name = os.path.splitext(filename)[0]
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏ —Å–µ—Ç–∞ –≤ callback_data –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏
            set_index = idx + 1  # –ù–∞—á–∏–Ω–∞–µ–º —Å 1
            
            # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∞, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å–µ—Ç –∑–∞–¥–∞–Ω
            callback_data = f"confirm_idx:{set_index}" if current_set and current_set != set_name else f"set_idx:{set_index}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Å–µ—Ç–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π cache –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å—É
            set_index_cache[f"{chat_id}_{set_index}"] = set_name
            
            keyboard.add(types.InlineKeyboardButton(set_name, callback_data=callback_data))
        
        keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu:settings"))
        
        await bot.send_message(chat_id, message_text, parse_mode="Markdown", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ process_my_sets –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

async def handle_set_by_index(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
    chat_id = callback.from_user.id
    try:
        _, set_index = callback.data.split(":", 1)
        set_index = int(set_index)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–µ—Ç–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
        global set_index_cache
        set_name = set_index_cache.get(f"{chat_id}_{set_index}")
        if not set_name:
            await callback.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —É—Ä–æ–≤–µ–Ω—å
        user = crud.get_user(chat_id)
        if not user:
            await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            return
        
        user_level = user[1]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç
        current_set = None
        if chat_id in user_set_selection:
            current_set = user_set_selection[chat_id]
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, —Å–º–æ—Ç—Ä–∏–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if not current_set and len(user) > 6 and user[6]:
            current_set = user[6]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–º–µ–Ω–æ–π —Å–µ—Ç–∞
        is_change = current_set and current_set != set_name
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–º–µ–Ω–∞ —Å–µ—Ç–∞ - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if is_change:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await handle_confirm_set_by_index(callback, bot)
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä —Å–µ—Ç–∞, –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
            crud.update_user_chosen_set(chat_id, set_name)
            user_set_selection[chat_id] = set_name
            reset_daily_words_cache(chat_id)
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            set_path = os.path.join(LEVELS_DIR, user_level, f"{set_name}.txt")
            content = ""
            try:
                with open(set_path, "r", encoding="utf-8") as f:
                    content = f.read()
            except UnicodeDecodeError:
                try:
                    with open(set_path, "r", encoding="cp1251") as f:
                        content = f.read()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π: {e}")
                    content = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–µ—Ç–∞."
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞: {e}")
                content = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–µ—Ç–∞."
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Å–µ—Ç–∞
            intro_text = f"‚úÖ –í—ã–±—Ä–∞–Ω —Å–µ—Ç '{set_name}' –¥–ª—è —É—Ä–æ–≤–Ω—è {user_level}.\n–°–ª–æ–≤–∞ —Å–µ—Ç–∞:\n\n"
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            MAX_MESSAGE_LENGTH = 3800
            if len(intro_text) + len(content) > MAX_MESSAGE_LENGTH:
                lines = content.split('\n')
                preview_content = ""
                preview_line_count = 0
                word_count = len(lines)
                
                for line in lines:
                    if len(intro_text) + len(preview_content) + len(line) + 100 < MAX_MESSAGE_LENGTH:
                        preview_content += line + "\n"
                        preview_line_count += 1
                    else:
                        break
                
                note = f"\n\n...–∏ –µ—â–µ {word_count - preview_line_count} —Å–ª–æ–≤(–∞). –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ –æ–±—É—á–µ–Ω–∏–∏."
                message_text = intro_text + preview_content + note
            else:
                message_text = intro_text + content
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ—Ç–µ
            await callback.message.edit_text(
                message_text,
                parse_mode="Markdown",
                reply_markup=settings_menu_keyboard()
            )
        
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ç–∞.")

async def handle_confirm_set_by_index(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã —Å–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
    chat_id = callback.from_user.id
    try:
        _, set_index = callback.data.split(":", 1)
        set_index = int(set_index)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–µ—Ç–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
        global set_index_cache
        set_name = set_index_cache.get(f"{chat_id}_{set_index}")
        if not set_name:
            await callback.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç
        current_set = None
        if chat_id in user_set_selection:
            current_set = user_set_selection[chat_id]
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, —Å–º–æ—Ç—Ä–∏–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = crud.get_user(chat_id)
        if not current_set and user and len(user) > 6 and user[6]:
            current_set = user[6]
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ç–∞
        user_level = user[1]
        set_path = os.path.join(LEVELS_DIR, user_level, f"{set_name}.txt")
        content = ""
        
        try:
            with open(set_path, "r", encoding="utf-8") as f:
                content = f.read()
        except UnicodeDecodeError:
            try:
                with open(set_path, "r", encoding="cp1251") as f:
                    content = f.read()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π: {e}")
                content = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–µ—Ç–∞."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞: {e}")
            content = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–µ—Ç–∞."
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–µ—Ç–∞
        intro_text = f"‚ÑπÔ∏è *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Ç–∞ '{set_name}'*\n\n"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        MAX_PREVIEW_LENGTH = 1500
        
        if len(content) > MAX_PREVIEW_LENGTH:
            lines = content.split('\n')
            preview_content = ""
            preview_line_count = 0
            word_count = len(lines)
            
            for line in lines:
                if len(preview_content) + len(line) < MAX_PREVIEW_LENGTH:
                    preview_content += line + "\n"
                    preview_line_count += 1
                else:
                    break
                    
            preview_text = preview_content + f"\n...–∏ –µ—â–µ {word_count - preview_line_count} —Å–ª–æ–≤(–∞)."
        else:
            preview_text = content
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, —Å–º–µ–Ω–∏—Ç—å", callback_data=f"set_chg_idx:{set_index}"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="set_change_cancel")
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º —Å–µ—Ç–∞
        message = (
            f"‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ! –°–º–µ–Ω–∞ —Å–µ—Ç–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ–ª–Ω–æ–º—É —Å–±—Ä–æ—Å—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.*\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å–µ—Ç: *{current_set}*\n"
            f"–ù–æ–≤—ã–π —Å–µ—Ç: *{set_name}*\n\n"
            f"–ü—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∞ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω. –í—ã —É–≤–µ—Ä–µ–Ω—ã?\n\n"
            f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ç–∞:\n\n{preview_text}"
        )
        
        await callback.message.edit_text(
            message,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–º–µ–Ω—ã —Å–µ—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

async def handle_set_change_confirmed_by_index(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã —Å–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É.
    """
    chat_id = callback.from_user.id
    try:
        _, set_index = callback.data.split(":", 1)
        set_index = int(set_index)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–µ—Ç–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
        global set_index_cache
        set_name = set_index_cache.get(f"{chat_id}_{set_index}")
        if not set_name:
            await callback.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            crud.clear_learned_words_for_user(chat_id)
            logger.info(f"Dictionary cleared for user {chat_id} due to set change by index")
        except Exception as e:
            logger.error(f"Error clearing dictionary: {e}")
            await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ª–æ–≤–∞—Ä—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = crud.get_user(chat_id)
        if not user:
            await bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            await callback.answer()
            return
            
        user_level = user[1]
        set_path = os.path.join(LEVELS_DIR, user_level, f"{set_name}.txt")
        
        if not os.path.exists(set_path):
            logger.warning(f"Set file not found: {set_path}")
            await bot.send_message(chat_id, f"–°–µ—Ç {set_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É—Ä–æ–≤–Ω—è {user_level}.")
            await callback.answer()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç
        crud.update_user_chosen_set(chat_id, set_name)
        user_set_selection[chat_id] = set_name
        reset_daily_words_cache(chat_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
        sticker_id = get_congratulation_sticker()
        if sticker_id:
            await bot.send_sticker(chat_id, sticker_id)
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ—Ç–∞
        content = ""
        try:
            with open(set_path, "r", encoding="utf-8") as f:
                content = f.read()
        except UnicodeDecodeError:
            try:
                with open(set_path, "r", encoding="cp1251") as f:
                    content = f.read()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π: {e}")
                content = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–µ—Ç–∞."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞: {e}")
            content = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–µ—Ç–∞."
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram
        intro_text = f"‚úÖ –í—ã–±—Ä–∞–Ω —Å–µ—Ç '{set_name}' –¥–ª—è —É—Ä–æ–≤–Ω—è {user_level}.\n‚ö†Ô∏è –°–ª–æ–≤–∞—Ä—å —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.\n–°–ª–æ–≤–∞ —Å–µ—Ç–∞:\n\n"
        
        # Split content into lines
        lines = content.split('\n')
        
        # Max message length for Telegram
        MAX_MESSAGE_LENGTH = 3800
        
        # Check if content is too large
        if len(intro_text) + len(content) > MAX_MESSAGE_LENGTH:
            preview_content = ""
            preview_line_count = 0
            word_count = len(lines)
            
            for line in lines:
                if len(intro_text) + len(preview_content) + len(line) + 100 < MAX_MESSAGE_LENGTH:
                    preview_content += line + "\n"
                    preview_line_count += 1
                else:
                    break
            
            note = f"\n\n...–∏ –µ—â–µ {word_count - preview_line_count} —Å–ª–æ–≤(–∞). –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ –æ–±—É—á–µ–Ω–∏–∏."
            message_text = intro_text + preview_content + note
        else:
            message_text = intro_text + content
        
        # Send the message
        await bot.send_message(chat_id, message_text, reply_markup=settings_menu_keyboard())
        
    except Exception as e:
        logger.error(f"Error in handle_set_change_confirmed_by_index: {e}")
        await bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

async def process_choose_set(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∞. –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ç–∞.
    –ü—Ä–∏ –±–æ–ª—å—à–æ–º –æ–±—ä–µ–º–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å —Å–ª–æ–≤.
    –ü—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    chat_id = callback.from_user.id
    try:
        try:
            _, encoded_set_name = callback.data.split(":", 1)
            # URL-decode the set name to get original name with special characters
            set_name = urllib.parse.unquote(encoded_set_name)
        except ValueError as e:
            logger.error(f"Error parsing callback data: {e}, data: {callback.data}")
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
            return

        user = crud.get_user(chat_id)
        if not user:
            await bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            return

        user_level = user[1]
        set_path = os.path.join(LEVELS_DIR, user_level, f"{set_name}.txt")
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É —Å–µ—Ç–∞: {set_path} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞
        if not os.path.exists(set_path):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å –¥—Ä—É–≥–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º
            parent_dir = os.path.dirname(set_path)
            file_name = os.path.basename(set_path)
            
            if os.path.exists(parent_dir):
                try:
                    files = os.listdir(parent_dir)
                    for file in files:
                        if file.lower() == file_name.lower():
                            set_path = os.path.join(parent_dir, file)
                            logger.info(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –¥—Ä—É–≥–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º: {set_path}")
                            break
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–∞ —Å –¥—Ä—É–≥–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º: {e}")
            
            if not os.path.exists(set_path):
                logger.warning(f"Set file not found: {set_path}")
                await bot.send_message(chat_id, f"–°–µ—Ç {set_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É—Ä–æ–≤–Ω—è {user_level}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ç.")
                return
        
        content = ""
        try:
            with open(set_path, "r", encoding="utf-8") as f:
                content = f.read()
        except UnicodeDecodeError:
            logger.warning(f"Unicode decode error in file {set_path}, trying cp1251 encoding")
            try:
                with open(set_path, "r", encoding="cp1251") as f:
                    content = f.read()
            except Exception as e:
                logger.error(f"Failed to read file with alternative encoding: {e}")
                await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞.")
                return
        except Exception as e:
            logger.error(f"Error reading file {set_path}: {e}")
            await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å (–µ—Å–ª–∏ —ç—Ç–æ —Å–º–µ–Ω–∞ —Å–µ—Ç–∞, –∞ –Ω–µ –ø–µ—Ä–≤–∏—á–Ω—ã–π –≤—ã–±–æ—Ä)
        current_set = user_set_selection.get(chat_id, None)
        dictionary_cleared = False
        
        if current_set and current_set != set_name:
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–º–µ–Ω–∞ —Å–µ—Ç–∞ (–∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç–æ–≥–æ –∂–µ —Å–µ—Ç–∞), –æ—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
            try:
                crud.clear_learned_words_for_user(chat_id)
                dictionary_cleared = True
                logger.info(f"Dictionary cleared for user {chat_id} due to set change from '{current_set}' to '{set_name}'")
            except Exception as e:
                logger.error(f"Error clearing dictionary for user {chat_id}: {e}")
        
        # Store the original (non-encoded) set name
        user_set_selection[chat_id] = set_name
        reset_daily_words_cache(chat_id)  # –æ—á–∏—â–∞–µ–º –∫—ç—à '–°–ª–æ–≤–∞ –¥–Ω—è' –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        intro_text = f"–í—ã–±—Ä–∞–Ω —Å–µ—Ç {set_name} –¥–ª—è —É—Ä–æ–≤–Ω—è {user_level}."
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—á–∏—Å—Ç–∫–µ —Å–ª–æ–≤–∞—Ä—è, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞
        if dictionary_cleared:
            intro_text += "\n‚ö†Ô∏è –°–ª–æ–≤–∞—Ä—å –æ—á–∏—â–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –±—ã–ª –≤—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π —Å–µ—Ç."
            
        intro_text += "\n–°–ª–æ–≤–∞ —Å–µ—Ç–∞:\n\n"
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
        lines = content.split('\n')
        
        # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ ~4096 —Å–∏–º–≤–æ–ª–æ–≤
        MAX_MESSAGE_LENGTH = 3800  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –∏–Ω—Ç—Ä–æ –∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
        
        # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å
        if len(intro_text) + len(content) > MAX_MESSAGE_LENGTH:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –º–æ–∂–µ–º –ø–æ–∫–∞–∑–∞—Ç—å
            preview_content = ""
            preview_line_count = 0
            word_count = len(lines)
            
            for line in lines:
                if len(intro_text) + len(preview_content) + len(line) + 100 < MAX_MESSAGE_LENGTH:  # +100 –¥–ª—è –∑–∞–ø–∞—Å–∞
                    preview_content += line + "\n"
                    preview_line_count += 1
                else:
                    break
            
            note = f"\n\n...–∏ –µ—â–µ {word_count - preview_line_count} —Å–ª–æ–≤(–∞). –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ –æ–±—É—á–µ–Ω–∏–∏."
            message_text = intro_text + preview_content + note
        else:
            message_text = intro_text + content

        await bot.send_message(chat_id, message_text, reply_markup=settings_menu_keyboard())
        
    except Exception as e:
        logger.error(f"Unexpected error in process_choose_set for user {chat_id}: {e}")
        await bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ç–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

async def process_set_level_callback(callback: types.CallbackQuery, bot: Bot):
    chat_id = callback.from_user.id
    try:
        _, level = callback.data.split(":", 1)
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = crud.get_user(chat_id)
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    current_level = user[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_set = None
    if chat_id in user_set_selection:
        current_set = user_set_selection[chat_id]
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, —Å–º–æ—Ç—Ä–∏–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not current_set and len(user) > 6 and user[6]:
        current_set = user[6]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    crud.update_user_level(chat_id, level)
    
    # –í–∞–∂–Ω–æ: –º—ã –ù–ï –º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç –ø—Ä–∏ —Å–º–µ–Ω–µ —É—Ä–æ–≤–Ω—è
    # –°–µ—Ç –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω–æ–º –≤—ã–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Ä–∞–∑–¥–µ–ª–µ "–í—ã–±–æ—Ä —Å–µ—Ç–∞"
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    reset_daily_words_cache(chat_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if current_level != level:
        message = f"–£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–µ–Ω —Å {current_level} –Ω–∞ {level}."
        if current_set:
            message += f"\n–¢–µ–∫—É—â–∏–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤: {current_set}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å–µ—Ç–∞ –≤ –Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
            set_file_path = os.path.join(LEVELS_DIR, level, f"{current_set}.txt")
            set_exists = os.path.exists(set_file_path)
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not set_exists:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ä–∞–∑–ª–∏—á–∏—è –≤ —Ä–µ–≥–∏—Å—Ç—Ä–µ
                try:
                    level_dir = os.path.join(LEVELS_DIR, level)
                    if os.path.exists(level_dir):
                        for file in os.listdir(level_dir):
                            if file.lower() == f"{current_set}.txt".lower():
                                set_exists = True
                                break
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞: {e}")
                
                if not set_exists:
                    message += f"\n\n‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä '{current_set}' –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É—Ä–æ–≤–Ω—è {level}. –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–∞–º. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –Ω–∞–±–æ—Ä –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–í—ã–±–æ—Ä —Å–µ—Ç–∞'."
    else:
        message = f"–£—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {level}."
        if current_set:
            message += f"\n–¢–µ–∫—É—â–∏–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤: {current_set}"
    
    await bot.send_message(chat_id, message, reply_markup=settings_menu_keyboard())
    await callback.answer()

async def process_set_timezone_callback(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç UTC+X –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π IANA –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.
    """
    chat_id = callback.from_user.id
    try:
        _, tz = callback.data.split(":", 1)
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç UTC+ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π IANA —Ñ–æ—Ä–º–∞—Ç
    if tz.startswith("UTC+"):
        try:
            offset = int(tz[4:])
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞, –≥–¥–µ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
            if offset in russian_tzs:
                tz_mapped = russian_tzs[offset]
            else:
                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: UTC+X —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Etc/GMT-X 
                # (–≤ POSIX –∑–Ω–∞–∫ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω)
                tz_mapped = f"Etc/GMT-{offset}"
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            if not is_valid_timezone(tz_mapped):
                logger.warning(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å {tz_mapped} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                tz_mapped = "Europe/Moscow"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        except ValueError:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ {tz} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            tz_mapped = "Europe/Moscow"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
    else:
        tz_mapped = tz
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –ø–æ—è—Å –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
        if not is_valid_timezone(tz_mapped):
            logger.warning(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å {tz_mapped} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            tz_mapped = "Europe/Moscow"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    crud.update_user_timezone(chat_id, tz_mapped)
    reset_daily_words_cache(chat_id)
    await bot.send_message(chat_id, f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {tz}.", reply_markup=settings_menu_keyboard())
    await callback.answer()

async def process_text_setting(message: types.Message, bot: Bot = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —á–∏—Å–ª–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Å–ª–æ–≤ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)"""
    chat_id = message.chat.id
    text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    if chat_id not in pending_settings:
        # –ù–µ –Ω–∞—à —Å–ª—É—á–∞–π, –ø–æ–∑–≤–æ–ª—è–µ–º –¥—Ä—É–≥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        return False
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: '{text}', —Ä–µ–∂–∏–º: {pending_settings[chat_id]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not text.isdigit():
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=notification_settings_menu_keyboard()
        )
        return True
    
    value = int(text)
    setting_type = pending_settings[chat_id]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
    if setting_type == "words":
        if not (1 <= value <= 20):
            await message.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20.",
                reply_markup=notification_settings_menu_keyboard()
            )
            return True
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            before_update = crud.get_user(chat_id)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            crud.update_user_words_per_day(chat_id, value)
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {value}")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à
            from utils.helpers import reset_daily_words_cache
            reset_daily_words_cache(chat_id)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è –æ–∂–∏–¥–∞–Ω–∏—è
            del pending_settings[chat_id]
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            after_update = crud.get_user(chat_id)
            current_words = after_update[2] if after_update else value
            current_repetitions = after_update[3] if after_update else 3
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            await message.answer(
                f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å: *{current_words}*\n"
                f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: *{current_repetitions}*",
                parse_mode="Markdown",
                reply_markup=notification_settings_menu_keyboard()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                reply_markup=notification_settings_menu_keyboard()
            )
        
        return True
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    elif setting_type == "repetitions":
        if not (1 <= value <= 5):
            await message.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5.",
                reply_markup=notification_settings_menu_keyboard()
            )
            return True
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            before_update = crud.get_user(chat_id)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            crud.update_user_notifications(chat_id, value)
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {value}")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à
            from utils.helpers import reset_daily_words_cache
            reset_daily_words_cache(chat_id)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è –æ–∂–∏–¥–∞–Ω–∏—è
            del pending_settings[chat_id]
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            after_update = crud.get_user(chat_id)
            current_words = after_update[2] if after_update else 5
            current_repetitions = after_update[3] if after_update else value
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            await message.answer(
                f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å: *{current_words}*\n"
                f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: *{current_repetitions}*",
                parse_mode="Markdown",
                reply_markup=notification_settings_menu_keyboard()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                reply_markup=notification_settings_menu_keyboard()
            )
        
        return True
    
    return False  # –µ—Å–ª–∏ —Ç–∏–ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω

async def process_notification_back(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await callback.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:", reply_markup=settings_menu_keyboard())
    await callback.answer()

def register_settings_handlers(dp: Dispatcher, bot: Bot):
    """Register all settings handlers"""
    # –í–ê–ñ–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ü–ï–†–í–´–ú
    # —Å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–º —É—Å–ª–æ–≤–∏–µ–º –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    dp.register_message_handler(
        partial(process_settings_input, bot=bot),
        lambda message: bool(message.text) and message.chat.id in pending_settings,
        state="*",
        content_types=['text']
    )
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    dp.register_callback_query_handler(
        partial(handle_set_words_count, bot=bot),
        lambda c: c.data and c.data.startswith("set_words:")
    )
    
    dp.register_callback_query_handler(
        partial(handle_set_repetitions_count, bot=bot),
        lambda c: c.data and c.data.startswith("set_repetitions:")
    )
    # Basic settings handlers
    dp.register_callback_query_handler(
        partial(show_settings_callback, bot=bot),
        lambda c: c.data == "menu:settings"
    )
    dp.register_callback_query_handler(
        partial(process_notification_back, bot=bot),
        lambda c: c.data == "settings:back" or c.data == "notifications:back"
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∏—Ö –ø–æ–¥–º–µ–Ω—é
    dp.register_callback_query_handler(
        partial(process_settings_choice_callback, bot=bot),
        lambda c: c.data and c.data.startswith("settings:") and c.data != "settings:back"
    )
    
    dp.register_callback_query_handler(
        partial(process_set_level_callback, bot=bot),
        lambda c: c.data and c.data.startswith("set_level:")
    )
    dp.register_callback_query_handler(
        partial(process_set_timezone_callback, bot=bot),
        lambda c: c.data and c.data.startswith("set_timezone:")
    )
    
    # Set change confirmation handlers
    dp.register_callback_query_handler(
        partial(handle_confirm_set_change, bot=bot),
        lambda c: c.data and c.data.startswith("confirm_set_change:")
    )
    dp.register_callback_query_handler(
        partial(handle_set_change_confirmed, bot=bot),
        lambda c: c.data and c.data.startswith("set_change_confirmed:")
    )
    dp.register_callback_query_handler(
        partial(handle_set_change_cancelled, bot=bot),
        lambda c: c.data == "set_change_cancel"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    dp.register_callback_query_handler(
        partial(handle_set_by_index, bot=bot),
        lambda c: c.data and c.data.startswith("set_idx:")
    )
    dp.register_callback_query_handler(
        partial(handle_confirm_set_by_index, bot=bot),
        lambda c: c.data and c.data.startswith("confirm_idx:")
    )
    dp.register_callback_query_handler(
        partial(handle_set_change_confirmed_by_index, bot=bot),
        lambda c: c.data and c.data.startswith("set_chg_idx:")
    )
    
    # Final choose_set handler (keep last)
    dp.register_callback_query_handler(
        partial(process_choose_set, bot=bot),
        lambda c: c.data and c.data.startswith("choose_set:")
    )

async def process_settings_mysettings(callback: types.CallbackQuery, bot: Bot):
    """
    Displays user settings with improved formatting and statistics.
    Handles edge cases better and creates a more visually appealing display.
    """
    chat_id = callback.from_user.id
    user = crud.get_user(chat_id)
    
    if not user:
        await callback.message.edit_text(
            "‚ö†Ô∏è *–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.",
            parse_mode="Markdown",
            reply_markup=types.InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu:back")
            )
        )
        return
    
    # Check and set default set if missing
    current_set = None
    
    # Check set in cache
    if chat_id in user_set_selection:
        current_set = user_set_selection[chat_id]
    
    # If not in cache, check database
    if not current_set and len(user) > 6 and user[6]:
        current_set = user[6]
    
    # If still not set, use default for level
    if not current_set:
        level = user[1]
        default_set = DEFAULT_SETS.get(level)
        if default_set:
            try:
                crud.update_user_chosen_set(chat_id, default_set)
                user_set_selection[chat_id] = default_set
                current_set = default_set
                logger.info(f"Set default set {default_set} for user {chat_id} during profile view")
            except Exception as e:
                logger.error(f"Error setting default set for user {chat_id}: {e}")
    
    # Create user settings dictionary
    user_settings = {
        "level": user[1],
        "words_per_day": user[2],
        "repetitions": user[3],
        "timezone": user[5] if len(user) > 5 and user[5] else "–ù–µ –∑–∞–¥–∞–Ω",
        "chosen_set": current_set or "–ù–µ –≤—ã–±—Ä–∞–Ω",
        "test_words_count": user[7] if len(user) > 7 and user[7] else 5,
        "memorize_words_count": user[8] if len(user) > 8 and user[8] else 5
    }
    
    # Format with nice formatting
    message = "üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
    message += f"üî§ *–£—Ä–æ–≤–µ–Ω—å:* {user_settings['level']}\n"
    message += f"üìä *–°–ª–æ–≤ –≤ –¥–µ–Ω—å:* {user_settings['words_per_day']}\n"
    message += f"üîÑ *–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:* {user_settings['repetitions']}\n"
    message += f"üåê *–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:* {user_settings['timezone']}\n"
    message += f"üìö *–í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä:* {user_settings['chosen_set']}\n"
    message += f"üìù *–°–ª–æ–≤ –≤ —Ç–µ—Å—Ç–µ:* {user_settings['test_words_count']}\n"
    message += f"üìñ *–°–ª–æ–≤ –≤ –∑–∞—É—á–∏–≤–∞–Ω–∏–∏:* {user_settings['memorize_words_count']}\n\n"
    
    # Add statistics
    try:
        # Get learned words
        learned_words = crud.get_learned_words(chat_id)
        total_learned = len(learned_words)
        
        message += f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n"
        message += f"üìù –í—ã—É—á–µ–Ω–æ —Å–ª–æ–≤: {total_learned}\n"
        
        # If there's a chosen set, count words in it
        if current_set:
            level = user_settings['level']
            set_path = os.path.join(LEVELS_DIR, level, f"{current_set}.txt")
            
            if os.path.exists(set_path):
                try:
                    # Try different encodings
                    encodings = ['utf-8', 'cp1251']
                    set_words = []
                    
                    for encoding in encodings:
                        try:
                            with open(set_path, 'r', encoding=encoding) as f:
                                set_words = [line.strip() for line in f if line.strip()]
                            if set_words:
                                break
                        except UnicodeDecodeError:
                            continue
                    
                    if set_words:
                        total_set_words = len(set_words)
                        
                        # Create set of learned English words
                        learned_english_words = set(extract_english(word[0]).lower() for word in learned_words)
                        
                        # Count words from set that are learned
                        learned_from_set = 0
                        for word in set_words:
                            english_part = extract_english(word).lower()
                            if english_part in learned_english_words:
                                learned_from_set += 1
                        
                        # Add progress info
                        progress_percent = learned_from_set / total_set_words * 100 if total_set_words > 0 else 0
                        progress_bar = format_progress_bar(learned_from_set, total_set_words, 10)
                        message += f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ç–µ–∫—É—â–µ–º —Å–µ—Ç–µ: {learned_from_set}/{total_set_words} ({progress_percent:.1f}%)\n"
                        message += f"{progress_bar}\n"
                except Exception as e:
                    logger.error(f"Error calculating set statistics: {e}")
            
            # Find completed sets
            level_dir = os.path.join(LEVELS_DIR, level)
            if os.path.exists(level_dir):
                try:
                    set_files = [f[:-4] for f in os.listdir(level_dir) if f.endswith('.txt')]
                    completed_sets = []
                    
                    for set_name in set_files:
                        set_path = os.path.join(level_dir, f"{set_name}.txt")
                        if os.path.exists(set_path):
                            try:
                                # Try different encodings
                                for encoding in encodings:
                                    try:
                                        with open(set_path, 'r', encoding=encoding) as f:
                                            set_words = [line.strip() for line in f if line.strip()]
                                        if set_words:
                                            break
                                    except UnicodeDecodeError:
                                        continue
                                
                                if set_words:
                                    # Check if all words are learned
                                    learned_english_words = set(extract_english(word[0]).lower() for word in learned_words)
                                    all_learned = True
                                    
                                    for word in set_words:
                                        english_part = extract_english(word).lower()
                                        if english_part not in learned_english_words:
                                            all_learned = False
                                            break
                                    
                                    if all_learned:
                                        completed_sets.append(set_name)
                            except Exception as e:
                                logger.error(f"Error checking set {set_name}: {e}")
                    
                    # Add completed sets info
                    if completed_sets:
                        message += f"\nüéì *–í—ã—É—á–µ–Ω–Ω—ã–µ —Å–µ—Ç—ã ({len(completed_sets)})* üéì\n"
                        for set_name in completed_sets[:5]:  # Limit to 5 to avoid message too long
                            message += f"‚úÖ {set_name}\n"
                        if len(completed_sets) > 5:
                            message += f"...–∏ –µ—â–µ {len(completed_sets)-5} —Å–µ—Ç–æ–≤\n"
                    else:
                        message += "\n–ù–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–µ—Ç–æ–≤.\n"
                except Exception as e:
                    logger.error(f"Error getting completed sets: {e}")
        
    except Exception as e:
        logger.error(f"Error getting statistics: {e}")
        message += "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
    
    # Send the formatted message
    await callback.message.edit_text(
        message,
        parse_mode="Markdown",
        reply_markup=settings_menu_keyboard()
    )

async def handle_confirm_set_change(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã —Å–µ—Ç–∞. 
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
    """
    chat_id = callback.from_user.id
    try:
        # Extract encoded set name from callback data
        _, encoded_set_name = callback.data.split(":", 1)
        # URL-decode the set name
        set_name = urllib.parse.unquote(encoded_set_name)
        
        # Get current set name
        current_set = user_set_selection.get(chat_id, "–Ω–µ –≤—ã–±—Ä–∞–Ω")
        
        # Create confirmation keyboard
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, —Å–º–µ–Ω–∏—Ç—å", callback_data=f"set_change_confirmed:{encoded_set_name}"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="set_change_cancel")
        )
        
        # Send confirmation message
        await bot.send_message(
            chat_id,
            f"‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ! –°–º–µ–Ω–∞ —Å–µ—Ç–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ–ª–Ω–æ–º—É —Å–±—Ä–æ—Å—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.*\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å–µ—Ç: *{current_set}*\n"
            f"–ù–æ–≤—ã–π —Å–µ—Ç: *{set_name}*\n\n"
            f"–ü—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∞ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω. –í—ã —É–≤–µ—Ä–µ–Ω—ã?",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error in handle_confirm_set_change: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

async def handle_set_change_confirmed(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã —Å–µ—Ç–∞.
    –û—á–∏—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∞.
    """
    chat_id = callback.from_user.id
    try:
        # Extract the encoded set name
        _, encoded_set_name = callback.data.split(":", 1)
        set_name = urllib.parse.unquote(encoded_set_name)
        
        # Clear user's dictionary
        try:
            crud.clear_learned_words_for_user(chat_id)
            logger.info(f"Dictionary cleared for user {chat_id} due to set change")
        except Exception as e:
            logger.error(f"Error clearing dictionary: {e}")
            await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ª–æ–≤–∞—Ä—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await callback.answer()
            return
        
        # Get user level
        user = crud.get_user(chat_id)
        if not user:
            await bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            await callback.answer()
            return
            
        user_level = user[1]
        set_path = os.path.join(LEVELS_DIR, user_level, f"{set_name}.txt")
        
        if not os.path.exists(set_path):
            logger.warning(f"Set file not found: {set_path}")
            await bot.send_message(chat_id, f"–°–µ—Ç {set_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É—Ä–æ–≤–Ω—è {user_level}.")
            await callback.answer()
            return
        
        # Read file content
        try:
            with open(set_path, "r", encoding="utf-8") as f:
                content = f.read()
        except UnicodeDecodeError:
            try:
                with open(set_path, "r", encoding="cp1251") as f:
                    content = f.read()
            except Exception as e:
                logger.error(f"Error reading file: {e}")
                await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await callback.answer()
                return
        except Exception as e:
            logger.error(f"Error reading file: {e}")
            await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await callback.answer()
            return
        
        # Store the selected set and reset cache
        user_set_selection[chat_id] = set_name
        reset_daily_words_cache(chat_id)
        
        # Store the selected set and reset cache
        user_set_selection[chat_id] = set_name
        reset_daily_words_cache(chat_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –¥–ª—è —Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è
        sticker_id = get_congratulation_sticker()
        if sticker_id:
            await bot.send_sticker(chat_id, sticker_id)

        # Format message with truncation for large sets
        intro_text = f"–í—ã–±—Ä–∞–Ω —Å–µ—Ç {set_name} –¥–ª—è —É—Ä–æ–≤–Ω—è {user_level}.\n‚ö†Ô∏è –°–ª–æ–≤–∞—Ä—å —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.\n–°–ª–æ–≤–∞ —Å–µ—Ç–∞:\n\n"
        
        # Split content into lines
        lines = content.split('\n')
        
        # Max message length for Telegram
        MAX_MESSAGE_LENGTH = 3800
        
        # Check if content is too large
        if len(intro_text) + len(content) > MAX_MESSAGE_LENGTH:
            preview_content = ""
            preview_line_count = 0
            word_count = len(lines)
            
            for line in lines:
                if len(intro_text) + len(preview_content) + len(line) + 100 < MAX_MESSAGE_LENGTH:
                    preview_content += line + "\n"
                    preview_line_count += 1
                else:
                    break
            
            note = f"\n\n...–∏ –µ—â–µ {word_count - preview_line_count} —Å–ª–æ–≤(–∞). –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ –æ–±—É—á–µ–Ω–∏–∏."
            message_text = intro_text + preview_content + note
        else:
            message_text = intro_text + content
        
        # Send the message
        await bot.send_message(chat_id, message_text, reply_markup=settings_menu_keyboard())
        
    except Exception as e:
        logger.error(f"Error in handle_set_change_confirmed: {e}")
        await bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

async def handle_set_change_cancelled(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–º–µ–Ω—ã —Å–µ—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É —Å–µ—Ç–æ–≤.
    """
    chat_id = callback.from_user.id
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–µ—Ç–æ–≤
    await process_my_sets(callback, bot)
    await callback.answer("–°–º–µ–Ω–∞ —Å–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")