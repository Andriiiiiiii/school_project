# handlers/commands.py
from __future__ import annotations

import logging
from functools import partial

from aiogram import Bot, Dispatcher, types
from aiogram.types import BotCommand, MenuButtonCommands

from config import DEFAULT_SETS
from database import crud
from keyboards.main_menu import main_menu_keyboard
from keyboards.reply_keyboards import get_main_menu_keyboard
from utils.helpers import get_daily_words_for_user
from utils.visual_helpers import format_daily_words_message

logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê (—Å–ø–∏—Å–æ–∫) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BOT_COMMANDS: list[BotCommand] = [
    BotCommand("start", "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"),
    BotCommand("menu", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
    BotCommand("words", "–°–ª–æ–≤–∞ –¥–Ω—è"),
    BotCommand("quiz", "–¢–µ—Å—Ç –¥–Ω—è"),
    BotCommand("dictionary", "–ú–æ–π —Å–ª–æ–≤–∞—Ä—å"),
    BotCommand("settings", "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è"),
    BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞"),
]


async def set_commands(bot: Bot) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è /–∫–æ–º–∞–Ω–¥ –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º –º–µ–Ω—é."""
    await bot.set_my_commands(BOT_COMMANDS)
    
    # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    try:
        # –ì–ª–æ–±–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
        await bot.set_chat_menu_button(menu_button=MenuButtonCommands())
        logger.info("–ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é: {e}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /START ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cmd_start(message: types.Message, bot: Bot) -> None:
    chat_id = message.chat.id
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç chat_id=%s", chat_id)

    try:
        # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
        await bot.set_chat_menu_button(chat_id=chat_id, menu_button=MenuButtonCommands())
        
        # ‚îÄ‚îÄ‚îÄ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        if not crud.get_user(chat_id):
            crud.add_user(chat_id)
            logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s", chat_id)

            default_set = DEFAULT_SETS.get("A1")
            if default_set:
                crud.update_user_chosen_set(chat_id, default_set)
                from handlers.settings import user_set_selection

                user_set_selection[chat_id] = default_set
                logger.info("–ë–∞–∑–æ–≤—ã–π —Å–µ—Ç %s –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s", default_set, chat_id)

            # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from handlers.onboarding import start_onboarding
            await start_onboarding(message, bot)
            return

        # ‚îÄ‚îÄ‚îÄ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        await message.answer(
            "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ English Learning Bot!*\n\n"
            "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–±–æ—Ä—ã —Å–ª–æ–≤\n"
            "‚Ä¢ –ö–≤–∏–∑—ã –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å\n"
            "‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="Markdown",
            reply_markup=main_menu_keyboard(),
        )

    except Exception as exc:  # fallback
        logger.exception("–û—à–∏–±–∫–∞ –≤ cmd_start: %s", exc)
        await message.answer(
            "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="Markdown",
            reply_markup=main_menu_keyboard(),
        )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cmd_words(message: types.Message, bot: Bot) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–æ–≤–∞ –¥–Ω—è."""
    chat_id = message.chat.id
    user = crud.get_user(chat_id)
    
    if not user:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="Markdown")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–Ω—è –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è callback
    from config import REMINDER_START, DURATION_HOURS
    from utils.helpers import get_user_settings
    
    words, reps = get_user_settings(chat_id)
    result = get_daily_words_for_user(
        chat_id, user[1], words, reps,
        first_time=REMINDER_START, duration_hours=DURATION_HOURS
    )
    
    if result is None:
        await message.answer(f"‚ö†Ô∏è –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —É—Ä–æ–≤–Ω—è {user[1]}.", parse_mode="Markdown")
        return
    elif len(result) == 3 and result[:2] == (None, None):
        # –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã —Å–µ—Ç–∞
        default_set = result[2]
        current_set = user[6] or "–Ω–µ –≤—ã–±—Ä–∞–Ω"
        from keyboards.submenus import set_change_confirm_keyboard
        
        text = (
            "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ! –°–º–µ–Ω–∞ —Å–µ—Ç–∞ —Å–±—Ä–æ—Å–∏—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å.*\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å–µ—Ç: *{current_set}*\n"
            f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: *{user[1]}*\n\n"
            f"–°–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Ä–æ–≤–Ω—é.\n"
            f"–°–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑–æ–≤—ã–π *{default_set}*?\n"
        )
        await message.answer(text, parse_mode="Markdown", 
                            reply_markup=set_change_confirm_keyboard(default_set))
        return
    
    messages, times = result
    await message.answer(
        format_daily_words_message(messages, times),
        parse_mode="Markdown",
        reply_markup=main_menu_keyboard(),
    )

async def cmd_quiz(message: types.Message, bot: Bot) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–≤–∏–∑ —Å–æ —Å–ª–æ–≤–∞–º–∏ –¥–Ω—è."""
    chat_id = message.chat.id
    user = crud.get_user(chat_id)
    
    if not user:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", parse_mode="Markdown")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–≤–∏–∑ –Ω–∞–ø—Ä—è–º—É—é
    from config import DURATION_HOURS, REMINDER_START
    from handlers.quiz import quiz_states, poll_to_user, poll_to_index, nav_messages
    from utils.helpers import daily_words_cache, get_daily_words_for_user
    from utils.quiz_helpers import load_quiz_data
    from utils.quiz_utils import generate_quiz_options
    from utils.visual_helpers import extract_english
    
    level = user[1]
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    try:
        from handlers.settings import user_set_selection
        chosen_set = user_set_selection.get(chat_id)
    except ImportError:
        chosen_set = None

    learned = {extract_english(w[0]).lower() for w in crud.get_learned_words(chat_id)}

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–Ω—è
    get_daily_words_for_user(
        chat_id, level, user[2], user[3],
        first_time=REMINDER_START, duration_hours=DURATION_HOURS,
        chosen_set=chosen_set,
    )
    entry = daily_words_cache.get(chat_id)
    if not entry:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞.")
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∫—ç—à–∞
    if len(entry) > 8 and entry[8]:
        unique_words = entry[8]
    else:
        raw = [m.replace("üîπ ", "").strip() for m in entry[1]]
        if raw and raw[0].startswith(("üéì", "‚ö†Ô∏è")):
            raw.pop(0)
        unique_words = raw

    revision = bool(len(entry) > 9 and entry[9])
    source = unique_words if revision else [w for w in unique_words if extract_english(w).lower() not in learned]
    
    if not source:
        await message.answer("–í—Å–µ —Å–ª–æ–≤–∞ —É–∂–µ –≤—ã—É—á–µ–Ω—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
        return

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞
    quiz_data = load_quiz_data(level, chosen_set)
    if not quiz_data:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
        return
        
    mapping = {item["word"].lower(): item["translation"] for item in quiz_data}
    all_trans = [item["translation"] for item in quiz_data]
    questions = []
    
    for src in source:
        key = extract_english(src).lower()
        correct = mapping.get(key) or mapping.get(src.lower())
        if not correct:
            continue
        opts, idx = generate_quiz_options(correct, all_trans, 4)
        questions.append({
            "word": src,
            "correct": correct,
            "options": opts,
            "correct_index": idx,
            "is_revision": revision,
        })
    
    if not questions:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–∏–∑–∞
    quiz_states[chat_id] = {
        "questions": questions,
        "current": 0,
        "correct": 0,
        "revision": revision,
        "answered": set(),
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    from handlers.quiz import _send_question
    await _send_question(chat_id, bot)
    
    await message.answer("–ö–≤–∏–∑ –∑–∞–ø—É—â–µ–Ω! –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ –æ–ø—Ä–æ—Å–∞—Ö –≤—ã—à–µ.")

async def cmd_dictionary(message: types.Message, bot: Bot) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    chat_id = message.chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –Ω–∞–ø—Ä—è–º—É—é
    learned = crud.get_learned_words(chat_id)
    
    from utils.visual_helpers import format_dictionary_message
    from keyboards.submenus import dictionary_menu_keyboard
    
    if not learned:
        text = (
            "üìö *–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç*\n\n"
            "–ü—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑—ã, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –≤ —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å!"
        )
    else:
        text = format_dictionary_message(learned)

    await message.answer(
        text,
        parse_mode="Markdown",
        reply_markup=dictionary_menu_keyboard()
    )

async def cmd_settings(message: types.Message, bot: Bot) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    from keyboards.submenus import settings_menu_keyboard
    
    await message.answer(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:", 
        reply_markup=settings_menu_keyboard()
    )

async def cmd_menu(message: types.Message) -> None:
    await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

async def cmd_help(message: types.Message) -> None:
    from keyboards.submenus import help_menu_keyboard

    await message.answer(
        "*–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*\n\n"
        "English Learning Bot –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ —á–µ—Ä–µ–∑:\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–æ–¥–±–æ—Ä–∫–∏ —Å–ª–æ–≤\n"
        "‚Ä¢ –ö–≤–∏–∑—ã –∏ —Ç–µ—Å—Ç—ã\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏:",
        parse_mode="Markdown",
        reply_markup=help_menu_keyboard(),
    )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–ï–ù–î–õ–ï–†–û–í ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def register_command_handlers(dp: Dispatcher, bot: Bot) -> None:
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –≤—ã—à–µ–æ–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É."""
    dp.register_message_handler(partial(cmd_start, bot=bot), commands="start", state="*")
    dp.register_message_handler(cmd_menu, commands="menu")
    dp.register_message_handler(partial(cmd_words, bot=bot), commands="words")
    dp.register_message_handler(partial(cmd_quiz, bot=bot), commands="quiz")
    dp.register_message_handler(partial(cmd_dictionary, bot=bot), commands="dictionary")
    dp.register_message_handler(partial(cmd_settings, bot=bot), commands="settings")
    dp.register_message_handler(cmd_help, commands="help")

    # —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Ñ—Ä–∞–∑–∞ ¬´–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ /start¬ª (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ)
    dp.register_message_handler(
        partial(cmd_start, bot=bot),
        lambda m: m.text and "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ /start" in m.text,
    )