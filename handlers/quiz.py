# handlers/quiz.py
import random
from datetime import datetime
from aiogram import types, Dispatcher, Bot
import asyncio
from database import crud  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–º–ø–æ—Ä—Ç crud –≥–ª–æ–±–∞–ª—å–Ω—ã–π
from utils.quiz_helpers import load_quiz_data
from keyboards.submenus import quiz_keyboard
from utils.helpers import get_daily_words_for_user, daily_words_cache
from utils.visual_helpers import format_quiz_question, format_result_message, extract_english
from config import REMINDER_START, DURATION_HOURS
import logging
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏ –∏ —Ä–∞–±–æ—Ç—É —Å–æ —Å—Ç–∏–∫–µ—Ä–∞–º–∏
from utils.sticker_helper import get_congratulation_sticker
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–∏–∑–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
quiz_states = {}

def generate_quiz_questions_from_daily(daily_words, level, chosen_set=None, is_revision_mode=False):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–≤–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–≤ –¥–Ω—è.
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∏–∑–±–µ–≥–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤, –≥–¥–µ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - daily_words: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–Ω—è
    - level: —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - chosen_set: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    - is_revision_mode: —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (True/False)
    """
    quiz_data = load_quiz_data(level, chosen_set)
    if not quiz_data:
        logger.warning(f"No quiz data found for level {level}, set {chosen_set}")
        return []
    
    mapping = {item["word"].lower(): item["translation"] for item in quiz_data}
    translations_set = set(item["translation"] for item in quiz_data)
    questions = []
    
    for word in daily_words:
        word_lc = word.lower()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
        if word_lc in mapping:
            correct_translation = mapping[word_lc]
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–ª–æ–≤–æ, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∞–Ω–≥–ª–∏–π—Å–∫—É—é —á–∞—Å—Ç—å
            word_extracted = extract_english(word).lower()
            if word_extracted in mapping:
                correct_translation = mapping[word_extracted]
            else:
                # –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ –Ω–∞—à–ª–∏, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                logger.warning(f"Word '{word}' (extracted as '{word_extracted}') not found in quiz data mapping")
                continue
        
        # –°–æ–∑–¥–∞–µ–º –ø—É–ª –æ—Ç–≤–ª–µ–∫–∞—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–∫–ª—é—á–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        pool = list(translations_set - {correct_translation})
        
        # –í—ã–±–∏—Ä–∞–µ–º –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø—É–ª–∞
        if len(pool) >= 3:
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º random.sample –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            distractors = random.sample(pool, 3)
        else:
            # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º random.choices, —á—Ç–æ –º–æ–∂–µ—Ç –¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã,
            # –Ω–æ —ç—Ç–æ –ª—É—á—à–µ, —á–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            if pool:
                distractors = random.choices(pool, k=3)
            else:
                # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ—Ç –æ—Ç–≤–ª–µ–∫–∞—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                logger.warning(f"No distractors available for word '{word}'")
                distractors = ["???", "???", "???"]
        
        options = [correct_translation] + distractors
        random.shuffle(options)
        correct_index = options.index(correct_translation)
        
        questions.append({
            "word": word,
            "correct": correct_translation,
            "options": options,
            "correct_index": correct_index,
            "is_revision": is_revision_mode  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        })
    
    return questions

async def start_quiz(callback: types.CallbackQuery, bot: Bot):
    """
    Initializes a quiz for the user.
    Enhanced with better error handling and using shared quiz utilities.
    """
    chat_id = callback.from_user.id
    try:
        user = crud.get_user(chat_id)
        if not user:
            await bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            return
        level = user[1]
        
        # Get chosen set from settings
        try:
            from handlers.settings import user_set_selection
            chosen_set = user_set_selection.get(chat_id)
        except ImportError:
            logger.error("Error importing user_set_selection, using default set")
            chosen_set = None
        
        # Get learned words efficiently
        try:
            learned_raw = crud.get_learned_words(chat_id)
            learned_set = set(extract_english(item[0]).lower() for item in learned_raw)
            logger.info(f"User {chat_id} has {len(learned_set)} learned words")
        except Exception as e:
            logger.error(f"Error getting learned words for user {chat_id}: {e}")
            learned_set = set()
        
        # Get daily words with proper error handling
        try:
            result = get_daily_words_for_user(
                chat_id, level, user[2], user[3],
                first_time=REMINDER_START, 
                duration_hours=DURATION_HOURS,
                chosen_set=chosen_set
            )
            
            if result is None:
                await bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞.")
                return
                
            # Get the cache entry
            if chat_id not in daily_words_cache:
                logger.error(f"Cache not found for user {chat_id}")
                await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤ –¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
                
            # Process the words
            daily_entry = daily_words_cache[chat_id]
            raw_words = [msg.replace("üîπ ", "").strip() for msg in daily_entry[1]]
            
            # Remove prefix message if present
            if raw_words and (raw_words[0].startswith("üéì") or raw_words[0].startswith("‚ö†Ô∏è")):
                raw_words = raw_words[1:]
                
            # Extract English words and normalize to lowercase
            daily_words = [extract_english(line).lower() for line in raw_words]
            daily_words_set = set(daily_words)
            
            # Check revision mode
            is_revision_mode = len(daily_entry) > 9 and daily_entry[9]
            logger.info(f"User {chat_id} in revision mode: {is_revision_mode}")
            
            # Filter unlearned words
            unlearned_words = daily_words_set - learned_set
            
            # Determine which words to use in the quiz
            quiz_words = []
            if is_revision_mode:
                quiz_words = list(daily_words)
                await bot.send_message(
                    chat_id, 
                    "üìù *–†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è*: —Å–ª–æ–≤–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –í–∞—à —Å–ª–æ–≤–∞—Ä—å.",
                    parse_mode="Markdown"
                )
            else:
                quiz_words = list(unlearned_words)
                if not quiz_words:
                    await bot.send_message(
                        chat_id, 
                        "–í—Å–µ —Å–ª–æ–≤–∞ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ '–°–ª–æ–≤–∞ –¥–Ω—è' —É–∂–µ –≤—ã—É—á–µ–Ω—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤."
                    )
                    return
                await bot.send_message(
                    chat_id, 
                    "üìù *–ö–≤–∏–∑ –ø–æ –Ω–æ–≤—ã–º —Å–ª–æ–≤–∞–º*: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –í–∞—à —Å–ª–æ–≤–∞—Ä—å.",
                    parse_mode="Markdown"
                )
            
            # Generate questions using the shared utility
            from utils.quiz_helpers import load_quiz_data
            quiz_data = load_quiz_data(level, chosen_set)
            
            if not quiz_data:
                await bot.send_message(
                    chat_id, 
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–≤–∏–∑–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è {level}."
                )
                return
                
            # Create translation mapping
            translations = {item["word"].lower(): item["translation"] for item in quiz_data}
            all_translations = list(translations.values())
            
            # Create questions
            from utils.quiz_utils import generate_quiz_options
            
            questions = []
            for word in quiz_words:
                # Find the correct translation
                if word in translations:
                    correct_translation = translations[word]
                else:
                    # Try to find it in the quiz data
                    found = False
                    for item in quiz_data:
                        if extract_english(item["word"]).lower() == word:
                            correct_translation = item["translation"]
                            found = True
                            break
                            
                    if not found:
                        logger.warning(f"Translation not found for word '{word}'")
                        continue
                
                # Generate options with the utility function
                options, correct_index = generate_quiz_options(
                    correct_translation, 
                    all_translations, 
                    4  # 4 options including the correct one
                )
                
                questions.append({
                    "word": word,
                    "correct": correct_translation,
                    "options": options,
                    "correct_index": correct_index,
                    "is_revision": is_revision_mode
                })
            
            if not questions:
                await bot.send_message(
                    chat_id, 
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–≤–∏–∑–∞."
                )
                return
                
            # Save quiz state
            quiz_states[chat_id] = {
                "questions": questions,
                "current_index": 0,
                "correct": 0,
                "is_revision": is_revision_mode
            }
            
            # Start the quiz
            await send_quiz_question(chat_id, bot)
            
        except Exception as e:
            logger.error(f"Error setting up quiz for user {chat_id}: {e}")
            await bot.send_message(
                chat_id, 
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–≤–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception as e:
        logger.error(f"Unhandled error in start_quiz for user {chat_id}: {e}")
        await bot.send_message(
            chat_id, 
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    await callback.answer()

async def send_quiz_question(chat_id, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞."""
    try:
        state = quiz_states.get(chat_id)
        if not state:
            return
        
        current_index = state["current_index"]
        questions = state["questions"]
        
        if current_index >= len(questions):
            # –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            from utils.visual_helpers import format_result_message
            result_message = format_result_message(state['correct'], len(questions), state.get('is_revision', False))
            await bot.send_message(chat_id, result_message, parse_mode="Markdown")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            score_percentage = (state['correct'] / len(questions)) * 100 if len(questions) > 0 else 0
            if score_percentage >= 70:
                from utils.sticker_helper import send_sticker_with_menu, get_congratulation_sticker
                await send_sticker_with_menu(chat_id, bot, get_congratulation_sticker())
                
                # Add only main menu button
                from keyboards.reply_keyboards import get_main_menu_keyboard
                await bot.send_message(
                    chat_id,
                    "–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω.",
                    reply_markup=get_main_menu_keyboard()
                )
            else:
                # Even if no sticker, still show main menu
                from keyboards.main_menu import main_menu_keyboard
                await bot.send_message(
                    chat_id,
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=main_menu_keyboard()
                )
                
                # Add only main menu button
                from keyboards.reply_keyboards import get_main_menu_keyboard
                await bot.send_message(
                    chat_id,
                    "–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω.",
                    reply_markup=get_main_menu_keyboard()
                )
            
            del quiz_states[chat_id]
            return
        
        question = questions[current_index]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
        from utils.visual_helpers import format_quiz_question
        formatted_question = format_quiz_question(current_index + 1, len(questions), question['word'], question['options'])
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        from keyboards.submenus import quiz_keyboard
        keyboard = quiz_keyboard(question['options'], current_index)
        
        await bot.send_message(
            chat_id, 
            formatted_question,
            parse_mode="Markdown", 
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –∫–≤–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def process_quiz_answer(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞."""
    chat_id = callback.from_user.id
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if callback.data == "quiz:back":
            from keyboards.main_menu import main_menu_keyboard
            await bot.send_message(chat_id, "", reply_markup=main_menu_keyboard())
            if chat_id in quiz_states:
                del quiz_states[chat_id]
            await callback.answer()
            return
            
        if callback.data == "quiz:stop":
            from keyboards.main_menu import main_menu_keyboard
            await bot.send_message(chat_id, "–ö–≤–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=main_menu_keyboard())
            if chat_id in quiz_states:
                del quiz_states[chat_id]
            await callback.answer()
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        data = callback.data.split(":")
        if len(data) != 4:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
            return
            
        _, _, q_index_str, option_index_str = data
        q_index = int(q_index_str)
        option_index = int(option_index_str)
        
        state = quiz_states.get(chat_id)
        if not state:
            await callback.answer("–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
            
        if q_index != state["current_index"]:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤.", show_alert=True)
            return
            
        question = state["questions"][q_index]
        is_revision = state.get("is_revision", False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        if option_index == question["correct_index"]:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            try:
                # –Ø–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç crud
                from database import crud
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å
                word_to_learn = extract_english(question["word"]).lower()
                
                # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
                current_learned = crud.get_learned_words(chat_id)
                current_learned_words = set(extract_english(word).lower() for word, _ in current_learned)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å —Ç–æ–ª—å–∫–æ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –≤—ã—É—á–µ–Ω–æ
                if not is_revision and word_to_learn not in current_learned_words:
                    crud.add_learned_word(chat_id, question["word"], question["correct"], datetime.now().strftime("%Y-%m-%d"))
                    await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å.")
                elif is_revision:
                    await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! (–†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: —Å–ª–æ–≤–æ —É–∂–µ –≤ —Å–ª–æ–≤–∞—Ä–µ)")
                else:
                    await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! (–°–ª–æ–≤–æ —É–∂–µ –≤ —Å–ª–æ–≤–∞—Ä–µ)")
                    
                state["correct"] += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
                await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
        else:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            await callback.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['correct']}")
            
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        state["current_index"] += 1
        await send_quiz_question(chat_id, bot)
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–≤–∏–∑: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–≤–∏–∑: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.")

def register_quiz_handlers(dp: Dispatcher, bot: Bot):
    dp.register_callback_query_handler(
        lambda c: start_quiz(c, bot),
        lambda c: c.data == "quiz:start"
    )
    dp.register_callback_query_handler(
        lambda c: process_quiz_answer(c, bot),
        lambda c: c.data and c.data.startswith("quiz:")
    )

async def finish_level_test(chat_id: int, bot: Bot):
    """Updated to use improved result formatting and show main menu after sticker"""
    state = level_test_states.get(chat_id)
    if not state:
        return
    
    results = state["results"]
    
    # Group results by level
    results_by_level = {}
    for i, question in enumerate(state["questions"]):
        level = question["level"]
        if level not in results_by_level:
            results_by_level[level] = [0, 0]  # [correct, total]
        
        results_by_level[level][1] += 1
        if results[i]:
            results_by_level[level][0] += 1
    
    # Determine new level
    new_level = "A1"
    for level in LEVELS:
        score, total = results_by_level.get(level, [0, 0])
        if total > 0 and score >= 2:
            new_level = level
        else:
            break

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –∏ –∏–∑ –∫—ç—à–∞
    current_set = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç –≤ –∫—ç—à–µ
    try:
        from handlers.settings import user_set_selection
        if chat_id in user_set_selection:
            current_set = user_set_selection[chat_id]
    except ImportError:
        logger.error("Could not import user_set_selection, unable to preserve chosen set")

    # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, —Å–º–æ—Ç—Ä–∏–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = crud.get_user(chat_id)
    if not current_set and user and len(user) > 6:
        current_set = user[6]

    # Update user level in database
    crud.update_user_level(chat_id, new_level)
    
    # –ï—Å–ª–∏ —Å–µ—Ç –≤—Å–µ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    if not current_set:
        from config import DEFAULT_SETS
        current_set = DEFAULT_SETS.get(new_level)
        if current_set:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∫—ç—à
            crud.update_user_chosen_set(chat_id, current_set)
            try:
                from handlers.settings import user_set_selection
                user_set_selection[chat_id] = current_set
            except ImportError:
                logger.error("Could not import user_set_selection, unable to update chosen set in memory")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–ª–æ–≤
    reset_daily_words_cache(chat_id)

    # Use the visual helper to format the results
    formatted_results = format_level_test_results(results_by_level, new_level)
    
    # Send results message first
    await bot.send_message(
        chat_id, 
        formatted_results,
        parse_mode="Markdown"
    )
    
    # Send sticker and show main menu
    from utils.sticker_helper import send_sticker_with_menu, get_congratulation_sticker
    await send_sticker_with_menu(chat_id, bot, get_congratulation_sticker())
    
    # Add the reply keyboard for commands
    from keyboards.reply_keyboards import get_main_menu_keyboard
    await bot.send_message(
        chat_id,
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )
    
    del level_test_states[chat_id]