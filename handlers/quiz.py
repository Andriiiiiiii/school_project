# –ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ handlers/quiz.py

"""
–¢–µ—Å—Ç ¬´–°–ª–æ–≤–∞ –¥–Ω—è¬ª: –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ quiz-–ø–æ–ª–ª—ã —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π.
"""

import asyncio
import logging
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Poll, PollAnswer

from config import DURATION_HOURS, REMINDER_START
from database import crud
from utils.helpers import daily_words_cache, get_daily_words_for_user
from utils.quiz_helpers import load_quiz_data
from utils.quiz_utils import generate_quiz_options
from utils.sticker_helper import get_congratulation_sticker, send_sticker_with_menu
from utils.visual_helpers import extract_english, format_progress_bar, format_result_message

logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#   –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
quiz_states: dict[int, dict] = {}
poll_to_user: dict[str, int] = {}
poll_to_index: dict[str, int] = {}
nav_messages: dict[int, int] = {}
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


def _make_nav(prefix: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏ –≤ —Ä—è–¥."""
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üõë –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç–µ—Å—Ç", callback_data=f"{prefix}:back"),
        InlineKeyboardButton("‚è≠Ô∏è –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ", callback_data=f"{prefix}:skip")
    )
    return kb


def _generate_questions(daily: list[str], level: str, chosen_set: str | None, revision: bool) -> list[dict]:
    quiz_data = load_quiz_data(level, chosen_set)
    if not quiz_data:
        logger.warning("No quiz data for level=%s set=%s", level, chosen_set)
        return []

    mapping = {item["word"].lower(): item["translation"] for item in quiz_data}
    all_trans = [item["translation"] for item in quiz_data]
    questions: list[dict] = []

    for src in daily:
        key = extract_english(src).lower()
        correct = mapping.get(key) or mapping.get(src.lower())
        if not correct:
            logger.warning("No translation for %s", src)
            continue
        opts, idx = generate_quiz_options(correct, all_trans, 4)
        questions.append({
            "word": src,
            "correct": correct,
            "options": opts,
            "correct_index": idx,
            "is_revision": revision,
        })
        logger.debug("Q: %s ‚Üí %s (idx=%d)", src, correct, idx)
    return questions


async def _send_question(chat_id: int, bot: Bot) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""
    state = quiz_states.get(chat_id)
    if not state:
        return

    idx = state["current"]
    if idx >= len(state["questions"]):
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
        await _finish_quiz(chat_id, bot)
        return

    q = state["questions"][idx]

    poll: Poll = await bot.send_poll(
        chat_id=chat_id,
        question=f"–ö–∞–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ ¬´{extract_english(q['word'])}¬ª?",
        options=q["options"],
        type="quiz",
        correct_option_id=q["correct_index"],
        explanation=f"–í–æ–ø—Ä–æ—Å {idx+1}/{len(state['questions'])}"
                    + (" | –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ" if q["is_revision"] else ""),
        is_anonymous=False,
    )
    pid = str(poll.poll.id)
    poll_to_user[pid] = chat_id
    poll_to_index[pid] = idx

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    total_questions = len(state["questions"])
    progress_bar = format_progress_bar(idx + 1, total_questions, 10)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    old_msg_id = nav_messages.pop(chat_id, None)
    if old_msg_id:
        try:
            await bot.delete_message(chat_id, old_msg_id)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    try:
        msg = await bot.send_message(
            chat_id,
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {idx+1}/{total_questions}\n{progress_bar}",
            reply_markup=_make_nav("quiz")
        )
        nav_messages[chat_id] = msg.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π: {e}")

async def _finish_quiz(chat_id: int, bot: Bot) -> None:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
    state = quiz_states.pop(chat_id, None)
    if not state:
        return

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    old_msg_id = nav_messages.pop(chat_id, None)
    if old_msg_id:
        try:
            await bot.delete_message(chat_id, old_msg_id)
        except Exception:
            pass

    correct, total = state["correct"], len(state["questions"])
    result = format_result_message(correct, total, state["revision"])
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º streak –ø—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ –¥–Ω—è
    try:
        from database.crud import increment_user_streak, get_user_streak
        from datetime import datetime
        
        # –ü–æ–ª—É—á–∞–µ–º streak –¥–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
        old_streak, _ = get_user_streak(chat_id)
        
        # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º streak
        new_streak = increment_user_streak(chat_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–≤–µ–ª–∏—á–∏–ª—Å—è –ª–∏ streak (–∑–Ω–∞—á–∏—Ç, —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç –∑–∞ –¥–µ–Ω—å)
        if new_streak > old_streak:
            result += f"\nüî• –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: {new_streak}"
            if new_streak >= 7:
                result += "\nüéØ –û—Ç–ª–∏—á–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å!"
        else:
            result += f"\nüî• –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: {new_streak} (—É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç —Å–µ–≥–æ–¥–Ω—è)"
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è streak –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
    
    await bot.send_message(chat_id, result, parse_mode="Markdown")
    
    from keyboards.main_menu import main_menu_keyboard
    await bot.send_message(chat_id, "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=main_menu_keyboard())

async def start_quiz(cb: types.CallbackQuery, bot: Bot) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç —Å–æ —Å–ª–æ–≤–∞–º–∏ –¥–Ω—è. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–µ–∂–∏–º–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è."""
    chat_id = cb.from_user.id
    logger.info("StartQuiz chat=%s", chat_id)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    old_msg_id = nav_messages.pop(chat_id, None)
    if old_msg_id:
        try:
            await bot.delete_message(chat_id, old_msg_id)
        except Exception:
            pass

    user = crud.get_user(chat_id)
    if not user:
        await bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        await cb.answer()
        return

    level = user[1]
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    try:
        from handlers.settings import user_set_selection
        chosen_set = user_set_selection.get(chat_id)
    except ImportError:
        chosen_set = None

    learned = {extract_english(w[0]).lower() for w in crud.get_learned_words(chat_id)}

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–Ω—è
    get_daily_words_for_user(
        chat_id, level, user[2], user[3],
        first_time=REMINDER_START, duration_hours=DURATION_HOURS,
        chosen_set=chosen_set,
    )
    entry = daily_words_cache.get(chat_id)
    if not entry:
        await bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞.")
        await cb.answer()
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∫—ç—à–∞ (–ø–æ–∑–∏—Ü–∏—è 8)
    if len(entry) > 8 and entry[8]:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∫—ç—à–∞
        unique_words = entry[8]
    else:
        # –ï—Å–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
        raw = [m.replace("üîπ ", "").strip() for m in entry[1]]
        if raw and raw[0].startswith(("üéì", "‚ö†Ô∏è")):
            raw.pop(0)
        unique_words = raw

    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –†–ï–ñ–ò–ú–ê –ü–û–í–¢–û–†–ï–ù–ò–Ø
    revision = bool(len(entry) > 9 and entry[9])
    
    if revision:
        # –í —Ä–µ–∂–∏–º–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–ª–æ–≤–∞, –ø–æ—Å–∫–æ–ª—å–∫—É –≤—Å–µ —É–∂–µ –≤—ã—É—á–µ–Ω—ã
        source = unique_words
    else:
        # –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        source = [w for w in unique_words if extract_english(w).lower() not in learned]
    
    if not source:
        if revision:
            await bot.send_message(chat_id, "–ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.")
        else:
            await bot.send_message(chat_id, "–í—Å–µ —Å–ª–æ–≤–∞ —É–∂–µ –≤—ã—É—á–µ–Ω—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
        await cb.answer()
        return

    questions = _generate_questions(source, level, chosen_set, revision)
    if not questions:
        await bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
        await cb.answer()
        return

    quiz_states[chat_id] = {
        "questions": questions,
        "current": 0,
        "correct": 0,
        "revision": revision,
        "answered": set(),
    }

    await _send_question(chat_id, bot)
    await cb.answer()

async def handle_poll_answer(ans: PollAnswer) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞."""
    pid = str(ans.poll_id)
    chat_id = poll_to_user.get(pid)
    idx = poll_to_index.get(pid)
    
    if chat_id is None or idx is None or chat_id not in quiz_states:
        logger.warning("Unknown poll id=%s", pid)
        return

    # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
    poll_to_user.pop(pid, None)
    poll_to_index.pop(pid, None)

    state = quiz_states.get(chat_id)
    if not state or idx in state["answered"]:
        return
    
    state["answered"].add(idx)
    bot = Bot.get_current()

    q = state["questions"][idx]
    chosen = ans.option_ids[0] if ans.option_ids else None
    text = q["options"][chosen] if chosen is not None else None
    correct = (text == q["correct"])
    logger.info("PollAns chat=%s idx=%d chose=%s ok=%s", chat_id, idx, text, correct)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    old_msg_id = nav_messages.pop(chat_id, None)
    if old_msg_id:
        try:
            await bot.delete_message(chat_id, old_msg_id)
        except Exception:
            pass

    if correct:
        state["correct"] += 1
        if not q["is_revision"]:
            eng = extract_english(q["word"]).lower()
            if eng not in {extract_english(w[0]).lower() for w in crud.get_learned_words(chat_id)}:
                crud.add_learned_word(
                    chat_id, extract_english(q["word"]), q["correct"],
                    datetime.now().strftime("%Y-%m-%d")
                )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
        await bot.send_message(chat_id, "‚úÖ –í–µ—Ä–Ω–æ!")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        state["current"] += 1
        if state["current"] >= len(state["questions"]):
            await _finish_quiz(chat_id, bot)
        else:
            await _send_question(chat_id, bot)
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
        await bot.send_message(
            chat_id,
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {q['correct']}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        total_questions = len(state["questions"])
        current_question = idx + 1
        progress_bar = format_progress_bar(current_question, total_questions, 10)
        
        try:
            msg = await bot.send_message(
                chat_id,
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {current_question}/{total_questions}\n{progress_bar}",
                reply_markup=_make_nav("quiz")
            )
            nav_messages[chat_id] = msg.message_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ—Å–ª–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")

async def process_quiz_navigation(cb: types.CallbackQuery, bot: Bot) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞."""
    chat_id = cb.from_user.id
    action = cb.data  # "quiz:back" –∏–ª–∏ "quiz:skip"

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    old_msg_id = nav_messages.pop(chat_id, None)
    if old_msg_id:
        try:
            await bot.delete_message(chat_id, old_msg_id)
        except Exception:
            pass

    if action == "quiz:back":
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        quiz_states.pop(chat_id, None)
        from keyboards.main_menu import main_menu_keyboard
        await bot.send_message(chat_id, "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=main_menu_keyboard())
        await cb.answer()
        return

    st = quiz_states.get(chat_id)
    if not st:
        await cb.answer("–°–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ" - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    if action == "quiz:skip":
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –µ—â–µ –Ω–µ –æ—Ç–≤–µ—á–µ–Ω, –æ—Ç–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π (–Ω–æ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ)
        if st["current"] not in st["answered"]:
            st["answered"].add(st["current"])
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        st["current"] += 1
        if st["current"] >= len(st["questions"]):
            await _finish_quiz(chat_id, bot)
        else:
            await _send_question(chat_id, bot)
        
        await cb.answer()
        return


def register_quiz_handlers(dp: Dispatcher, bot: Bot) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∞ ¬´–°–ª–æ–≤–∞ –¥–Ω—è¬ª.
    """

    # ‚Ü≥ 1.  –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê –ù–ê POLL
    #     —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∞–±–ª–∏—Ü–µ poll_to_user, —á—Ç–æ–±—ã   QUIZ   –ª–æ–≤–∏–ª –¢–û–õ–¨–ö–û —Å–≤–æ–∏ poll-id
    dp.register_poll_answer_handler(
        handle_poll_answer,
        lambda ans: str(ans.poll_id) in poll_to_user,
    )

    # ‚Ü≥ 2.  –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê
    dp.register_callback_query_handler(
        lambda cb: asyncio.create_task(start_quiz(cb, bot)),
        lambda cb: cb.data == "quiz:start",
    )

    # ‚Ü≥ 3.  –ù–ê–í–ò–ì–ê–¶–ò–Ø
    dp.register_callback_query_handler(
        lambda cb: asyncio.create_task(process_quiz_navigation(cb, bot)),
        lambda cb: cb.data in ("quiz:back", "quiz:skip"),
    )