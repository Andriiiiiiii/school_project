# handlers/quiz.py
import random
from datetime import datetime
from aiogram import types, Dispatcher, Bot
import asyncio
from database import crud
from utils.quiz_helpers import load_quiz_data
from keyboards.submenus import quiz_keyboard
from utils.helpers import get_daily_words_for_user, daily_words_cache
from utils.visual_helpers import format_quiz_question, format_result_message, extract_english
from config import REMINDER_START, DURATION_HOURS
import logging
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏ –∏ —Ä–∞–±–æ—Ç—É —Å–æ —Å—Ç–∏–∫–µ—Ä–∞–º–∏
from utils.sticker_helper import get_congratulation_sticker
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–∏–∑–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
quiz_states = {}

def generate_quiz_questions_from_daily(daily_words, level, chosen_set=None, is_revision_mode=False):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–≤–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–≤ –¥–Ω—è.
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∏–∑–±–µ–≥–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤, –≥–¥–µ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - daily_words: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–Ω—è
    - level: —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - chosen_set: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    - is_revision_mode: —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (True/False)
    """
    quiz_data = load_quiz_data(level, chosen_set)
    if not quiz_data:
        logger.warning(f"No quiz data found for level {level}, set {chosen_set}")
        return []
    
    mapping = {item["word"].lower(): item["translation"] for item in quiz_data}
    translations_set = set(item["translation"] for item in quiz_data)
    questions = []
    
    for word in daily_words:
        word_lc = word.lower()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
        if word_lc in mapping:
            correct_translation = mapping[word_lc]
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–ª–æ–≤–æ, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∞–Ω–≥–ª–∏–π—Å–∫—É—é —á–∞—Å—Ç—å
            word_extracted = extract_english(word).lower()
            if word_extracted in mapping:
                correct_translation = mapping[word_extracted]
            else:
                # –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ –Ω–∞—à–ª–∏, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                logger.warning(f"Word '{word}' (extracted as '{word_extracted}') not found in quiz data mapping")
                continue
        
        # –°–æ–∑–¥–∞–µ–º –ø—É–ª –æ—Ç–≤–ª–µ–∫–∞—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–∫–ª—é—á–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        pool = list(translations_set - {correct_translation})
        
        # –í—ã–±–∏—Ä–∞–µ–º –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø—É–ª–∞
        if len(pool) >= 3:
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º random.sample –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            distractors = random.sample(pool, 3)
        else:
            # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º random.choices, —á—Ç–æ –º–æ–∂–µ—Ç –¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã,
            # –Ω–æ —ç—Ç–æ –ª—É—á—à–µ, —á–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            if pool:
                distractors = random.choices(pool, k=3)
            else:
                # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ—Ç –æ—Ç–≤–ª–µ–∫–∞—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                logger.warning(f"No distractors available for word '{word}'")
                distractors = ["???", "???", "???"]
        
        options = [correct_translation] + distractors
        random.shuffle(options)
        correct_index = options.index(correct_translation)
        
        questions.append({
            "word": word,
            "correct": correct_translation,
            "options": options,
            "correct_index": correct_index,
            "is_revision": is_revision_mode  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        })
    
    return questions


async def start_quiz(callback: types.CallbackQuery, bot: Bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–≤–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    chat_id = callback.from_user.id
    try:
        user = crud.get_user(chat_id)
        if not user:
            await bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            return
        level = user[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        try:
            from handlers.settings import user_set_selection
            chosen_set = user_set_selection.get(chat_id)
        except ImportError:
            logger.error("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ user_set_selection, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–±–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            chosen_set = None
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ –ë–î
        try:
            learned_raw = crud.get_learned_words(chat_id)
            learned_set = set(extract_english(item[0]).lower() for item in learned_raw)
            logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –µ—Å—Ç—å {len(learned_set)} –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
            learned_set = set()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–Ω—è
        try:
            result = get_daily_words_for_user(chat_id, level, user[2], user[3],
                                           first_time=REMINDER_START, duration_hours=DURATION_HOURS, chosen_set=chosen_set)
            if result is None:
                await bot.send_message(chat_id, "–ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞.")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –∫—ç—à–∞
            if chat_id not in daily_words_cache:
                logger.error(f"–ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤ –¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
                
            daily_entry = daily_words_cache[chat_id]
            raw_words = [msg.replace("üîπ ", "").strip() for msg in daily_entry[1]]
            
            # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ–µ –ø—Ä–µ—Ñ–∏–∫—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if raw_words and (raw_words[0].startswith("üéì") or raw_words[0].startswith("‚ö†Ô∏è")):
                raw_words = raw_words[1:]
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            daily_words = [extract_english(line).lower() for line in raw_words]
            daily_words_set = set(daily_words)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            is_revision_mode = len(daily_entry) > 9 and daily_entry[9]
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤ —Ä–µ–∂–∏–º–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {is_revision_mode}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞
            unlearned_words = daily_words_set - learned_set
            
            if not unlearned_words and not is_revision_mode:
                await bot.send_message(chat_id, "–í—Å–µ —Å–ª–æ–≤–∞ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ '–°–ª–æ–≤–∞ –¥–Ω—è' —É–∂–µ –≤—ã—É—á–µ–Ω—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤.")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Å–ª–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ
            if is_revision_mode:
                quiz_words = list(daily_words)
            else:
                quiz_words = list(unlearned_words)
                # –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                if not quiz_words:
                    await bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–≤–∏–∑–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ —Å–ª–æ–≤–∞ —É–∂–µ –≤—ã—É—á–µ–Ω—ã.")
                    return
            
            logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(quiz_words)} —Å–ª–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–≤–∏–∑–∞
            questions = generate_quiz_questions_from_daily(quiz_words, level, chosen_set, is_revision_mode)
            
            if not questions:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–≤–∏–∑–∞ –∏–∑ {len(quiz_words)} —Å–ª–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                
                if is_revision_mode:
                    await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤.")
                else:
                    await bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–≤–∏–∑–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ —Å–ª–æ–≤–∞ —É–∂–µ –≤—ã—É—á–µ–Ω—ã.")
                return
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–∏–∑–∞
            quiz_states[chat_id] = {"questions": questions, "current_index": 0, "correct": 0, "is_revision": is_revision_mode}
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∫–≤–∏–∑–∞
            if is_revision_mode:
                await bot.send_message(chat_id, "üìù *–†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è*: —Å–ª–æ–≤–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –í–∞—à —Å–ª–æ–≤–∞—Ä—å.", parse_mode="Markdown")
            else:
                await bot.send_message(chat_id, "üìù *–ö–≤–∏–∑ –ø–æ –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞–º*: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –í–∞—à —Å–ª–æ–≤–∞—Ä—å.", parse_mode="Markdown")
                
            await send_quiz_question(chat_id, bot)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–≤–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
            await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–≤–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ start_quiz –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
async def send_quiz_question(chat_id, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞."""
    try:
        state = quiz_states.get(chat_id)
        if not state:
            return
        
        current_index = state["current_index"]
        questions = state["questions"]
        is_revision = state.get("is_revision", False)
        
        if current_index >= len(questions):
            # –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω
            from keyboards.main_menu import main_menu_keyboard
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            result_message = format_result_message(
                state['correct'], 
                len(questions),
                is_revision
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back"))
            
            if is_revision:
                keyboard.add(types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä", callback_data="settings:set"))
                keyboard.add(types.InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —É—Ä–æ–≤–Ω—è", callback_data="test_level:start"))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            await bot.send_message(
                chat_id, 
                result_message,
                parse_mode="Markdown", 
                reply_markup=keyboard
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            if state['correct'] / len(questions) >= 0.7:
                sticker_id = get_congratulation_sticker()
                if sticker_id:
                    await bot.send_sticker(chat_id, sticker_id)
            
            del quiz_states[chat_id]
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
        question = questions[current_index]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
        formatted_question = format_quiz_question(
            current_index + 1,
            len(questions),
            question['word'],
            question['options'],
            is_revision
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = quiz_keyboard(question['options'], current_index)
        
        await bot.send_message(
            chat_id, 
            formatted_question,
            parse_mode="Markdown", 
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –∫–≤–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞
async def process_quiz_answer(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞."""
    chat_id = callback.from_user.id
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if callback.data == "quiz:back":
            from keyboards.main_menu import main_menu_keyboard
            await bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard())
            if chat_id in quiz_states:
                del quiz_states[chat_id]
            await callback.answer()
            return
            
        if callback.data == "quiz:stop":
            from keyboards.main_menu import main_menu_keyboard
            await bot.send_message(chat_id, "–ö–≤–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=main_menu_keyboard())
            if chat_id in quiz_states:
                del quiz_states[chat_id]
            await callback.answer()
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        data = callback.data.split(":")
        if len(data) != 4:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
            return
            
        _, _, q_index_str, option_index_str = data
        q_index = int(q_index_str)
        option_index = int(option_index_str)
        
        state = quiz_states.get(chat_id)
        if not state:
            await callback.answer("–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
            
        if q_index != state["current_index"]:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤.", show_alert=True)
            return
            
        question = state["questions"][q_index]
        is_revision = state.get("is_revision", False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        if option_index == question["correct_index"]:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ —Å–ª–æ–≤–æ –≤ –≤—ã—É—á–µ–Ω–Ω—ã–µ
                current_learned = crud.get_learned_words(chat_id)
                current_learned_words = set(extract_english(word).lower() for word, _ in current_learned)
                word_to_learn = extract_english(question["word"]).lower()
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ —Ç–æ–ª—å–∫–æ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –≤—ã—É—á–µ–Ω–æ
                if not is_revision and word_to_learn not in current_learned_words:
                    crud.add_learned_word(chat_id, question["word"], question["correct"], datetime.now().strftime("%Y-%m-%d"))
                    await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å.")
                elif is_revision:
                    await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! (–°–ª–æ–≤–æ —É–∂–µ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ)")
                else:
                    await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! (–°–ª–æ–≤–æ —É–∂–µ –±—ã–ª–æ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ)")
                    
                state["correct"] += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
                await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
        else:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            await callback.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['correct']}")
            
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        state["current_index"] += 1
        await send_quiz_question(chat_id, bot)
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–≤–∏–∑: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–≤–∏–∑: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.")


def register_quiz_handlers(dp: Dispatcher, bot: Bot):
    dp.register_callback_query_handler(
        lambda c: start_quiz(c, bot),
        lambda c: c.data == "quiz:start"
    )
    dp.register_callback_query_handler(
        lambda c: process_quiz_answer(c, bot),
        lambda c: c.data and c.data.startswith("quiz:")
    )