#pathtofile/handlers/quiz.py
"""
–§–∞–π–ª: handlers/quiz.py
–û–ø–∏—Å–∞–Ω–∏–µ: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–≤–∏–∑–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–°–ª–æ–≤–∞ –¥–Ω—è".
         –ö–≤–∏–∑ –±–µ—Ä–µ—Ç –Ω–∞–±–æ—Ä —Å–ª–æ–≤ –∏–∑ daily_words_storage –∏–ª–∏ daily_words_cache, –∑–∞—Ç–µ–º –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫—É—é —á–∞—Å—Ç—å 
         –∏–∑ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ (–æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç "word - translation").
         –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–≤–∏–∑–∞ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ "–ú–æ–µ–º —Å–ª–æ–≤–∞—Ä–µ", —Ñ–∏–ª—å—Ç—Ä—É—é—Ç—Å—è ‚Äì –æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ.
         –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è —Å–ª–æ–≤–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞.
         –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äì —Å–ª–æ–≤–æ –≤–º–µ—Å—Ç–µ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ "–ú–æ–π —Å–ª–æ–≤–∞—Ä—å" 
         –∏, –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –∫–≤–∏–∑–∞, –æ–Ω–æ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è.
         –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–≤–∏–∑".
"""

import random
from datetime import datetime
from aiogram import types, Dispatcher, Bot
import asyncio
from database import crud
from utils.quiz_helpers import load_quiz_data
from keyboards.submenus import quiz_keyboard
from utils.helpers import get_daily_words_for_user, daily_words_cache, daily_words_storage
from config import REMINDER_START, DURATION_HOURS

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–∏–∑–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
quiz_states = {}

def extract_english(word_line: str) -> str:
    """
    –ò–∑ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–°–ª–æ–≤–∞ –¥–Ω—è" (–æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç "word - translation") –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫—É—é —á–∞—Å—Ç—å.
    –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å—é —Å—Ç—Ä–æ–∫—É.
    """
    if " - " in word_line:
        return word_line.split(" - ", 1)[0].strip()
    return word_line.strip()

def generate_quiz_questions_from_daily(daily_words, level: str):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–≤–∏–∑-–≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –∏–∑ daily_words.
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ (–ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É) –∏—â–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ load_quiz_data.
    –ï—Å–ª–∏ –¥–ª—è —Å–ª–æ–≤–∞ –Ω–∞–π–¥–µ–Ω –ø–µ—Ä–µ–≤–æ–¥, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (–æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏ 3 –ª–æ–∂–Ω—ã—Ö).
    –ï—Å–ª–∏ —Å–ª–æ–≤–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –∫–≤–∏–∑–∞, –æ–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.
    """
    quiz_data = load_quiz_data(level)
    if not quiz_data:
        return []
    mapping = { item["word"].lower(): item["translation"] for item in quiz_data }
    questions = []
    for word in daily_words:
        word_lc = word.lower()
        if word_lc not in mapping:
            print(f"[DEBUG] –î–ª—è —Å–ª–æ–≤–∞ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–≤–∏–∑–∞.")
            continue
        correct_translation = mapping[word_lc]
        pool = [d["translation"] for d in quiz_data if d["translation"] != correct_translation]
        if len(pool) >= 3:
            distractors = random.sample(pool, 3)
        else:
            distractors = random.choices(pool, k=3)
        options = [correct_translation] + distractors
        random.shuffle(options)
        correct_index = options.index(correct_translation)
        questions.append({
            "word": word,
            "correct": correct_translation,
            "options": options,
            "correct_index": correct_index
        })
    return questions

async def start_quiz(callback: types.CallbackQuery, bot: Bot):
    chat_id = callback.from_user.id
    user = crud.get_user(chat_id)
    if not user:
        await bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return
    level = user[1]
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–±–æ—Ä —Å–ª–æ–≤ –¥–Ω—è –∏–∑ daily_words_storage –∏–ª–∏ daily_words_cache
    if chat_id in daily_words_storage:
        daily_entry = daily_words_storage[chat_id]
    elif chat_id in daily_words_cache:
        daily_entry = daily_words_cache[chat_id]
    else:
        result = get_daily_words_for_user(chat_id, level, user[2], user[3],
                                           first_time=REMINDER_START, duration_hours=DURATION_HOURS)
        if result is None:
            await bot.send_message(chat_id, "–ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞.")
            return
        daily_entry = daily_words_cache[chat_id]
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–±–æ—Ä–∞: —É–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "üîπ ", –∑–∞—Ç–µ–º –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –¥–æ " - "
    raw_words = [msg.replace("üîπ ", "").strip() for msg in daily_entry[1]]
    daily_words = set(extract_english(line) for line in raw_words)
    print(f"[DEBUG] –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–ª–æ–≤–∞ –¥–ª—è –∫–≤–∏–∑–∞ –¥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {list(daily_words)}")
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ "–ú–æ–µ–º —Å–ª–æ–≤–∞—Ä–µ"
    learned = set(word for word, _ in crud.get_learned_words(chat_id))
    filtered_words = daily_words - learned
    print(f"[DEBUG] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–∏—Å–∫–ª—é—á–µ–Ω—ã –≤—ã—É—á–µ–Ω–Ω—ã–µ): {list(filtered_words)}")
    if not filtered_words:
        await bot.send_message(chat_id, "–í—Å–µ —Å–ª–æ–≤–∞ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ '–°–ª–æ–≤–∞ –¥–Ω—è' —É–∂–µ –≤—ã—É—á–µ–Ω—ã.")
        return
    questions = generate_quiz_questions_from_daily(list(filtered_words), level)
    if not questions:
        await bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–≤–∏–∑–∞.")
        return
    quiz_states[chat_id] = {"questions": questions, "current_index": 0, "correct": 0}
    await send_quiz_question(chat_id, bot)
    await callback.answer()

async def send_quiz_question(chat_id, bot: Bot):
    state = quiz_states.get(chat_id)
    if not state:
        return
    current_index = state["current_index"]
    questions = state["questions"]
    if current_index >= len(questions):
        await bot.send_message(chat_id, f"–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {state['correct']} –∏–∑ {len(questions)}.")
        del quiz_states[chat_id]
        return
    question = questions[current_index]
    text = f"–í–æ–ø—Ä–æ—Å {current_index+1}:\n–ö–∞–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ '{question['word']}'?"
    keyboard = quiz_keyboard(question['options'], current_index)
    await bot.send_message(chat_id, text, reply_markup=keyboard)

async def process_quiz_answer(callback: types.CallbackQuery, bot: Bot):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥" –∏ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–≤–∏–∑"
    if callback.data == "quiz:back":
        from keyboards.main_menu import main_menu_keyboard
        await bot.send_message(callback.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard())
        if callback.from_user.id in quiz_states:
            del quiz_states[callback.from_user.id]
        await callback.answer()
        return
    if callback.data == "quiz:stop":
        from keyboards.main_menu import main_menu_keyboard
        await bot.send_message(callback.from_user.id, "–ö–≤–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=main_menu_keyboard())
        if callback.from_user.id in quiz_states:
            del quiz_states[callback.from_user.id]
        await callback.answer()
        return

    data = callback.data.split(":")
    # –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: "quiz:answer:<question_index>:<option_index>"
    if len(data) != 4:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    _, _, q_index_str, option_index_str = data
    try:
        q_index = int(q_index_str)
        option_index = int(option_index_str)
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    chat_id = callback.from_user.id
    state = quiz_states.get(chat_id)
    if not state:
        await callback.answer("–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    if q_index != state["current_index"]:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤.", show_alert=True)
        return
    question = state["questions"][q_index]
    if option_index == question["correct_index"]:
        # –ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –≤ "–ú–æ–π —Å–ª–æ–≤–∞—Ä—å"
        crud.add_learned_word(chat_id, question["word"], question["correct"], datetime.now().strftime("%Y-%m-%d"))
        state["correct"] += 1
        await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        await callback.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['correct']}")
    state["current_index"] += 1
    await send_quiz_question(chat_id, bot)

def register_quiz_handlers(dp: Dispatcher, bot: Bot):
    dp.register_callback_query_handler(
        lambda c: start_quiz(c, bot),
        lambda c: c.data == "quiz:start"
    )
    dp.register_callback_query_handler(
        lambda c: process_quiz_answer(c, bot),
        lambda c: c.data and c.data.startswith("quiz:")
    )
