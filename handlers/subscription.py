# handlers/subscription.py
import logging
from datetime import datetime
from functools import partial

from aiogram import Bot, Dispatcher, types

from config import SUBSCRIPTION_PRICES
from database import crud
from keyboards.subscription import (
    subscription_menu_keyboard, 
    subscription_period_keyboard,
    payment_keyboard, 
    subscription_status_keyboard,
    premium_info_keyboard
)
from services.payment import PaymentService
from utils.subscription_helpers import format_subscription_status, get_premium_sets_for_level
from aiogram.utils.exceptions import MessageNotModified

logger = logging.getLogger(__name__)

async def show_subscription_menu(callback: types.CallbackQuery, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏."""
    await callback.message.edit_text(
        "üíé *Premium –ø–æ–¥–ø–∏—Å–∫–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=subscription_menu_keyboard()
    )
    await callback.answer()

async def show_premium_info(callback: types.CallbackQuery, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Premium –ø–æ–¥–ø–∏—Å–∫–µ."""
    info_text = (
        "üíé *Premium –ø–æ–¥–ø–∏—Å–∫–∞*\n\n"
        "üéØ *–ß—Ç–æ –¥–∞–µ—Ç Premium:*\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –Ω–∞–±–æ—Ä–∞–º —Å–ª–æ–≤\n"
        "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–±–æ—Ä—ã\n"
        "‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞–±–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è\n"
        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\n\n"
        "üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–±–æ—Ä—ã:*\n"
        "‚Ä¢ A1: –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –ï–¥–∞, –°–µ–º—å—è, –†–∞–±–æ—Ç–∞...\n"
        "‚Ä¢ A2: –ó–¥–æ—Ä–æ–≤—å–µ, –°–ø–æ—Ä—Ç, –•–æ–±–±–∏, –ü–æ–∫—É–ø–∫–∏...\n"
        "‚Ä¢ B1: –ë–∏–∑–Ω–µ—Å, –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –ö—É–ª—å—Ç—É—Ä–∞...\n"
        "‚Ä¢ B2: –ù–∞—É–∫–∞, –ò—Å–∫—É—Å—Å—Ç–≤–æ, –ü–æ–ª–∏—Ç–∏–∫–∞...\n"
        "‚Ä¢ C1: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞, –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π...\n"
        "‚Ä¢ C2: –ò–¥–∏–æ–º—ã, –°–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —è–∑—ã–∫...\n\n"
        "üîí *–ë–µ–∑ Premium* –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞–±–æ—Ä—ã \"Basic 1\" –∏ \"Basic 2\" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è."
    )
    
    await callback.message.edit_text(
        info_text,
        parse_mode="Markdown",
        reply_markup=premium_info_keyboard()
    )
    await callback.answer()

async def show_subscription_plans(callback: types.CallbackQuery, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ —Å —Ü–µ–Ω–∞–º–∏ –∏ —Å–∫–∏–¥–∫–∞–º–∏."""
    chat_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        from database.crud import get_user_streak, is_user_premium
        streak, _ = get_user_streak(chat_id)
        is_premium = is_user_premium(chat_id)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if is_premium and streak > 0:
            discount_percent = min(30, streak)  # –ú–∞–∫—Å–∏–º—É–º 30%
        else:
            discount_percent = 0
    except Exception as e:
        logger.error(f"Error getting user discount info: {e}")
        discount_percent = 0
        streak = 0
    
    plans_text = "üíé <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω Premium –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if discount_percent > 0:
        plans_text += f"üî• <b>–í–∞—à–∞ —Å–∫–∏–¥–∫–∞: {discount_percent}% (–∑–∞ {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥)</b>\n\n"
    
    plans_text += "üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã:</b>\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø–ª–∞–Ω–µ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
    for months, base_price in SUBSCRIPTION_PRICES.items():
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π
        if discount_percent > 0:
            discount_amount = base_price * (discount_percent / 100)
            final_price = base_price - discount_amount
        else:
            final_price = base_price
            
        if months == 1:
            if discount_percent > 0:
                plans_text += f"üóì <b>1 –º–µ—Å—è—Ü</b>\n"
                plans_text += f"   <s>{base_price:.0f}‚ÇΩ</s> ‚Üí <b>{final_price:.0f}‚ÇΩ</b>\n\n"
            else:
                plans_text += f"üóì <b>1 –º–µ—Å—è—Ü</b> - {base_price:.0f}‚ÇΩ\n\n"
        elif months == 3:
            monthly_equivalent = final_price / months
            if discount_percent > 0:
                plans_text += f"üóì <b>3 –º–µ—Å—è—Ü–∞</b>\n"
                plans_text += f"   <s>{base_price:.0f}‚ÇΩ</s> ‚Üí <b>{final_price:.0f}‚ÇΩ</b> ({monthly_equivalent:.0f}‚ÇΩ/–º–µ—Å)\n\n"
            else:
                plans_text += f"üóì <b>3 –º–µ—Å—è—Ü–∞</b> - {base_price:.0f}‚ÇΩ ({monthly_equivalent:.0f}‚ÇΩ/–º–µ—Å)\n\n"
        elif months == 6:
            monthly_equivalent = final_price / months
            if discount_percent > 0:
                plans_text += f"üóì <b>6 –º–µ—Å—è—Ü–µ–≤</b>\n"
                plans_text += f"   <s>{base_price:.0f}‚ÇΩ</s> ‚Üí <b>{final_price:.0f}‚ÇΩ</b> ({monthly_equivalent:.0f}‚ÇΩ/–º–µ—Å)\n\n"
            else:
                plans_text += f"üóì <b>6 –º–µ—Å—è—Ü–µ–≤</b> - {base_price:.0f}‚ÇΩ ({monthly_equivalent:.0f}‚ÇΩ/–º–µ—Å)\n\n"
        elif months == 12:
            monthly_equivalent = final_price / months
            if discount_percent > 0:
                plans_text += f"üóì <b>1 –≥–æ–¥</b>\n"
                plans_text += f"   <s>{base_price:.0f}‚ÇΩ</s> ‚Üí <b>{final_price:.0f}‚ÇΩ</b> ({monthly_equivalent:.0f}‚ÇΩ/–º–µ—Å)\n"
                plans_text += f"   ‚≠ê <b>–°–∞–º—ã–π –≤—ã–≥–æ–¥–Ω—ã–π –ø–ª–∞–Ω!</b>\n\n"
            else:
                plans_text += f"üóì <b>1 –≥–æ–¥</b> - {base_price:.0f}‚ÇΩ ({monthly_equivalent:.0f}‚ÇΩ/–º–µ—Å)\n"
                plans_text += f"   ‚≠ê <b>–°–∞–º—ã–π –≤—ã–≥–æ–¥–Ω—ã–π –ø–ª–∞–Ω!</b>\n\n"
    
    if discount_percent == 0:
        plans_text += "üí° <b>–°–æ–≤–µ—Ç:</b> –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç—ã –¥–Ω—è –ø–æ–¥—Ä—è–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Å–∫–∏–¥–∫–∏!\n\n"
    
    plans_text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω:"
    
    try:
        await callback.message.edit_text(
            plans_text,
            parse_mode="HTML",  # –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ HTML
            reply_markup=subscription_period_keyboard(chat_id)
        )
    except MessageNotModified:
        pass
    except Exception as e:
        logger.error(f"Error editing subscription plans message: {e}")
        await bot.send_message(
            chat_id,
            plans_text,
            parse_mode="HTML",  # –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ HTML
            reply_markup=subscription_period_keyboard(chat_id)
        )
    
    await callback.answer()

async def start_payment(callback: types.CallbackQuery, bot: Bot):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã Premium –ø–æ–¥–ø–∏—Å–∫–∏."""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –∏–∑ callback_data
    try:
        months = int(callback.data.split(":")[2])
    except (IndexError, ValueError):
        months = 1
    
    chat_id = callback.from_user.id
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await PaymentService.check_and_process_user_payments(chat_id, bot)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
        price_info = PaymentService.calculate_discounted_price(chat_id, months)
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa
        payment_data = PaymentService.create_subscription_payment(chat_id, months)
        
        if not payment_data:
            await callback.message.edit_text(
                "‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞*\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                parse_mode="Markdown",
                reply_markup=subscription_menu_keyboard()
            )
            await callback.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        PaymentService.save_active_payment(
            chat_id=chat_id,
            payment_id=payment_data["payment_id"],
            amount=float(payment_data["amount"]),
            months=months,
            description=payment_data["description"]
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        current_status, current_expires, _ = crud.get_user_subscription_status(chat_id)
        is_extension = (current_status == 'premium' and current_expires and 
                       datetime.fromisoformat(current_expires) > datetime.now())
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
        period_text = {
            1: "1 –º–µ—Å—è—Ü",
            3: "3 –º–µ—Å—è—Ü–∞",
            6: "6 –º–µ—Å—è—Ü–µ–≤", 
            12: "12 –º–µ—Å—è—Ü–µ–≤"
        }.get(months, f"{months} –º–µ—Å—è—Ü–µ–≤")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —ç—Ç–æ –∏–ª–∏ –Ω–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        if is_extension:
            current_days = (datetime.fromisoformat(current_expires) - datetime.now()).days
            message_text = f"üí≥ *–ü—Ä–æ–¥–ª–µ–Ω–∏–µ Premium –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"
        else:
            message_text = f"üí≥ *–û–ø–ª–∞—Ç–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"
            
        message_text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_text}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ –∏ —Å–∫–∏–¥–∫–µ
        if price_info["has_discount"]:
            message_text += f"üí∞ –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: <s>{price_info['base_price']:.0f} —Ä—É–±</s>\n"
            message_text += f"üî• –°–∫–∏–¥–∫–∞ ({price_info['discount_percent']}%): -{price_info['discount_amount']:.0f} —Ä—É–±\n"
            message_text += f"üí∏ –ö –æ–ø–ª–∞—Ç–µ: <b>{price_info['final_price']:.0f} —Ä—É–±</b>\n\n"
            
            # –ò –∏–∑–º–µ–Ω–∏—Ç–µ parse_mode –Ω–∞ HTML:
            await callback.message.edit_text(
                message_text,
                parse_mode="HTML",
                reply_markup=payment_keyboard(payment_data["confirmation_url"], months)
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ streak
            try:
                streak, _ = crud.get_user_streak(chat_id)
                message_text += f"üéØ –í–∞—à–∞ —Å–µ—Ä–∏—è: {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥\n\n"
            except Exception:
                pass
        else:
            message_text += f"üí∞ –°—É–º–º–∞: {price_info['final_price']:.0f} —Ä—É–±\n\n"
        
        if is_extension:
            message_text += f"‚è∞ –¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –µ—â–µ {current_days} –¥–Ω–µ–π\n\n"
            message_text += f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
        
        message_text += f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–û–ø–ª–∞—Ç–∏—Ç—å\" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.\n\n"
        message_text += f"‚ÑπÔ∏è *–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã*"
        
        await callback.message.edit_text(
            message_text,
            parse_mode="Markdown",
            reply_markup=payment_keyboard(payment_data["confirmation_url"], months)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error starting payment for user {chat_id}: {e}")
        await callback.message.edit_text(
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="Markdown",
            reply_markup=subscription_menu_keyboard()
        )
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

async def check_payment_status(callback: types.CallbackQuery, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤—Ä—É—á–Ω—É—é."""
    chat_id = callback.from_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –∏–∑ callback_data
    try:
        months = int(callback.data.split(":")[2])
    except (IndexError, ValueError):
        months = 1
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        processed_count = await PaymentService.check_and_process_user_payments(chat_id, bot)
        
        if processed_count > 0:
            await callback.answer("–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ! üéâ")
        else:
            await callback.message.edit_text(
                "üîÑ *–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞*\n\n"
                "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                parse_mode="Markdown",
                reply_markup=subscription_menu_keyboard()
            )
            await callback.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"Error checking payment status for user {chat_id}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

async def show_subscription_status(callback: types.CallbackQuery, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    chat_id = callback.from_user.id
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        await PaymentService.check_and_process_user_payments(chat_id, bot)
        
        status_text = format_subscription_status(chat_id)
        is_premium = crud.is_user_premium(chat_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–±–æ—Ä–∞—Ö
        if is_premium:
            status_text += "\n\nüìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–±–æ—Ä—ã:* –í—Å–µ –Ω–∞–±–æ—Ä—ã –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π"
        else:
            status_text += "\n\nüìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–±–æ—Ä—ã:* –¢–æ–ª—å–∫–æ Basic 1 –∏ Basic 2 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–º–∏—É–º –Ω–∞–±–æ—Ä–æ–≤
            user = crud.get_user(chat_id)
            if user:
                level = user[1]
                premium_sets = get_premium_sets_for_level(level)
                if premium_sets:
                    status_text += f"\n\nüîí *–ü—Ä–µ–º–∏—É–º –Ω–∞–±–æ—Ä—ã —É—Ä–æ–≤–Ω—è {level}:*\n"
                    for i, set_name in enumerate(premium_sets[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        status_text += f"‚Ä¢ {set_name}\n"
                    if len(premium_sets) > 3:
                        status_text += f"‚Ä¢ ... –∏ –µ—â–µ {len(premium_sets) - 3} –Ω–∞–±–æ—Ä–æ–≤"
        
        await callback.message.edit_text(
            status_text,
            parse_mode="Markdown",
            reply_markup=subscription_status_keyboard(is_premium)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing subscription status for user {chat_id}: {e}")
        await callback.message.edit_text(
            "‚ùå *–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞*\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="Markdown",
            reply_markup=subscription_menu_keyboard()
        )
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)

def register_subscription_handlers(dp: Dispatcher, bot: Bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏."""
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏
    dp.register_callback_query_handler(
        partial(show_subscription_menu, bot=bot),
        lambda c: c.data == "menu:subscription"
    )
    
    dp.register_callback_query_handler(
        partial(show_subscription_menu, bot=bot),
        lambda c: c.data == "subscription:menu"
    )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Premium
    dp.register_callback_query_handler(
        partial(show_premium_info, bot=bot),
        lambda c: c.data == "subscription:info"
    )
    
    # –í—ã–±–æ—Ä –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    dp.register_callback_query_handler(
        partial(show_subscription_plans, bot=bot),
        lambda c: c.data == "subscription:choose_period"
    )
    
    # –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–µ—Ä–∏–æ–¥–∞)
    dp.register_callback_query_handler(
        partial(start_payment, bot=bot),
        lambda c: c.data.startswith("subscription:buy:")
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–µ—Ä–∏–æ–¥–∞) 
    dp.register_callback_query_handler(
        partial(check_payment_status, bot=bot),
        lambda c: c.data.startswith("subscription:check_payment:")
    )
    
    # –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    dp.register_callback_query_handler(
        partial(show_subscription_status, bot=bot),
        lambda c: c.data == "subscription:status"
    )