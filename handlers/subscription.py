# handlers/subscription.py
import logging
from functools import partial

from aiogram import Bot, Dispatcher, types

from config import SUBSCRIPTION_PRICE
from database import crud
from keyboards.subscription import (
    subscription_menu_keyboard, 
    payment_keyboard, 
    subscription_status_keyboard,
    premium_info_keyboard
)
from services.payment import PaymentService
from utils.subscription_helpers import format_subscription_status, get_premium_sets_for_level

logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
active_payments = {}

async def show_subscription_menu(callback: types.CallbackQuery, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏."""
    await callback.message.edit_text(
        "üíé *Premium –ø–æ–¥–ø–∏—Å–∫–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=subscription_menu_keyboard()
    )
    await callback.answer()

async def show_premium_info(callback: types.CallbackQuery, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Premium –ø–æ–¥–ø–∏—Å–∫–µ."""
    info_text = (
        "üíé *Premium –ø–æ–¥–ø–∏—Å–∫–∞*\n\n"
        "üéØ *–ß—Ç–æ –¥–∞–µ—Ç Premium:*\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –Ω–∞–±–æ—Ä–∞–º —Å–ª–æ–≤\n"
        "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–±–æ—Ä—ã\n"
        "‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞–±–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è\n"
        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\n\n"
        "üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–±–æ—Ä—ã:*\n"
        "‚Ä¢ A1: –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –ï–¥–∞, –°–µ–º—å—è, –†–∞–±–æ—Ç–∞...\n"
        "‚Ä¢ A2: –ó–¥–æ—Ä–æ–≤—å–µ, –°–ø–æ—Ä—Ç, –•–æ–±–±–∏, –ü–æ–∫—É–ø–∫–∏...\n"
        "‚Ä¢ B1: –ë–∏–∑–Ω–µ—Å, –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –ö—É–ª—å—Ç—É—Ä–∞...\n"
        "‚Ä¢ B2: –ù–∞—É–∫–∞, –ò—Å–∫—É—Å—Å—Ç–≤–æ, –ü–æ–ª–∏—Ç–∏–∫–∞...\n"
        "‚Ä¢ C1: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞, –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π...\n"
        "‚Ä¢ C2: –ò–¥–∏–æ–º—ã, –°–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —è–∑—ã–∫...\n\n"
        f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {SUBSCRIPTION_PRICE:.0f} —Ä—É–±/–º–µ—Å—è—Ü\n\n"
        "üîí *–ë–µ–∑ Premium* –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞–±–æ—Ä—ã \"Basic 1\" –∏ \"Basic 2\" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è."
    )
    
    await callback.message.edit_text(
        info_text,
        parse_mode="Markdown",
        reply_markup=premium_info_keyboard()
    )
    await callback.answer()

async def start_payment(callback: types.CallbackQuery, bot: Bot):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã Premium –ø–æ–¥–ø–∏—Å–∫–∏."""
    chat_id = callback.from_user.id
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa
        payment_data = PaymentService.create_subscription_payment(chat_id)
        
        if not payment_data:
            await callback.message.edit_text(
                "‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞*\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                parse_mode="Markdown",
                reply_markup=subscription_menu_keyboard()
            )
            await callback.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        active_payments[chat_id] = {
            "payment_id": payment_data["payment_id"],
            "amount": payment_data["amount"],
            "created_at": payment_data.get("created_at")
        }
        
        await callback.message.edit_text(
            f"üí≥ *–û–ø–ª–∞—Ç–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"
            f"üí∞ –°—É–º–º–∞: {payment_data['amount']} —Ä—É–±\n"
            f"üìÖ –°—Ä–æ–∫: 30 –¥–Ω–µ–π\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–û–ø–ª–∞—Ç–∏—Ç—å\" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\".",
            parse_mode="Markdown",
            reply_markup=payment_keyboard(payment_data["confirmation_url"])
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error starting payment for user {chat_id}: {e}")
        await callback.message.edit_text(
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="Markdown",
            reply_markup=subscription_menu_keyboard()
        )
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

async def check_payment_status(callback: types.CallbackQuery, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞."""
    chat_id = callback.from_user.id
    
    if chat_id not in active_payments:
        await callback.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    try:
        payment_id = active_payments[chat_id]["payment_id"]
        payment_status = PaymentService.check_payment_status(payment_id)
        
        if not payment_status:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
            return
        
        if payment_status["status"] == "succeeded" and payment_status["paid"]:
            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            expiry_date = PaymentService.calculate_subscription_expiry()
            crud.update_user_subscription(
                chat_id, 
                "premium", 
                expiry_date, 
                payment_id
            )
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
            del active_payments[chat_id]
            
            await callback.message.edit_text(
                "üéâ *–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"
                "üíé Premium –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π!\n\n"
                "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –Ω–∞–±–æ—Ä–∞–º —Å–ª–æ–≤. "
                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ù–∞–±–æ—Ä—ã —Å–ª–æ–≤, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.",
                parse_mode="Markdown",
                reply_markup=subscription_menu_keyboard()
            )
            await callback.answer("Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! üéâ")
            
        elif payment_status["status"] == "pending":
            await callback.answer("–ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.", show_alert=True)
            
        elif payment_status["status"] == "canceled":
            await callback.answer("–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)
            del active_payments[chat_id]
            
        else:
            await callback.answer(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {payment_status['status']}", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error checking payment status for user {chat_id}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

async def show_subscription_status(callback: types.CallbackQuery, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    chat_id = callback.from_user.id
    
    try:
        status_text = format_subscription_status(chat_id)
        is_premium = crud.is_user_premium(chat_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–±–æ—Ä–∞—Ö
        if is_premium:
            status_text += "\n\nüìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–±–æ—Ä—ã:* –í—Å–µ –Ω–∞–±–æ—Ä—ã –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π"
        else:
            status_text += "\n\nüìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–±–æ—Ä—ã:* –¢–æ–ª—å–∫–æ Basic 1 –∏ Basic 2 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–º–∏—É–º –Ω–∞–±–æ—Ä–æ–≤
            user = crud.get_user(chat_id)
            if user:
                level = user[1]
                premium_sets = get_premium_sets_for_level(level)
                if premium_sets:
                    status_text += f"\n\nüîí *–ü—Ä–µ–º–∏—É–º –Ω–∞–±–æ—Ä—ã —É—Ä–æ–≤–Ω—è {level}:*\n"
                    for i, set_name in enumerate(premium_sets[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        status_text += f"‚Ä¢ {set_name}\n"
                    if len(premium_sets) > 3:
                        status_text += f"‚Ä¢ ... –∏ –µ—â–µ {len(premium_sets) - 3} –Ω–∞–±–æ—Ä–æ–≤"
        
        await callback.message.edit_text(
            status_text,
            parse_mode="Markdown",
            reply_markup=subscription_status_keyboard(is_premium)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing subscription status for user {chat_id}: {e}")
        await callback.message.edit_text(
            "‚ùå *–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞*\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="Markdown",
            reply_markup=subscription_menu_keyboard()
        )
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)

def register_subscription_handlers(dp: Dispatcher, bot: Bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏."""
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏
    dp.register_callback_query_handler(
        partial(show_subscription_menu, bot=bot),
        lambda c: c.data == "menu:subscription"
    )
    
    dp.register_callback_query_handler(
        partial(show_subscription_menu, bot=bot),
        lambda c: c.data == "subscription:menu"
    )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Premium
    dp.register_callback_query_handler(
        partial(show_premium_info, bot=bot),
        lambda c: c.data == "subscription:info"
    )
    
    # –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    dp.register_callback_query_handler(
        partial(start_payment, bot=bot),
        lambda c: c.data == "subscription:buy"
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    dp.register_callback_query_handler(
        partial(check_payment_status, bot=bot),
        lambda c: c.data == "subscription:check_payment"
    )
    
    # –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    dp.register_callback_query_handler(
        partial(show_subscription_status, bot=bot),
        lambda c: c.data == "subscription:status"
    )