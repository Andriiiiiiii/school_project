# handlers/onboarding.py
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from database import crud
from config import REMINDER_START, DURATION_HOURS, DEFAULT_SETS
from utils.helpers import get_daily_words_for_user, reset_daily_words_cache
from keyboards.main_menu import main_menu_keyboard
from keyboards.submenus import words_day_keyboard
from utils.visual_helpers import format_daily_words_message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
# {chat_id: {"step": "level", "level": "A1", "words": 5}}
onboarding_states = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —à–∞–≥–æ–≤ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
def level_keyboard():
    kb = InlineKeyboardMarkup(row_width=3)
    kb.add(
        InlineKeyboardButton("A1", callback_data="onboarding:level:A1"),
        InlineKeyboardButton("A2", callback_data="onboarding:level:A2"),
        InlineKeyboardButton("B1", callback_data="onboarding:level:B1")
    )
    kb.add(
        InlineKeyboardButton("B2", callback_data="onboarding:level:B2"),
        InlineKeyboardButton("C1", callback_data="onboarding:level:C1"),
        InlineKeyboardButton("C2", callback_data="onboarding:level:C2")
    )
    return kb

def words_per_day_keyboard():
    kb = InlineKeyboardMarkup(row_width=5)
    kb.add(
        InlineKeyboardButton("3", callback_data="onboarding:words:3"),
        InlineKeyboardButton("5", callback_data="onboarding:words:5"),
        InlineKeyboardButton("7", callback_data="onboarding:words:7"),
        InlineKeyboardButton("10", callback_data="onboarding:words:10"),
        InlineKeyboardButton("15", callback_data="onboarding:words:15")
    )
    return kb

def repetitions_keyboard():
    kb = InlineKeyboardMarkup(row_width=5)
    kb.add(
        InlineKeyboardButton("1", callback_data="onboarding:reps:1"),
        InlineKeyboardButton("2", callback_data="onboarding:reps:2"),
        InlineKeyboardButton("3", callback_data="onboarding:reps:3"),
        InlineKeyboardButton("4", callback_data="onboarding:reps:4"),
        InlineKeyboardButton("5", callback_data="onboarding:reps:5")
    )
    return kb

# –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ cmd_start)

async def start_onboarding(message, bot):
    chat_id = message.chat.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    onboarding_states[chat_id] = {"step": "level"}
    
    await message.answer(
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ!*\n\n"
        "üéØ *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
        "‚Ä¢ –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤\n"
        "‚Ä¢ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–±–æ—Ä–∞ (~50 —Å–ª–æ–≤ –ø–æ —Ç–µ–º–µ)\n"
        "‚Ä¢ –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç—ã ‚Üí —Å–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å\n"
        "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç —Å–ª–æ–≤–∞ –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è\n\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞ 3 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞!\n\n"
        "üìä *–®–∞–≥ 1 –∏–∑ 3:* –ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ?",
        parse_mode="Markdown",
        reply_markup=level_keyboard()
    )
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
async def process_onboarding(callback: types.CallbackQuery, bot: Bot):
    chat_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    if chat_id not in onboarding_states:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.")
        return
    
    state = onboarding_states[chat_id]
    data_parts = callback.data.split(":")
    
    if len(data_parts) != 3:
        logger.warning(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback.data}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.")
        return
    
    action_type = data_parts[1]  # level, words, reps
    value = data_parts[2]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
    if action_type == "level" and state["step"] == "level":
        level = value
        state["level"] = level
        state["step"] = "words"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ –ë–î
        crud.update_user_level(chat_id, level)
        
        # –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–±–æ—Ä —Å–ª–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
        default_set = DEFAULT_SETS.get(level)
        if default_set:
            crud.update_user_chosen_set(chat_id, default_set)
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            try:
                from handlers.settings import user_set_selection
                user_set_selection[chat_id] = default_set
            except (ImportError, AttributeError):
                pass
        
        await callback.message.edit_text(
            f"–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å {level}.\n\n"
            "–°–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ? (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 5-10)",
            reply_markup=words_per_day_keyboard()
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
    elif action_type == "words" and state["step"] == "words":
        words = int(value)
        state["words"] = words
        state["step"] = "reps"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –ë–î
        crud.update_user_words_per_day(chat_id, words)
        
        await callback.message.edit_text(
            f"–í—ã –±—É–¥–µ—Ç–µ –∏–∑—É—á–∞—Ç—å {words} –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –≤ –¥–µ–Ω—å.\n\n"
            "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –≤–∏–¥–µ—Ç—å –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è?",
            reply_markup=repetitions_keyboard()
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    elif action_type == "reps" and state["step"] == "reps":
        reps = int(value)
        state["reps"] = reps
        state["step"] = "finished"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤ –ë–î
        crud.update_user_notifications(chat_id, reps)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        level = state["level"]
        words = state["words"]
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à —Å–ª–æ–≤ –¥–Ω—è
        reset_daily_words_cache(chat_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"–û—Ç–ª–∏—á–Ω–æ! –í—Å—ë –≥–æ—Ç–æ–≤–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è.\n\n"
            f"–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {level}\n"
            f"‚Ä¢ –°–ª–æ–≤ –≤ –¥–µ–Ω—å: {words}\n"
            f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {reps}\n\n"
            "–ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è..."
        )
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        onboarding_states.pop(chat_id, None)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞
        await send_first_words(chat_id, level, words, reps, bot)
    
    else:
        logger.warning(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —à–∞–≥–∞ –∏ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è: {state['step']} != {action_type}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.")
    
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–≤—ã—Ö —Å–ª–æ–≤

async def send_first_words(chat_id, level, words_count, repetitions, bot):
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞ –¥–Ω—è
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –Ω–∞–±–æ—Ä–µ —Å–ª–æ–≤
        user = crud.get_user(chat_id)
        chosen_set = user[6] if user and len(user) > 6 else DEFAULT_SETS.get(level)
        
        result = get_daily_words_for_user(
            chat_id, level, words_count, repetitions,
            first_time=REMINDER_START, duration_hours=DURATION_HOURS,
            force_reset=True
        )
        
        if result:
            messages, times = result
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –Ω–∞–±–æ—Ä–µ
            try:
                from pathlib import Path
                set_file = Path(LEVELS_DIR) / level / f"{chosen_set}.txt"
                if set_file.exists():
                    with open(set_file, 'r', encoding='utf-8') as f:
                        total_words = len([line for line in f if line.strip()])
                else:
                    total_words = 50  # –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            except:
                total_words = 50
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–±–æ—Ä–µ
            header = (
                f"üìö *–í–∞—à–∏ –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*\n"
                f"–ò–∑ –Ω–∞–±–æ—Ä–∞: *¬´{chosen_set}¬ª* (~{total_words} —Å–ª–æ–≤)\n\n"
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
            from utils.visual_helpers import truncate_daily_words_message
            words_message = header + format_daily_words_message(messages, times)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if len(words_message) > 4000:
                # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
                unique_words = []
                if messages:
                    for msg in messages:
                        if not (msg.startswith("üéì") or msg.startswith("‚ö†Ô∏è")):
                            unique_words.append(msg)
                
                words_message = truncate_daily_words_message(
                    words_message, unique_words, words_count, repetitions,
                    chosen_set, total_words
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
            await bot.send_message(
                chat_id,
                words_message,
                parse_mode="Markdown",
                reply_markup=words_day_keyboard()
            )
            
            # –û–±—ä—è—Å–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ç–µ—Å—Ç–∞
            await bot.send_message(
                chat_id,
                "‚úÖ *–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç —á—Ç–æ –¥–∞–ª—å—à–µ:*\n\n"
                f"üìå *–°–ª–æ–≤–∞ –¥–Ω—è* ‚Äî –≤–∞—à–∏ —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–±–æ—Ä–∞ ¬´{chosen_set}¬ª\n"
                "‚Ä¢ –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –∫–∞–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
                "üìù *–¢–µ—Å—Ç –¥–Ω—è* ‚Äî —Ç–µ—Å—Ç –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º —Å–ª–æ–≤–∞–º\n" 
                "‚Ä¢ –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –µ–≥–æ –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è\n"
                "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã ‚Üí —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤—è—Ç—Å—è –≤ –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å\n"
                "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ‚Üí –ø–æ–≤—Ç–æ—Ä—è—Ç—Å—è –∑–∞–≤—Ç—Ä–∞\n\n"
                "üí° *–°–æ–≤–µ—Ç:* –ù–∞—á–Ω–∏—Ç–µ —Å –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤ –≤—ã—à–µ, –∞ –≤–µ—á–µ—Ä–æ–º –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –¥–Ω—è!",
                parse_mode="Markdown",
                reply_markup=main_menu_keyboard()
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
            await bot.send_message(
                chat_id,
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏.",
                reply_markup=main_menu_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–≤—ã—Ö —Å–ª–æ–≤: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await bot.send_message(
            chat_id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_keyboard()
        )

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_onboarding_handlers(dp: Dispatcher, bot: Bot):
    dp.register_callback_query_handler(
        lambda c: process_onboarding(c, bot),
        lambda c: c.data.startswith("onboarding:"),
    )