# fix_debug_test.py
import sys
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv

load_dotenv()
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_midnight_reset_with_reload():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É —Å–±—Ä–æ—Å–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π –º–æ–¥—É–ª–µ–π."""
    try:
        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –ú–û–î–£–õ–ï–ô
        import importlib
        
        # –£–¥–∞–ª—è–µ–º –º–æ–¥—É–ª–∏ –∏–∑ –∫—ç—à–∞
        modules_to_reload = [
            'services.scheduler',
            'database.crud',
            'utils.helpers'
        ]
        
        for module_name in modules_to_reload:
            if module_name in sys.modules:
                print(f"üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å {module_name}")
                importlib.reload(sys.modules[module_name])
        
        # –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
        from database import crud
        from services.scheduler import process_daily_reset
        
        test_id = 555555
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            crud.add_user(test_id)
        except:
            pass
        
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –û–ë–ù–û–í–õ–ï–ù–ù–û–ô –ª–æ–≥–∏–∫–∏ —Å–±—Ä–æ—Å–∞...")
        
        # –¢–µ—Å—Ç 1: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º streak –Ω–∞ –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É
        yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
        crud.update_user_streak(test_id, 5, yesterday)
        
        streak_before, date_before = crud.get_user_streak(test_id)
        print(f"üìÖ –î–û —Å–±—Ä–æ—Å–∞: streak={streak_before}, –¥–∞—Ç–∞={date_before} (–≤—á–µ—Ä–∞)")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É–Ω–æ—á–Ω—ã–π —Å–±—Ä–æ—Å
        process_daily_reset(test_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        streak_after, date_after = crud.get_user_streak(test_id)
        print(f"üåÖ –ü–û–°–õ–ï —Å–±—Ä–æ—Å–∞: streak={streak_after}, –¥–∞—Ç–∞={date_after}")
        
        if streak_after == 5:
            print("‚úÖ –¢–µ—Å—Ç 1 –ü–†–û–ô–î–ï–ù: Streak –ù–ï —Å–±—Ä–æ—Å–∏–ª—Å—è (—Ç–µ—Å—Ç –±—ã–ª –≤—á–µ—Ä–∞)")
        else:
            print(f"‚ùå –¢–µ—Å—Ç 1 –ü–†–û–í–ê–õ–ï–ù: streak={streak_after}, –æ–∂–∏–¥–∞–ª–æ—Å—å 5")
            return False
        
        # –¢–µ—Å—Ç 2: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º streak –Ω–∞ –ø–æ–∑–∞–≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É  
        day_before_yesterday = (datetime.now() - timedelta(days=2)).strftime("%Y-%m-%d")
        crud.update_user_streak(test_id, 7, day_before_yesterday)
        
        streak_before2, date_before2 = crud.get_user_streak(test_id)
        print(f"üìÖ –î–û —Å–±—Ä–æ—Å–∞: streak={streak_before2}, –¥–∞—Ç–∞={date_before2} (–ø–æ–∑–∞–≤—á–µ—Ä–∞)")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É–Ω–æ—á–Ω—ã–π —Å–±—Ä–æ—Å
        process_daily_reset(test_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        streak_after2, date_after2 = crud.get_user_streak(test_id)
        print(f"üåÖ –ü–û–°–õ–ï —Å–±—Ä–æ—Å–∞: streak={streak_after2}, –¥–∞—Ç–∞={date_after2}")
        
        if streak_after2 == 0:
            print("‚úÖ –¢–µ—Å—Ç 2 –ü–†–û–ô–î–ï–ù: Streak –°–ë–†–û–°–ò–õ–°–Ø (—Ç–µ—Å—Ç –±—ã–ª –ø–æ–∑–∞–≤—á–µ—Ä–∞)")
            return True
        else:
            print(f"‚ùå –¢–µ—Å—Ç 2 –ü–†–û–í–ê–õ–ï–ù: streak={streak_after2}, –æ–∂–∏–¥–∞–ª–æ—Å—å 0")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def fix_crud_reset_function():
    """–¢–∞–∫–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é reset_user_streak –≤ database/crud.py"""
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open('database/crud.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        if '–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è' in content:
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è reset_user_streak —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return True
        
        # –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        old_function_start = 'def reset_user_streak(chat_id: int):'
        
        if old_function_start in content:
            print("üìù –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é reset_user_streak...")
            
            # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            new_function = '''def reset_user_streak(chat_id: int):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –¥–æ 0. –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è."""
    try:
        logger.debug(f"Resetting streak for user {chat_id}")
        update_user_streak(chat_id, 0, None)
        logger.info(f"Reset streak for user {chat_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–±—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
        verify_streak, verify_date = get_user_streak(chat_id)
        if verify_streak != 0:
            logger.error(f"Streak reset verification failed for user {chat_id}. Expected: 0, Got: {verify_streak}")
        else:
            logger.debug(f"Streak reset verified for user {chat_id}: {verify_streak}")
            
    except Exception as e:
        logger.error(f"Error resetting streak for user {chat_id}: {e}")'''
        
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Å—Ç–∞—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            lines = content.split('\n')
            start_idx = None
            end_idx = None
            
            for i, line in enumerate(lines):
                if line.strip().startswith('def reset_user_streak(chat_id: int):'):
                    start_idx = i
                    break
            
            if start_idx is not None:
                # –ò—â–µ–º –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏
                for i in range(start_idx + 1, len(lines)):
                    if lines[i].strip() and not lines[i].startswith('    ') and not lines[i].startswith('\t'):
                        if lines[i].strip().startswith('def ') or lines[i].strip().startswith('class '):
                            end_idx = i
                            break
                
                if end_idx is None:
                    end_idx = len(lines)
                
                # –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                new_lines = lines[:start_idx] + new_function.split('\n') + lines[end_idx:]
                new_content = '\n'.join(new_lines)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
                with open('database/crud.py', 'w', encoding='utf-8') as f:
                    f.write(new_content)
                
                print("‚úÖ –§—É–Ω–∫—Ü–∏—è reset_user_streak –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ database/crud.py")
                return True
        
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è database/crud.py: {e}")
        return False

if __name__ == "__main__":
    print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–û–ô –ú–û–î–£–õ–ï–ô")
    print("=" * 50)
    
    # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ crud.py
    fix_crud_reset_function()
    
    # –ó–∞—Ç–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π
    if test_midnight_reset_with_reload():
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("\n‚ùå –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")