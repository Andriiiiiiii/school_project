# debug_streak_system.py
import sys
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def check_database_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î –¥–ª—è —Å–∏—Å—Ç–µ–º—ã streak."""
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    try:
        from database.db import db_manager
        
        with db_manager.get_cursor() as cursor:
            cursor.execute("PRAGMA table_info(users)")
            columns = cursor.fetchall()
            
            print("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:")
            for col in columns:
                print(f"   {col[1]} - {col[2]} (default: {col[4]})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            column_names = [col[1] for col in columns]
            required = ['days_streak', 'last_test_date']
            missing = [col for col in required if col not in column_names]
            
            if missing:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã: {missing}")
                return False
            else:
                print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                return True
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        return False

def test_crud_operations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è streak."""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CRUD –û–ü–ï–†–ê–¶–ò–ô")
    print("=" * 50)
    
    try:
        from database import crud
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        test_id = 999999
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            with crud.db_manager.transaction() as tx:
                tx.execute("DELETE FROM users WHERE chat_id = ?", (test_id,))
                tx.execute("DELETE FROM dictionary WHERE chat_id = ?", (test_id,))
                tx.execute("DELETE FROM learned_words WHERE chat_id = ?", (test_id,))
        except:
            pass
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        crud.add_user(test_id)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {test_id}")
        
        # –¢–µ—Å—Ç 1: –ù–∞—á–∞–ª—å–Ω—ã–π streak
        streak, date = crud.get_user_streak(test_id)
        print(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–π streak: {streak}, –¥–∞—Ç–∞: {date}")
        assert streak == 0, f"–ù–∞—á–∞–ª—å–Ω—ã–π streak –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0, –ø–æ–ª—É—á–µ–Ω {streak}"
        
        # –¢–µ—Å—Ç 2: –ü–µ—Ä–≤—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç
        new_streak = crud.increment_user_streak(test_id)
        print(f"üìà –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞: {new_streak}")
        assert new_streak == 1, f"–ü–æ—Å–ª–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1, –ø–æ–ª—É—á–µ–Ω–æ {new_streak}"
        
        # –¢–µ—Å—Ç 3: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å
        repeat_streak = crud.increment_user_streak(test_id)
        print(f"üîÑ –ü–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞: {repeat_streak}")
        assert repeat_streak == 1, f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è 1, –ø–æ–ª—É—á–µ–Ω–æ {repeat_streak}"
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã
        final_streak, final_date = crud.get_user_streak(test_id)
        today = datetime.now().strftime("%Y-%m-%d")
        print(f"üìÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: streak={final_streak}, –¥–∞—Ç–∞={final_date}")
        assert final_date == today, f"–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å {today}, –ø–æ–ª—É—á–µ–Ω–∞ {final_date}"
        
        # –¢–µ—Å—Ç 5: –°–±—Ä–æ—Å streak
        crud.reset_user_streak(test_id)
        reset_streak, reset_date = crud.get_user_streak(test_id)
        print(f"üîÑ –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞: streak={reset_streak}, –¥–∞—Ç–∞={reset_date}")
        assert reset_streak == 0, f"–ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0, –ø–æ–ª—É—á–µ–Ω–æ {reset_streak}"
        
        print("‚úÖ –í—Å–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ CRUD –æ–ø–µ—Ä–∞—Ü–∏—è—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_subscription_discounts():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Å–∫–∏–¥–æ–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏."""
    print("\nüí∞ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –°–ö–ò–î–û–ö")
    print("=" * 50)
    
    try:
        from database import crud
        from services.payment import PaymentService
        
        test_id = 999999
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        try:
            crud.add_user(test_id)
        except:
            pass
        
        # –¢–µ—Å—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        crud.update_user_streak(test_id, 15, datetime.now().strftime("%Y-%m-%d"))
        discount_free = crud.calculate_streak_discount(test_id)
        print(f"üÜì –°–∫–∏–¥–∫–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (streak=15): {discount_free}%")
        assert discount_free == 0, f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∞—Ç—å —Å–∫–∏–¥–∫—É"
        
        # –î–µ–ª–∞–µ–º –ø—Ä–µ–º–∏—É–º
        future = (datetime.now() + timedelta(days=30)).isoformat()
        crud.update_user_subscription(test_id, "premium", future, "test")
        
        # –¢–µ—Å—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        discount_15 = crud.calculate_streak_discount(test_id)
        print(f"üíé –°–∫–∏–¥–∫–∞ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (streak=15): {discount_15}%")
        assert discount_15 == 15, f"–°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 15%, –ø–æ–ª—É—á–µ–Ω–∞ {discount_15}%"
        
        # –¢–µ—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–∏
        crud.update_user_streak(test_id, 35, datetime.now().strftime("%Y-%m-%d"))
        discount_35 = crud.calculate_streak_discount(test_id)
        print(f"üíé –°–∫–∏–¥–∫–∞ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (streak=35): {discount_35}%")
        assert discount_35 == 30, f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 30%, –ø–æ–ª—É—á–µ–Ω–∞ {discount_35}%"
        
        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω
        price_info = PaymentService.calculate_discounted_price(test_id, 1)
        print(f"üí∏ –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã: –±–∞–∑–æ–≤–∞—è={price_info['base_price']}, —Ñ–∏–Ω–∞–ª—å–Ω–∞—è={price_info['final_price']}, —Å–∫–∏–¥–∫–∞={price_info['discount_percent']}%")
        
        # –û—á–∏—Å—Ç–∫–∞
        crud.update_user_subscription(test_id, "free")
        crud.reset_user_streak(test_id)
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–∫–∏–¥–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ —Å–∫–∏–¥–æ–∫: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_midnight_reset_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É —Å–±—Ä–æ—Å–∞ –≤ –ø–æ–ª–Ω–æ—á—å."""
    print("\nüåô –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–ö–ò –ü–û–õ–£–ù–û–ß–ù–û–ì–û –°–ë–†–û–°–ê")
    print("=" * 50)
    
    try:
        from database import crud
        from services.scheduler import process_daily_reset
        
        test_id = 999999
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        try:
            crud.add_user(test_id)
        except:
            pass
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º streak –Ω–∞ –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É
        yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
        crud.update_user_streak(test_id, 5, yesterday)
        
        print(f"üìÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω streak=5 –Ω–∞ –¥–∞—Ç—É {yesterday}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É–Ω–æ—á–Ω—ã–π —Å–±—Ä–æ—Å
        process_daily_reset(test_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        new_streak, new_date = crud.get_user_streak(test_id)
        print(f"üåÖ –ü–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞: streak={new_streak}, –¥–∞—Ç–∞={new_date}")
        
        # Streak –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–±—Ä–æ—Å–∏—Ç—å—Å—è, —Ç–∞–∫ –∫–∞–∫ —Ç–µ—Å—Ç –±—ã–ª –≤—á–µ—Ä–∞
        assert new_streak == 5, f"Streak –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–±—Ä–æ—Å–∏—Ç—å—Å—è –ø—Ä–∏ —Ç–µ—Å—Ç–µ –≤—á–µ—Ä–∞"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±—Ä–æ—Å –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –¥–Ω—è
        day_before_yesterday = (datetime.now() - timedelta(days=2)).strftime("%Y-%m-%d")
        crud.update_user_streak(test_id, 7, day_before_yesterday)
        
        print(f"üìÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω streak=7 –Ω–∞ –¥–∞—Ç—É {day_before_yesterday} (–ø–æ–∑–∞–≤—á–µ—Ä–∞)")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É–Ω–æ—á–Ω—ã–π —Å–±—Ä–æ—Å
        process_daily_reset(test_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        reset_streak, reset_date = crud.get_user_streak(test_id)
        print(f"üåÖ –ü–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞: streak={reset_streak}, –¥–∞—Ç–∞={reset_date}")
        
        # Streak –¥–æ–ª–∂–µ–Ω —Å–±—Ä–æ—Å–∏—Ç—å—Å—è, —Ç–∞–∫ –∫–∞–∫ —Ç–µ—Å—Ç –±—ã–ª –ø–æ–∑–∞–≤—á–µ—Ä–∞
        assert reset_streak == 0, f"Streak –¥–æ–ª–∂–µ–Ω —Å–±—Ä–æ—Å–∏—Ç—å—Å—è –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –¥–Ω—è"
        
        print("‚úÖ –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É–Ω–æ—á–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ –ø–æ–ª—É–Ω–æ—á–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def check_scheduler_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    print("\n‚è∞ –ü–†–û–í–ï–†–ö–ê –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        from config import PRODUCTION_MODE, SERVER_TIMEZONE
        print(f"üîß –†–µ–∂–∏–º: {'PRODUCTION' if PRODUCTION_MODE else 'DEVELOPMENT'}")
        print(f"üåç –°–µ—Ä–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {SERVER_TIMEZONE}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        from services.scheduler import process_daily_reset, scheduler_job
        print("‚úÖ –§—É–Ω–∫—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        from datetime import datetime
        from zoneinfo import ZoneInfo
        
        now_server = datetime.now(tz=ZoneInfo(SERVER_TIMEZONE))
        print(f"üïí –¢–µ–∫—É—â–µ–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {now_server.strftime('%Y-%m-%d %H:%M:%S %Z')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        moscow_time = now_server.astimezone(ZoneInfo("Europe/Moscow"))
        print(f"üïí –í—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ: {moscow_time.strftime('%Y-%m-%d %H:%M:%S %Z')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    print("üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –î–ù–ï–ô –ü–û–î–†–Ø–î")
    print("=" * 60)
    
    all_tests_passed = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î
    if not check_database_structure():
        all_tests_passed = False
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ë–î")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python fix_streak_db.py")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
    if not test_crud_operations():
        all_tests_passed = False
        print("\n‚ùå –û–®–ò–ë–ö–ê: –ü—Ä–æ–±–ª–µ–º—ã —Å CRUD –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –°–∏—Å—Ç–µ–º–∞ —Å–∫–∏–¥–æ–∫
    if not test_subscription_discounts():
        all_tests_passed = False
        print("\n‚ùå –û–®–ò–ë–ö–ê: –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π —Å–∫–∏–¥–æ–∫")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É–Ω–æ—á–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
    if not test_midnight_reset_logic():
        all_tests_passed = False
        print("\n‚ùå –û–®–ò–ë–ö–ê: –ü—Ä–æ–±–ª–µ–º—ã —Å –ª–æ–≥–∏–∫–æ–π –ø–æ–ª—É–Ω–æ—á–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    if not check_scheduler_status():
        all_tests_passed = False
        print("\n‚ùå –û–®–ò–ë–ö–ê: –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º")
    
    print("\n" + "=" * 60)
    if all_tests_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("   1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ –Ω–∞ –æ—à–∏–±–∫–∏")
        print("   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –¥–Ω—è")
    else:
        print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´! –°–∏—Å—Ç–µ–º–∞ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python fix_streak_db.py")
        print("   2. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ handlers/quiz.py")
        print("   3. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ services/scheduler.py")
        print("   4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
    
    return all_tests_passed

if __name__ == "__main__":
    main()