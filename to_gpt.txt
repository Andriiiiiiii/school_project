–°–æ–¥–µ—Ä–∂–∏–º–æ–µ Python —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ to_gpt.txt
 import BOT_TOKEN
from services.scheduler import start_scheduler
from handlers import register_handlers
import asyncio

import pickle
import os
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from config import SERVER_TIMEZONE

# Constants
LAST_RUN_FILE = "last_scheduler_run.pickle"
MAX_BACKFILL_HOURS = 3  # Maximum hours to look back for missed notifications

# Modified on_startup function in bot.py

async def on_startup(dp):
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ —Ñ–∞–π–ª–æ–≤
    from config import LEVELS_DIR, DEFAULT_SETS
    import os
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if not os.path.exists(LEVELS_DIR):
        logger.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Ä–æ–≤–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {LEVELS_DIR}")
        os.makedirs(LEVELS_DIR, exist_ok=True)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Ä–æ–≤–Ω–µ–π: {LEVELS_DIR}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
    for level in ["A1", "A2", "B1", "B2", "C1", "C2"]:
        level_dir = os.path.join(LEVELS_DIR, level)
        if not os.path.exists(level_dir):
            logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —É—Ä–æ–≤–Ω—è {level} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {level_dir}")
            os.makedirs(level_dir, exist_ok=True)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —É—Ä–æ–≤–Ω—è {level}: {level_dir}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–µ—Ç–∞
        default_set = DEFAULT_SETS.get(level)
        if default_set:
            set_path = os.path.join(level_dir, f"{default_set}.txt")
            if not os.path.exists(set_path):
                logger.warning(f"–§–∞–π–ª —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–µ—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è {level} –Ω–µ –Ω–∞–π–¥–µ–Ω: {set_path}")

    loop = asyncio.get_running_loop()
    start_scheduler(bot, loop)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    from handlers.commands import set_commands
    await set_commands(bot)
    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await check_missed_notifications(bot)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—É—á–µ–Ω–∏—è
    try:
        from alter_db_learning import add_learning_columns
        add_learning_columns()
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—É—á–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—É—á–µ–Ω–∏—è: {e}")
        # –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            with db_manager.get_cursor() as cursor:
                cursor.execute("PRAGMA table_info(users)")
                result = cursor.fetchall()
                columns = [row[1] for row in result]
                
                if 'test_words_count' not in columns:
                    cursor.execute("ALTER TABLE users ADD COLUMN test_words_count INTEGER DEFAULT 5")
                    logger.info("–°—Ç–æ–ª–±–µ—Ü 'test_words_count' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
                    
                if 'memorize_words_count' not in columns:
                    cursor.execute("ALTER TABLE users ADD COLUMN memorize_words_count INTEGER DEFAULT 5")
                    logger.info("–°—Ç–æ–ª–±–µ—Ü 'memorize_words_count' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        except Exception as e2:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–æ–≤: {e2}")
    
# New function to check for missed notifications

async def check_missed_notifications(bot):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –ø—Ä–æ—Å—Ç–æ—è.
    """
    logger.info("Checking for missed notifications...")
    
    # Get current server time
    now_server = datetime.now(tz=ZoneInfo(SERVER_TIMEZONE))
    
    # Get last run time
    last_run_time = get_last_run_time()
    if not last_run_time:
        # If no previous run record, don't try to backfill
        save_last_run_time(now_server)
        return
    
    # Limit backfill to prevent spamming users after long downtimes
    earliest_check_time = now_server - timedelta(hours=MAX_BACKFILL_HOURS)
    if last_run_time < earliest_check_time:
        last_run_time = earliest_check_time
        
    try:
        # Get all users
        users = crud.get_all_users()
        processed_users = 0
        recovered_notifications = 0
        
        for user in users:
            try:
                chat_id = user[0]
                level = user[1]
                words_count = user[2]
                repetitions = user[3]
                timezone = user[5] if len(user) > 5 and user[5] else "Europe/Moscow"
                
                # Get local time for user
                try:
                    now_local = now_server.astimezone(ZoneInfo(timezone))
                    last_run_local = last_run_time.astimezone(ZoneInfo(timezone))
                except Exception:
                    logger.error(f"Invalid timezone {timezone} for user {chat_id}")
                    now_local = now_server.astimezone(ZoneInfo("Europe/Moscow"))
                    last_run_local = last_run_time.astimezone(ZoneInfo("Europe/Moscow"))
                
                # Get daily words and notification times
                result = get_daily_words_for_user(chat_id, level, words_count, repetitions,
                                               first_time=REMINDER_START, duration_hours=DURATION_HOURS)
                if result is None:
                    continue
                
                messages, times = result
                local_today = now_local.strftime("%Y-%m-%d")
                
                # Check if any notifications were missed
                missed_notifications = []
                for i, time_str in enumerate(times):
                    # Convert time string to datetime object
                    try:
                        notification_time = datetime.strptime(f"{local_today} {time_str}", 
                                                          "%Y-%m-%d %H:%M").replace(tzinfo=now_local.tzinfo)
                        
                        # If notification was scheduled between last run and now
                        if last_run_local < notification_time < now_local:
                            message_text = messages[i] if i < len(messages) else "(–Ω–µ—Ç —Å–ª–æ–≤)"
                            missed_notifications.append((time_str, message_text))
                    except ValueError as e:
                        logger.error(f"Error parsing notification time {time_str} for user {chat_id}: {e}")
                        continue
                
                # If there are missed notifications, send them in a consolidated message
                if missed_notifications:
                    # Limit to last 3 missed notifications to avoid overwhelming
                    if len(missed_notifications) > 3:
                        missed_notifications = missed_notifications[-3:]
                    
                    consolidated_msg = "‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –±–æ—Ç–∞:\n\n"
                    for time_str, msg in missed_notifications:
                        consolidated_msg += f"üìå {time_str}:\n{msg}\n\n"
                    
                    await bot.send_message(chat_id, consolidated_msg)
                    logger.info(f"Sent {len(missed_notifications)} missed notifications to user {chat_id}")
                    recovered_notifications += len(missed_notifications)
                
                # Check if quiz reminder was missed
                try:
                    local_base_obj = datetime.strptime(f"{local_today} {REMINDER_START}", 
                                                    "%Y-%m-%d %H:%M").replace(tzinfo=now_local.tzinfo)
                    local_end_obj = local_base_obj + timedelta(hours=DURATION_HOURS)
                    
                    # If end time was between last run and now, and no reminder was sent today
                    if (last_run_local < local_end_obj < now_local and 
                        quiz_reminder_sent.get(chat_id) != local_today):
                        
                        # Check revision mode
                        is_revision_mode = False
                        if chat_id in daily_words_cache:
                            entry = daily_words_cache[chat_id]
                            if len(entry) > 9:
                                is_revision_mode = entry[9]
                        
                        # Send appropriate message
                        if is_revision_mode:
                            reminder_message = "‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ü—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∑–∞–∫—Ä–µ–ø–∏—Ç—å –∑–Ω–∞–Ω–∏—è!"
                        else:
                            reminder_message = "‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ü—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –≤ –í–∞—à —Å–ª–æ–≤–∞—Ä—å."
                        
                        await bot.send_message(chat_id, reminder_message)
                        quiz_reminder_sent[chat_id] = local_today
                        logger.info(f"Sent missed quiz reminder to user {chat_id}")
                        recovered_notifications += 1
                except Exception as e:
                    logger.error(f"Error checking missed quiz reminder for user {chat_id}: {e}")
                
                processed_users += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
                if processed_users % 10 == 0:
                    await asyncio.sleep(1)
                    
            except Exception as e:
                logger.error(f"Error checking missed notifications for user {user[0]}: {e}")
        
        logger.info(f"Processed {processed_users} users, recovered {recovered_notifications} notifications")
    except Exception as e:
        logger.error(f"Error in check_missed_notifications: {e}")
    
    # Save current time as last run time
    save_last_run_time(now_server)

# Helper functions for tracking last run time

def get_last_run_time():
    """Reads the last scheduler run time from file."""
    try:
        if os.path.exists(LAST_RUN_FILE):
            with open(LAST_RUN_FILE, 'rb') as f:
                return pickle.load(f)
    except Exception as e:
        logger.error(f"Error reading last run time: {e}")
    return None

def save_last_run_time(time):
    """Saves the current scheduler run time to file."""
    try:
        with open(LAST_RUN_FILE, 'wb') as f:
            pickle.dump(time, f)
    except Exception as e:
        logger.error(f"Error saving last run time: {e}")

logging.basicConfig(
    level=logging.INFO,
    filename="logs/bot.log",
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

register_handlers(dp, bot)

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ event loop
async def on_startup(dp):
    loop = asyncio.get_running_loop()
    start_scheduler(bot, loop)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

#clear_learned_words.py
# clear_learned_words.py
import logging
from database.db import db_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def clear_learned_words():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã learned_words."""
    try:
        with db_manager.transaction() as conn:
            conn.execute("DELETE FROM learned_words")
        logger.info("–¢–∞–±–ª–∏—Ü–∞ learned_words –æ—á–∏—â–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {e}")

if __name__ == '__main__':
    clear_learned_words()

#config.py
import os
from dotenv import load_dotenv

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .env

BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_DEFAULT_TOKEN")
DB_PATH = os.getenv("DB_PATH", "bot.db")
LEVELS_DIR = os.getenv("LEVELS_DIR", "levels")
REMINDER_DEFAULT = os.getenv("REMINDER_DEFAULT", "09:00:00")
REMINDER_START = os.getenv("REMINDER_START", "10:00")  # –§–æ—Ä–º–∞—Ç "HH:MM" –∏–ª–∏ "HH:MM:SS"
DURATION_HOURS = float(os.getenv("DURATION_HOURS", 10))
DEFAULT_WORDS_PER_DAY = int(os.getenv("DEFAULT_WORDS_PER_DAY", 5))
DEFAULT_REPETITIONS = int(os.getenv("DEFAULT_REPETITIONS", 3))
SERVER_TIMEZONE = os.getenv("SERVER_TIMEZONE", "UTC")
DAILY_RESET_TIME = os.getenv("DAILY_RESET_TIME", "00:00")

# –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
DEFAULT_SETS = {
    "A1": "A1 Basic 1",
    "A2": "A2 Basic 1",
    "B1": "B1 Basic 1",
    "B2": "B2 Basic 1",
    "C1": "C1 Basic 1",
    "C2": "C2 Basic 1"
}


#catch_all_files.py
import os

def collect_python_files_content(src_dir, output_file):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Ä–µ–∂–∏–º 'w' –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª)
    with open(output_file, 'w', encoding='utf-8') as f:
        for root, dirs, files in os.walk(src_dir):
            # –ò—Å–∫–ª—é—á–∞–µ–º –ø–∞–ø–∫—É 'levels' –∏–∑ –æ–±—Ö–æ–¥–∞
            if 'levels' in dirs:
                dirs.remove('levels')
            
            rel_path = os.path.relpath(root, src_dir)
            
            for file in files:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ Python —Ñ–∞–π–ª—ã
                if not file.endswith('.py'):
                    continue
                    
                src_file = os.path.join(root, file)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                if rel_path == '.':
                    file_path = file
                else:
                    file_path = os.path.join(rel_path, file)
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
                if file == output_file:
                    continue
                    
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ output_file
                f.write(f"#{file_path}\n")
                    
                try:
                    with open(src_file, 'r', encoding='utf-8') as source_file:
                        content = source_file.read()
                        f.write(content)
                        f.write('\n\n')
                except UnicodeDecodeError:
                    f.write(f"[–î–≤–æ–∏—á–Ω—ã–π —Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è]\n\n")
                except Exception as e:
                    f.write(f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}]\n\n")
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {src_file}: {e}")

if __name__ == '__main__':
    source_directory = '.'
    output_file = 'to_gpt.txt'
    collect_python_files_content(source_directory, output_file)
    print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ Python —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {output_file}")

#clear_my_profile.py
# clear_my_profile.py
import logging
from database.db import db_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def clear_my_profile(chat_id):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü."""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        with db_manager.transaction() as conn:
            conn.execute("DELETE FROM users WHERE chat_id = ?", (chat_id,))
            conn.execute("DELETE FROM dictionary WHERE chat_id = ?", (chat_id,))
            conn.execute("DELETE FROM learned_words WHERE chat_id = ?", (chat_id,))
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chat_id {chat_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

if __name__ == '__main__':
    # –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_CHAT_ID –Ω–∞ –≤–∞—à —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π chat_id (—á–∏—Å–ª–æ)
    my_chat_id = 1999873173 
    clear_my_profile(my_chat_id)

#alter_db.py
# alter_db.py
import logging
from database.db import db_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def add_timezone_column():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–æ–ª–±–µ—Ü timezone –≤ —Ç–∞–±–ª–∏—Ü—É users, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    try:
        with db_manager.get_cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–∞ timezone –≤ —Ç–∞–±–ª–∏—Ü–µ users
            cursor.execute("PRAGMA table_info(users)")
            result = cursor.fetchall()
            columns = [row[1] for row in result]
            
            if 'timezone' not in columns:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü timezone, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                cursor.execute("ALTER TABLE users ADD COLUMN timezone TEXT DEFAULT 'Europe/Moscow'")
                logger.info("–°—Ç–æ–ª–±–µ—Ü 'timezone' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
            else:
                logger.info("–°—Ç–æ–ª–±–µ—Ü 'timezone' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞: {e}")

if __name__ == '__main__':
    add_timezone_column()

#alter_db_learning.py
# alter_db_learning.py
import logging
from database.db import db_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def add_learning_columns():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–æ–ª–±—Ü—ã test_words_count –∏ memorize_words_count –≤ —Ç–∞–±–ª–∏—Ü—É users."""
    try:
        with db_manager.get_cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–∞ test_words_count –≤ —Ç–∞–±–ª–∏—Ü–µ users
            cursor.execute("PRAGMA table_info(users)")
            result = cursor.fetchall()
            columns = [row[1] for row in result]
            
            if 'test_words_count' not in columns:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü test_words_count, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                cursor.execute("ALTER TABLE users ADD COLUMN test_words_count INTEGER DEFAULT 5")
                logger.info("–°—Ç–æ–ª–±–µ—Ü 'test_words_count' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
            else:
                logger.info("–°—Ç–æ–ª–±–µ—Ü 'test_words_count' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                
            if 'memorize_words_count' not in columns:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü memorize_words_count, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                cursor.execute("ALTER TABLE users ADD COLUMN memorize_words_count INTEGER DEFAULT 5")
                logger.info("–°—Ç–æ–ª–±–µ—Ü 'memorize_words_count' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
            else:
                logger.info("–°—Ç–æ–ª–±–µ—Ü 'memorize_words_count' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–æ–≤: {e}")

if __name__ == '__main__':
    add_learning_columns()

#clear_cache.py
# clear_user_cache.py
from utils.helpers import daily_words_cache

def clear_user_cache(chat_id):
    if chat_id in daily_words_cache:
        del daily_words_cache[chat_id]
        print(f"–ö—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –æ—á–∏—â–µ–Ω.")
    else:
        print(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –∫—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω.")

if __name__ == '__main__':
    my_chat_id = 1999873173   # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π chat_id
    clear_user_cache(my_chat_id)


#services/image_generation.py
# services/image_generation.py
from PIL import Image, ImageDraw, ImageFont
import os
import tempfile
import logging
from typing import Optional, Tuple

logger = logging.getLogger(__name__)

# Constants for image generation
FONT_DIR = "assets/fonts"
IMAGE_DIR = "assets/backgrounds"
CARD_WIDTH = 800
CARD_HEIGHT = 400
COLORS = {
    "background": (245, 245, 245),
    "text_primary": (50, 50, 50),
    "text_secondary": (100, 100, 100),
    "accent": (65, 105, 225),  # Royal Blue
    "border": (220, 220, 220),
    "shadow": (200, 200, 200),
}

# Create directories if they don't exist
os.makedirs(FONT_DIR, exist_ok=True)
os.makedirs(IMAGE_DIR, exist_ok=True)

# Default font paths - users will need to add actual font files to these locations
DEFAULT_FONT_PATHS = {
    "regular": os.path.join(FONT_DIR, "OpenSans-Regular.ttf"),
    "bold": os.path.join(FONT_DIR, "OpenSans-Bold.ttf"),
    "italic": os.path.join(FONT_DIR, "OpenSans-Italic.ttf"),
}

def get_font(font_type: str = "regular", size: int = 24) -> Optional[ImageFont.FreeTypeFont]:
    """Get a font for image generation, with fallback to default."""
    font_path = DEFAULT_FONT_PATHS.get(font_type)
    
    try:
        if font_path and os.path.exists(font_path):
            return ImageFont.truetype(font_path, size)
        else:
            # Fallback to default font
            return ImageFont.load_default()
    except Exception as e:
        logger.error(f"Error loading font: {e}")
        return ImageFont.load_default()

def create_word_card(word: str, translation: str, 
                    transcription: Optional[str] = None,
                    example: Optional[str] = None,
                    level: Optional[str] = None) -> str:
    """
    Create a visually appealing image card for a vocabulary word.
    
    Args:
        word: The English word
        translation: The translation of the word
        transcription: Optional phonetic transcription
        example: Optional example usage
        level: Optional level indicator (A1, B2, etc.)
        
    Returns:
        Path to the generated image file
    """
    try:
        # Create image with white background
        img = Image.new('RGB', (CARD_WIDTH, CARD_HEIGHT), COLORS["background"])
        draw = ImageDraw.Draw(img)
        
        # Get fonts
        word_font = get_font("bold", 48)
        translation_font = get_font("bold", 36)
        transcription_font = get_font("italic", 24)
        example_font = get_font("regular", 24)
        level_font = get_font("bold", 20)
        
        # Draw border with slight shadow effect
        draw.rectangle([(10, 10), (CARD_WIDTH-10, CARD_HEIGHT-10)], 
                      outline=COLORS["border"], width=2)
        
        # Draw word and translation
        draw.text((CARD_WIDTH//2, 80), word, font=word_font, 
                 fill=COLORS["text_primary"], anchor="mm")
        
        draw.text((CARD_WIDTH//2, 150), translation, font=translation_font, 
                 fill=COLORS["accent"], anchor="mm")
        
        # Draw transcription if provided
        if transcription:
            draw.text((CARD_WIDTH//2, 200), f"[{transcription}]", 
                     font=transcription_font, fill=COLORS["text_secondary"], 
                     anchor="mm")
            
        # Draw example if provided
        if example:
            # Limit example length for display
            if len(example) > 60:
                example = example[:57] + "..."
                
            draw.text((CARD_WIDTH//2, 260), f'"{example}"', 
                     font=example_font, fill=COLORS["text_secondary"], 
                     anchor="mm")
        
        # Draw level indicator if provided
        if level:
            draw.text((CARD_WIDTH-30, 30), level, font=level_font, 
                     fill=COLORS["accent"], anchor="mm")
        
        # Save to temporary file
        with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as temp_file:
            file_path = temp_file.name
            img.save(file_path, "PNG")
            
        return file_path
        
    except Exception as e:
        logger.error(f"Error creating word card: {e}")
        return ""

def create_progress_chart(learned_count: int, target_count: int = None, 
                         days_active: int = None) -> str:
    """
    Create a progress chart showing the user's learning progress.
    
    Args:
        learned_count: Number of words learned
        target_count: Optional target number of words
        days_active: Optional number of days the user has been active
        
    Returns:
        Path to the generated image file
    """
    try:
        # Create image with white background
        img = Image.new('RGB', (800, 400), COLORS["background"])
        draw = ImageDraw.Draw(img)
        
        # Get fonts
        title_font = get_font("bold", 36)
        label_font = get_font("regular", 24)
        number_font = get_font("bold", 48)
        
        # Draw title
        draw.text((400, 50), "Learning Progress", font=title_font, 
                 fill=COLORS["text_primary"], anchor="mm")
        
        # Draw learned words count in a circle
        circle_center = (200, 200)
        circle_radius = 100
        draw.ellipse((circle_center[0]-circle_radius, circle_center[1]-circle_radius,
                     circle_center[0]+circle_radius, circle_center[1]+circle_radius),
                    outline=COLORS["accent"], width=3)
        
        draw.text((circle_center[0], circle_center[1]-20), "Words Learned", 
                 font=label_font, fill=COLORS["text_secondary"], anchor="mm")
        
        draw.text((circle_center[0], circle_center[1]+20), str(learned_count), 
                 font=number_font, fill=COLORS["accent"], anchor="mm")
        
        # Draw additional stats if provided
        if target_count:
            draw.text((600, 150), "Target", font=label_font, 
                     fill=COLORS["text_secondary"], anchor="mm")
            draw.text((600, 190), str(target_count), font=number_font, 
                     fill=COLORS["text_primary"], anchor="mm")
            
            # Draw progress bar
            progress = min(1.0, learned_count / target_count) if target_count > 0 else 0
            bar_width = 300
            bar_height = 30
            bar_left = 450
            bar_top = 250
            
            # Draw bar background
            draw.rectangle([(bar_left, bar_top), 
                           (bar_left + bar_width, bar_top + bar_height)], 
                          fill=COLORS["border"])
            
            # Draw progress fill
            draw.rectangle([(bar_left, bar_top), 
                           (bar_left + int(bar_width * progress), bar_top + bar_height)], 
                          fill=COLORS["accent"])
            
            # Draw percentage
            draw.text((bar_left + bar_width//2, bar_top + bar_height//2), 
                     f"{int(progress*100)}%", font=label_font, 
                     fill=COLORS["text_primary"], anchor="mm")
        
        if days_active:
            draw.text((600, 300), "Days Active", font=label_font, 
                     fill=COLORS["text_secondary"], anchor="mm")
            draw.text((600, 340), str(days_active), font=number_font, 
                     fill=COLORS["text_primary"], anchor="mm")
        
        # Save to temporary file
        with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as temp_file:
            file_path = temp_file.name
            img.save(file_path, "PNG")
            
        return file_path
        
    except Exception as e:
        logger.error(f"Error creating progress chart: {e}")
        return ""

def create_level_badge(level: str) -> str:
    """
    Create a badge image for the user's current level.
    
    Args:
        level: The user's level (A1, A2, B1, etc.)
        
    Returns:
        Path to the generated image file
    """
    try:
        # Create a circular badge
        size = 200
        img = Image.new('RGB', (size, size), COLORS["background"])
        draw = ImageDraw.Draw(img)
        
        # Draw circular background
        circle_color = {
            "A1": (152, 251, 152),  # Pale Green
            "A2": (144, 238, 144),  # Light Green
            "B1": (135, 206, 250),  # Light Sky Blue
            "B2": (100, 149, 237),  # Cornflower Blue
            "C1": (221, 160, 221),  # Plum
            "C2": (186, 85, 211),   # Medium Orchid
        }.get(level, COLORS["accent"])
        
        draw.ellipse((10, 10, size-10, size-10), fill=circle_color, outline=(255,255,255), width=3)
        
        # Draw level text
        level_font = get_font("bold", 80)
        draw.text((size//2, size//2), level, font=level_font, 
                 fill=(255,255,255), anchor="mm")
        
        # Save to temporary file
        with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as temp_file:
            file_path = temp_file.name
            img.save(file_path, "PNG")
            
        return file_path
        
    except Exception as e:
        logger.error(f"Error creating level badge: {e}")
        return ""

#services/text_to_speech.py
# services/text_to_speech.py
import os
import tempfile
from gtts import gTTS

def generate_speech(text, lang="en"):
    with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tf:
        filename = tf.name
        tts = gTTS(text=text, lang=lang)
        tts.save(filename)
    return filename


#services/scheduler.py
# services/scheduler.py

import random
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import asyncio
import logging
from aiogram import Bot
from zoneinfo import ZoneInfo
from database import crud
from utils.helpers import get_daily_words_for_user, daily_words_cache, previous_daily_words, reset_daily_words_cache, extract_english
from config import REMINDER_START, DURATION_HOURS, SERVER_TIMEZONE, DAILY_RESET_TIME

logger = logging.getLogger(__name__)
FIRST_TIME = REMINDER_START

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –±—ã–ª–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∫–≤–∏–∑—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
quiz_reminder_sent = {}

# –ö—ç—à –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
user_cache = {}
# –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏)
last_cache_update = 0
# –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)
CACHE_UPDATE_INTERVAL = 15 * 60

def scheduler_job(bot: Bot, loop: asyncio.AbstractEventLoop):
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ë–î.
    """
    global last_cache_update, user_cache
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π
        try:
            now_server = datetime.now(tz=ZoneInfo(SERVER_TIMEZONE))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã {SERVER_TIMEZONE}: {e}")
            now_server = datetime.now(tz=ZoneInfo("UTC"))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        
        current_time = now_server.timestamp()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
        if current_time - last_cache_update > CACHE_UPDATE_INTERVAL:
            try:
                user_cache = {user[0]: user for user in crud.get_all_users()}
                last_cache_update = current_time
                logger.debug(f"Updated user cache with {len(user_cache)} users")
            except Exception as e:
                logger.error(f"Error updating user cache: {e}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –≤—Å–µ —Ä–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ—é—â–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ
                if not user_cache:
                    # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
                    try:
                        user_cache = {user[0]: user for user in crud.get_all_users()}
                    except Exception as e2:
                        logger.error(f"Failed to get users after cache update error: {e2}")
                        user_cache = {}
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ—á–µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
        if not user_cache:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–∏–Ω—É—Ç—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫
        current_minute_str = now_server.strftime("%M")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for chat_id, user in user_cache.items():
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                timezone = user[5] if len(user) > 5 and user[5] else "Europe/Moscow"
                
                # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    now_local = now_server.astimezone(ZoneInfo(timezone))
                except Exception:
                    now_local = now_server.astimezone(ZoneInfo("Europe/Moscow"))
                    
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —á–∞—Å–∞ –∏ –º–∏–Ω—É—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                now_local_str = now_local.strftime("%H:%M")
                
                # –ï—Å–ª–∏ –ø–æ–ª–Ω–æ—á—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
                if now_local.hour == 0 and now_local.minute == 0:
                    process_daily_reset(chat_id)
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                
                # –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª–æ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                # –∏–ª–∏ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–≤–∏–∑–∞ (–±–ª–∏–∑–∫–æ–µ –∫ –∫–æ–Ω—Ü—É –ø–µ—Ä–∏–æ–¥–∞)
                needs_processing = False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–æ–≤ –¥–Ω—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                    result = get_daily_words_for_user(chat_id, user[1], user[2], user[3],
                                                 first_time=FIRST_TIME, duration_hours=DURATION_HOURS)
                    if result:
                        messages, times = result
                        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                        if now_local_str in times:
                            needs_processing = True
                except Exception as e:
                    logger.error(f"Error checking notification times for user {chat_id}: {e}")
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–≤–∏–∑–µ
                try:
                    local_today_str = now_local.strftime("%Y-%m-%d")
                    local_base_obj = datetime.strptime(f"{local_today_str} {FIRST_TIME}", "%Y-%m-%d %H:%M").replace(tzinfo=ZoneInfo(timezone))
                    local_end_obj = local_base_obj + timedelta(hours=DURATION_HOURS)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±–ª–∏–∑–∫–æ –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫ –æ–∫–æ–Ω—á–∞–Ω–∏—é –ø–µ—Ä–∏–æ–¥–∞ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 3 –º–∏–Ω—É—Ç)
                    time_diff = abs((now_local - local_end_obj).total_seconds() / 60)
                    if time_diff <= 3 and quiz_reminder_sent.get(chat_id) != local_today_str:
                        needs_processing = True
                except Exception as e:
                    logger.error(f"Error calculating quiz reminder time for user {chat_id}: {e}")
                
                # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, –≤—ã–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                if needs_processing:
                    process_user(user, now_server, bot, loop)
            except Exception as e:
                logger.error(f"Error processing user {chat_id}: {e}")
    except Exception as e:
        logger.error(f"Unhandled error in scheduler_job: {e}")
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        from bot import save_last_run_time  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        save_last_run_time(now_server)
    except Exception as e:
        logger.error(f"Error saving scheduler run time: {e}")

def process_daily_reset(chat_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        if chat_id in daily_words_cache:
            entry = daily_words_cache[chat_id]
            unique_words = entry[8]  # —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –≤ "–ú–æ–µ–º —Å–ª–æ–≤–∞—Ä–µ"
            learned_raw = crud.get_learned_words(chat_id)
            learned_set = set(extract_english(item[0]) for item in learned_raw)
            filtered_unique = [w for w in unique_words if extract_english(w) not in learned_set]
            
            if filtered_unique:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
                previous_daily_words[chat_id] = filtered_unique
            elif chat_id in previous_daily_words:
                # –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –≤—ã—É—á–µ–Ω—ã, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ previous_daily_words
                del previous_daily_words[chat_id]
                
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            reset_daily_words_cache(chat_id)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if chat_id in quiz_reminder_sent:
            del quiz_reminder_sent[chat_id]
            
        logger.debug(f"Daily reset completed for user {chat_id}")
    except Exception as e:
        logger.error(f"Error processing daily reset for user {chat_id}: {e}")

def process_user(user, now_server, bot, loop):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ.
    –í—ã–Ω–µ—Å–µ–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ª—É—á—à–µ–π –∏–∑–æ–ª—è—Ü–∏–∏ –æ—à–∏–±–æ–∫.
    """
    chat_id = user[0]
    level = user[1]
    words_count = user[2]
    repetitions = user[3]
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    user_tz = user[5] if len(user) > 5 and user[5] else "Europe/Moscow"
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        ZoneInfo(user_tz)
        now_local = now_server.astimezone(ZoneInfo(user_tz))
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å {user_tz} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        user_tz = "Europe/Moscow"
        try:
            now_local = now_server.astimezone(ZoneInfo(user_tz))
            # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            crud.update_user_timezone(chat_id, user_tz)
        except Exception as e2:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º: {e2}")
            now_local = now_server  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –∫–∞–∫ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π
    
    now_local_str = now_local.strftime("%H:%M")
    local_today_str = now_local.strftime("%Y-%m-%d")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
    try:
        local_base_obj = datetime.strptime(f"{local_today_str} {FIRST_TIME}", "%Y-%m-%d %H:%M").replace(tzinfo=ZoneInfo(user_tz))
        local_end_obj = local_base_obj + timedelta(hours=DURATION_HOURS)
        end_time_str = local_end_obj.strftime("%H:%M")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–Ω—è (—ç—Ç–æ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
    try:
        result = get_daily_words_for_user(chat_id, level, words_count, repetitions,
                                         first_time=FIRST_TIME, duration_hours=DURATION_HOURS)
        if result is None:
            return
        messages, times = result

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        is_revision_mode = False
        if chat_id in daily_words_cache:
            entry = daily_words_cache[chat_id]
            if len(entry) > 9:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                is_revision_mode = entry[9]

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ã—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        if now_local_str in times:
            notif_index = times.index(now_local_str)
            message_text = messages[notif_index] if notif_index < len(messages) else "(–Ω–µ—Ç —Å–ª–æ–≤)"
            try:
                asyncio.run_coroutine_threadsafe(
                    bot.send_message(chat_id, f"üìå –°–ª–æ–≤–∞ –¥–Ω—è:\n{message_text}"),
                    loop
                )
                logger.info(f"Sent notification to user {chat_id} at {now_local_str}")
            except Exception as e:
                logger.error(f"Error sending notification to user {chat_id}: {e}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –≤–º–µ—Å—Ç–æ —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –º–∏–Ω—É—Ç–∞—Ö –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º current_time –∏ end_time –≤ datetime-–æ–±—ä–µ–∫—Ç—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            current_time = datetime.strptime(f"{local_today_str} {now_local_str}", "%Y-%m-%d %H:%M").replace(tzinfo=ZoneInfo(user_tz))
            end_time = datetime.strptime(f"{local_today_str} {end_time_str}", "%Y-%m-%d %H:%M").replace(tzinfo=ZoneInfo(user_tz))
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –º–∏–Ω—É—Ç–∞—Ö
            time_diff_minutes = abs((current_time - end_time).total_seconds() / 60)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –≤ 3 –º–∏–Ω—É—Ç—ã –≤–º–µ—Å—Ç–æ —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            if time_diff_minutes <= 3 and quiz_reminder_sent.get(chat_id) != local_today_str:
                try:
                    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ (–æ–±—ã—á–Ω—ã–π/–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ)
                    if is_revision_mode:
                        reminder_message = "–ü—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∑–∞–∫—Ä–µ–ø–∏—Ç—å –∑–Ω–∞–Ω–∏—è!"
                    else:
                        reminder_message = "–ü—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –≤ –í–∞—à —Å–ª–æ–≤–∞—Ä—å."
                        
                    asyncio.run_coroutine_threadsafe(
                        bot.send_message(chat_id, reminder_message),
                        loop
                    )
                    quiz_reminder_sent[chat_id] = local_today_str
                    logger.info(f"Sent quiz reminder to user {chat_id}")
                except Exception as e:
                    logger.error(f"Error sending quiz reminder to user {chat_id}: {e}")
        except Exception as e:
            logger.error(f"Error checking quiz reminder time for user {chat_id}: {e}")
            
    except Exception as e:
        logger.error(f"Error processing daily words for user {chat_id}: {e}")

def start_scheduler(bot: Bot, loop: asyncio.AbstractEventLoop):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç APScheduler, –∫–æ—Ç–æ—Ä—ã–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤—ã–∑—ã–≤–∞–µ—Ç scheduler_job.
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –±–æ–ª–µ–µ —É–º–Ω–æ–π –ª–æ–≥–∏–∫–æ–π.
    """
    scheduler = AsyncIOScheduler()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
    scheduler.add_job(scheduler_job, 'interval', minutes=1, args=[bot, loop])
    
    scheduler.start()
    logger.info("Scheduler started with optimized configuration")
    return scheduler

#handlers/back.py
# handlers/back.py
from aiogram import types
from keyboards.main_menu import main_menu_keyboard

async def handle_back(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥¬ª.
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ) —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é.
    """
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
    await callback.answer()


#handlers/words.py
# handlers/words.py
from aiogram import types, Dispatcher, Bot
from database import crud
from keyboards.submenus import words_day_keyboard
from utils.helpers import get_daily_words_for_user
from utils.visual_helpers import format_daily_words_message
from config import REMINDER_START, DURATION_HOURS
import os
from config import LEVELS_DIR, DEFAULT_SETS


async def send_words_day_schedule(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ª–æ–≤–∞ –¥–Ω—è". –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–±–æ—Ä —Å–ª–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ.
    """
    chat_id = callback.from_user.id
    user = crud.get_user(chat_id)
    
    if not user:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.",
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–µ—Ç–∞ —É—Ä–æ–≤–Ω—é
    from handlers.settings import user_set_selection
    current_set = user_set_selection.get(chat_id)
    if not current_set and len(user) > 6:
        current_set = user[6]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    level = user[1]
    if current_set:
        set_file_path = os.path.join(LEVELS_DIR, level, f"{current_set}.txt")
        if not os.path.exists(set_file_path):
            # –°–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Ä–æ–≤–Ω—é, –ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–π
            default_set = DEFAULT_SETS.get(level)
            if default_set:
                default_set_path = os.path.join(LEVELS_DIR, level, f"{default_set}.txt")
                if os.path.exists(default_set_path):
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç
                    crud.update_user_chosen_set(chat_id, default_set)
                    user_set_selection[chat_id] = default_set
                    reset_daily_words_cache(chat_id)
                    await callback.message.edit_text(
                        f"‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ —Å–µ—Ç '{current_set}' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–≤–Ω—é {level}.\n\n"
                        f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∞–∑–æ–≤—ã–π —Å–µ—Ç '{default_set}' –¥–ª—è —É—Ä–æ–≤–Ω—è {level}.\n\n"
                        f"–ù–∞–∂–º–∏—Ç–µ '–°–ª–æ–≤–∞ –¥–Ω—è' –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–æ–≤.",
                        parse_mode="Markdown",
                        reply_markup=words_day_keyboard()
                    )
                    await callback.answer()
                    return
    
    result = get_daily_words_for_user(
        chat_id, user[1], user[2], user[3],
        first_time=REMINDER_START, duration_hours=DURATION_HOURS
    )
    
    if result is None:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —É—Ä–æ–≤–Ω—è {user[1]}.",
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    messages, times = result
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    formatted_message = format_daily_words_message(messages, times)
    
    await callback.message.edit_text(
        formatted_message,
        parse_mode="Markdown", 
        reply_markup=words_day_keyboard()
    )
    
    await callback.answer()

def register_words_handlers(dp: Dispatcher, bot: Bot):
    dp.register_callback_query_handler(
        lambda c: send_words_day_schedule(c, bot),
        lambda c: c.data == "menu:words_day"
    )

#handlers/start.py
# handlers/start.py
import logging
from aiogram import types
from keyboards.main_menu import main_menu_keyboard
from database import crud

logger = logging.getLogger(__name__)

async def cmd_start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç.
    """
    chat_id = message.chat.id
    logger.info(f"Received /start from chat_id: {chat_id}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = crud.get_user(chat_id)
        if not user:
            # –ï—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            crud.add_user(chat_id)
            logger.info(f"Added new user with chat_id {chat_id}")
        else:
            logger.info(f"User {chat_id} already exists")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ English Learning Bot!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in cmd_start for chat_id {chat_id}: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard()
        )

#handlers/quiz.py
# handlers/quiz.py
import random
from datetime import datetime
from aiogram import types, Dispatcher, Bot
import asyncio
from database import crud
from utils.quiz_helpers import load_quiz_data
from keyboards.submenus import quiz_keyboard
from utils.helpers import get_daily_words_for_user, daily_words_cache
from utils.visual_helpers import format_quiz_question, format_result_message, extract_english
from config import REMINDER_START, DURATION_HOURS
import logging
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏ –∏ —Ä–∞–±–æ—Ç—É —Å–æ —Å—Ç–∏–∫–µ—Ä–∞–º–∏
from utils.sticker_helper import get_congratulation_sticker
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–∏–∑–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
quiz_states = {}

def generate_quiz_questions_from_daily(daily_words, level, chosen_set=None, is_revision_mode=False):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–≤–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–≤ –¥–Ω—è.
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∏–∑–±–µ–≥–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤, –≥–¥–µ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - daily_words: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–Ω—è
    - level: —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - chosen_set: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    - is_revision_mode: —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (True/False)
    """
    quiz_data = load_quiz_data(level, chosen_set)
    if not quiz_data:
        logger.warning(f"No quiz data found for level {level}, set {chosen_set}")
        return []
    
    mapping = {item["word"].lower(): item["translation"] for item in quiz_data}
    translations_set = set(item["translation"] for item in quiz_data)
    questions = []
    
    for word in daily_words:
        word_lc = word.lower()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
        if word_lc in mapping:
            correct_translation = mapping[word_lc]
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–ª–æ–≤–æ, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∞–Ω–≥–ª–∏–π—Å–∫—É—é —á–∞—Å—Ç—å
            word_extracted = extract_english(word).lower()
            if word_extracted in mapping:
                correct_translation = mapping[word_extracted]
            else:
                # –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ –Ω–∞—à–ª–∏, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                logger.warning(f"Word '{word}' (extracted as '{word_extracted}') not found in quiz data mapping")
                continue
        
        # –°–æ–∑–¥–∞–µ–º –ø—É–ª –æ—Ç–≤–ª–µ–∫–∞—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–∫–ª—é—á–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        pool = list(translations_set - {correct_translation})
        
        # –í—ã–±–∏—Ä–∞–µ–º –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø—É–ª–∞
        if len(pool) >= 3:
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º random.sample –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            distractors = random.sample(pool, 3)
        else:
            # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º random.choices, —á—Ç–æ –º–æ–∂–µ—Ç –¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã,
            # –Ω–æ —ç—Ç–æ –ª—É—á—à–µ, —á–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            if pool:
                distractors = random.choices(pool, k=3)
            else:
                # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ—Ç –æ—Ç–≤–ª–µ–∫–∞—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                logger.warning(f"No distractors available for word '{word}'")
                distractors = ["???", "???", "???"]
        
        options = [correct_translation] + distractors
        random.shuffle(options)
        correct_index = options.index(correct_translation)
        
        questions.append({
            "word": word,
            "correct": correct_translation,
            "options": options,
            "correct_index": correct_index,
            "is_revision": is_revision_mode  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        })
    
    return questions


async def start_quiz(callback: types.CallbackQuery, bot: Bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–≤–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    chat_id = callback.from_user.id
    try:
        from database import crud
        user = crud.get_user(chat_id)
        if not user:
            await bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            return
        level = user[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        try:
            from handlers.settings import user_set_selection
            chosen_set = user_set_selection.get(chat_id)
        except ImportError:
            logger.error("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ user_set_selection, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–±–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            chosen_set = None
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ –ë–î
        try:
            learned_raw = crud.get_learned_words(chat_id)
            learned_set = set(extract_english(item[0]).lower() for item in learned_raw)
            logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –µ—Å—Ç—å {len(learned_set)} –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
            learned_set = set()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–Ω—è
        try:
            result = get_daily_words_for_user(chat_id, level, user[2], user[3],
                                           first_time=REMINDER_START, duration_hours=DURATION_HOURS, chosen_set=chosen_set)
            if result is None:
                await bot.send_message(chat_id, "–ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞.")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –∫—ç—à–∞
            if chat_id not in daily_words_cache:
                logger.error(f"–ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤ –¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
                
            daily_entry = daily_words_cache[chat_id]
            raw_words = [msg.replace("üîπ ", "").strip() for msg in daily_entry[1]]
            
            # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ–µ –ø—Ä–µ—Ñ–∏–∫—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if raw_words and (raw_words[0].startswith("üéì") or raw_words[0].startswith("‚ö†Ô∏è")):
                raw_words = raw_words[1:]
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            daily_words = [extract_english(line).lower() for line in raw_words]
            daily_words_set = set(daily_words)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            is_revision_mode = len(daily_entry) > 9 and daily_entry[9]
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤ —Ä–µ–∂–∏–º–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {is_revision_mode}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞
            unlearned_words = daily_words_set - learned_set
            
            if not unlearned_words and not is_revision_mode:
                await bot.send_message(chat_id, "–í—Å–µ —Å–ª–æ–≤–∞ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ '–°–ª–æ–≤–∞ –¥–Ω—è' —É–∂–µ –≤—ã—É—á–µ–Ω—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤.")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Å–ª–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ
            if is_revision_mode:
                quiz_words = list(daily_words)
            else:
                quiz_words = list(unlearned_words)
                # –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                if not quiz_words:
                    await bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–≤–∏–∑–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ —Å–ª–æ–≤–∞ —É–∂–µ –≤—ã—É—á–µ–Ω—ã.")
                    return
            
            logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(quiz_words)} —Å–ª–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–≤–∏–∑–∞
            questions = generate_quiz_questions_from_daily(quiz_words, level, chosen_set, is_revision_mode)
            
            if not questions:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–≤–∏–∑–∞ –∏–∑ {len(quiz_words)} —Å–ª–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                
                if is_revision_mode:
                    await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤.")
                else:
                    await bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–≤–∏–∑–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ —Å–ª–æ–≤–∞ —É–∂–µ –≤—ã—É—á–µ–Ω—ã.")
                return
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–∏–∑–∞
            quiz_states[chat_id] = {"questions": questions, "current_index": 0, "correct": 0, "is_revision": is_revision_mode}
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∫–≤–∏–∑–∞
            if is_revision_mode:
                await bot.send_message(chat_id, "üìù *–†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è*: —Å–ª–æ–≤–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –í–∞—à —Å–ª–æ–≤–∞—Ä—å.", parse_mode="Markdown")
            else:
                await bot.send_message(chat_id, "üìù *–ö–≤–∏–∑ –ø–æ –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞–º*: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –í–∞—à —Å–ª–æ–≤–∞—Ä—å.", parse_mode="Markdown")
                
            await send_quiz_question(chat_id, bot)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–≤–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
            await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–≤–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ start_quiz –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
async def send_quiz_question(chat_id, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞."""
    try:
        state = quiz_states.get(chat_id)
        if not state:
            return
        
        current_index = state["current_index"]
        questions = state["questions"]
        is_revision = state.get("is_revision", False)
        
        if current_index >= len(questions):
            # –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω
            from keyboards.main_menu import main_menu_keyboard
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            result_message = format_result_message(
                state['correct'], 
                len(questions),
                is_revision
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back"))
            
            if is_revision:
                keyboard.add(types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä", callback_data="settings:set"))
                keyboard.add(types.InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —É—Ä–æ–≤–Ω—è", callback_data="test_level:start"))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            await bot.send_message(
                chat_id, 
                result_message,
                parse_mode="Markdown", 
                reply_markup=keyboard
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            if state['correct'] / len(questions) >= 0.7:
                sticker_id = get_congratulation_sticker()
                if sticker_id:
                    await bot.send_sticker(chat_id, sticker_id)
            
            del quiz_states[chat_id]
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
        question = questions[current_index]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
        formatted_question = format_quiz_question(
            current_index + 1,
            len(questions),
            question['word'],
            question['options'],
            is_revision
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = quiz_keyboard(question['options'], current_index)
        
        await bot.send_message(
            chat_id, 
            formatted_question,
            parse_mode="Markdown", 
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –∫–≤–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞
async def process_quiz_answer(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞."""
    chat_id = callback.from_user.id
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if callback.data == "quiz:back":
            from keyboards.main_menu import main_menu_keyboard
            await bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard())
            if chat_id in quiz_states:
                del quiz_states[chat_id]
            await callback.answer()
            return
            
        if callback.data == "quiz:stop":
            from keyboards.main_menu import main_menu_keyboard
            await bot.send_message(chat_id, "–ö–≤–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=main_menu_keyboard())
            if chat_id in quiz_states:
                del quiz_states[chat_id]
            await callback.answer()
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        data = callback.data.split(":")
        if len(data) != 4:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
            return
            
        _, _, q_index_str, option_index_str = data
        q_index = int(q_index_str)
        option_index = int(option_index_str)
        
        state = quiz_states.get(chat_id)
        if not state:
            await callback.answer("–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
            
        if q_index != state["current_index"]:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤.", show_alert=True)
            return
            
        question = state["questions"][q_index]
        is_revision = state.get("is_revision", False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        if option_index == question["correct_index"]:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            try:
                # –Ø–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç crud
                from database import crud
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ —Å–ª–æ–≤–æ –≤ –≤—ã—É—á–µ–Ω–Ω—ã–µ
                current_learned = crud.get_learned_words(chat_id)
                current_learned_words = set(extract_english(word).lower() for word, _ in current_learned)
                word_to_learn = extract_english(question["word"]).lower()
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ —Ç–æ–ª—å–∫–æ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –≤—ã—É—á–µ–Ω–æ
                if not is_revision and word_to_learn not in current_learned_words:
                    crud.add_learned_word(chat_id, question["word"], question["correct"], datetime.now().strftime("%Y-%m-%d"))
                    await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å.")
                elif is_revision:
                    await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! (–°–ª–æ–≤–æ —É–∂–µ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ)")
                else:
                    await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! (–°–ª–æ–≤–æ —É–∂–µ –±—ã–ª–æ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ)")
                    
                state["correct"] += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
                await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
        else:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            await callback.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['correct']}")
            
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        state["current_index"] += 1
        await send_quiz_question(chat_id, bot)
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–≤–∏–∑: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–≤–∏–∑: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.")


def register_quiz_handlers(dp: Dispatcher, bot: Bot):
    dp.register_callback_query_handler(
        lambda c: start_quiz(c, bot),
        lambda c: c.data == "quiz:start"
    )
    dp.register_callback_query_handler(
        lambda c: process_quiz_answer(c, bot),
        lambda c: c.data and c.data.startswith("quiz:")
    )

#handlers/settings.py
from aiogram import types, Dispatcher, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboards.submenus import (
    notification_settings_menu_keyboard, 
    settings_menu_keyboard,
    level_selection_keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
)
from keyboards.main_menu import main_menu_keyboard
from database import crud
from functools import partial
from utils.helpers import reset_daily_words_cache, LEVELS_DIR
import os
import logging
from zoneinfo import ZoneInfo

from utils.visual_helpers import format_settings_overview
from utils.sticker_helper import get_congratulation_sticker

import urllib.parse

from config import DEFAULT_SETS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ (–∫–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
pending_settings = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∫–ª—é—á: chat_id, –∑–Ω–∞—á–µ–Ω–∏–µ: –∏–º—è —Å–µ—Ç–∞)
user_set_selection = {}

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–∏—è UTC —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞/—Ä–µ–≥–∏–æ–Ω–∞
timezones_map = {
    2: "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥",
    3: "–ú–æ—Å–∫–≤–∞",
    4: "–°–∞–º–∞—Ä–∞",
    5: "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
    6: "–û–º—Å–∫",
    7: "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫",
    8: "–ò—Ä–∫—É—Ç—Å–∫",
    9: "–Ø–∫—É—Ç—Å–∫–æ–µ",
    10: "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",
    11: "–ú–∞–≥–∞–¥–∞–Ω—Å–∫–æ–µ",
    12: "–ö–∞–º—á–∞—Ç—Å–∫–æ–µ"
}

# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º IANA –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º
russian_tzs = {
    2: "Europe/Kaliningrad",  # UTC+2
    3: "Europe/Moscow",       # UTC+3
    4: "Europe/Samara",       # UTC+4
    5: "Asia/Yekaterinburg",  # UTC+5
    6: "Asia/Omsk",           # UTC+6
    7: "Asia/Krasnoyarsk",    # UTC+7
    8: "Asia/Irkutsk",        # UTC+8
    9: "Asia/Yakutsk",        # UTC+9
    10: "Asia/Vladivostok",   # UTC+10
    11: "Asia/Magadan",       # UTC+11
    12: "Asia/Kamchatka"      # UTC+12
}

def is_valid_timezone(tz_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞."""
    try:
        ZoneInfo(tz_name)
        return True
    except Exception:
        return False

async def show_settings_callback(callback: types.CallbackQuery, bot: Bot):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ"""
    await callback.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:", reply_markup=settings_menu_keyboard())
    await callback.answer()

async def process_settings_choice_callback(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    –û–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ UX.
    """
    chat_id = callback.from_user.id
    try:
        _, option = callback.data.split(":", 1)
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    if option == "level":
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
        await callback.message.edit_text(
            "üî§ *–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:*\n\n"
            "üü¢ *A1-A2* - –ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å\n"
            "üü° *B1-B2* - –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å\n"
            "üî¥ *C1-C2* - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å", 
            parse_mode="Markdown",
            reply_markup=level_selection_keyboard()
        )

    elif option == "notifications":
        await callback.message.edit_text(
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, "
            "–∞ —Ç–∞–∫–∂–µ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.",
            parse_mode="Markdown",
            reply_markup=notification_settings_menu_keyboard()
        )

    elif option == "words":
        pending_settings[chat_id] = "words"
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings:back"))
        
        await callback.message.edit_text(
            "üìä *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ. "
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç 5 –¥–æ 15 —Å–ª–æ–≤ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20:",
            parse_mode="Markdown",
            reply_markup=keyboard
        )

    elif option == "repetitions":
        pending_settings[chat_id] = "repetitions"
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings:back"))
        
        await callback.message.edit_text(
            "üîÑ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è. "
            "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –ª—É—á—à–µ –∑–∞–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–∞.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5:",
            parse_mode="Markdown",
            reply_markup=keyboard
        )

    elif option == "timezone":
        keyboard = InlineKeyboardMarkup(row_width=2)
        
        for offset in range(2, 13):
            city_name = timezones_map.get(offset, "")
            tz_label = f"UTC+{offset} {city_name}"
            callback_data = f"set_timezone:UTC+{offset}"
            
            keyboard.insert(InlineKeyboardButton(tz_label, callback_data=callback_data))
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings:back"))
        
        await callback.message.edit_text(
            "üåê *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å*\n\n"
            "–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è.",
            parse_mode="Markdown",
            reply_markup=keyboard
        )

    elif option == "set":
        await process_my_sets(callback, bot)

    elif option == "mysettings":
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await process_settings_mysettings(callback, bot)

    await callback.answer()

async def process_my_sets(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ —Å–µ—Ç—ã". –°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    chat_id = callback.from_user.id
    try:
        user = crud.get_user(chat_id)
        if not user:
            await bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            return
            
        user_level = user[1]
        level_dir = os.path.join(LEVELS_DIR, user_level)
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}, —É—Ä–æ–≤–µ–Ω—å {user_level}, –ø—É—Ç—å: {level_dir}")
        
        if not os.path.exists(level_dir):
            logger.warning(f"Level directory not found: {level_dir}")
            await bot.send_message(chat_id, f"–ü–∞–ø–∫–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è {user_level} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
            
        try:
            set_files = [f for f in os.listdir(level_dir) if f.endswith(".txt")]
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(set_files)} —Ñ–∞–π–ª–æ–≤ —Å–µ—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {level_dir}")
        except PermissionError:
            logger.error(f"Permission denied when accessing directory: {level_dir}")
            await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ —É—Ä–æ–≤–Ω—è {user_level}.")
            return
        except Exception as e:
            logger.error(f"Error listing directory {level_dir}: {e}")
            await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ —É—Ä–æ–≤–Ω—è {user_level}.")
            return
            
        if not set_files:
            await bot.send_message(chat_id, f"–í –ø–∞–ø–∫–µ {user_level} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ç–æ–≤.")
            return

        # Get current set and learned words
        current_set = user_set_selection.get(chat_id, None)
        
        # –ï—Å–ª–∏ –Ω–µ –≤ –∫—ç—à–µ, —Å–º–æ—Ç—Ä–∏–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if not current_set and len(user) > 6 and user[6]:
            current_set = user[6]
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
            user_set_selection[chat_id] = current_set
        
        # Check if user has any learned words
        try:
            learned_words = crud.get_learned_words(chat_id)
            has_learned_words = len(learned_words) > 0
        except Exception as e:
            logger.error(f"Error checking learned words: {e}")
            has_learned_words = False
        
        # Prepare message with current set info
        message_text = f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ç—ã –¥–ª—è —É—Ä–æ–≤–Ω—è {user_level}:"
        if current_set:
            message_text = f"–¢–µ–∫—É—â–∏–π —Å–µ—Ç: *{current_set}*\n\n" + message_text
        
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É callback_data, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ Button_data_invalid
        for filename in set_files:
            set_name = os.path.splitext(filename)[0]
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏ —Å–µ—Ç–∞ –≤ callback_data –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∫—ç—à–µ
            set_index = len(set_files) - set_files.index(filename)  # –ù–∞—á–∏–Ω–∞–µ–º —Å 1
            callback_data = f"set_idx:{set_index}" if not has_learned_words else f"confirm_idx:{set_index}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Å–µ—Ç–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π cache –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å—É
            if not hasattr(process_my_sets, 'set_cache'):
                process_my_sets.set_cache = {}
            process_my_sets.set_cache[f"{chat_id}_{set_index}"] = set_name
            
            keyboard.add(types.InlineKeyboardButton(set_name, callback_data=callback_data))
        
        keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="menu:settings"))
        
        await bot.send_message(chat_id, message_text, parse_mode="Markdown", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ process_my_sets –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

async def handle_set_by_index(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
    chat_id = callback.from_user.id
    try:
        _, set_index = callback.data.split(":", 1)
        set_index = int(set_index)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–µ—Ç–∞ –∏–∑ –∫—ç—à–∞
        if not hasattr(process_my_sets, 'set_cache'):
            process_my_sets.set_cache = {}
        
        set_name = process_my_sets.set_cache.get(f"{chat_id}_{set_index}")
        if not set_name:
            await callback.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —É—Ä–æ–≤–µ–Ω—å
        user = crud.get_user(chat_id)
        if not user:
            await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            return
        
        user_level = user[1]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç
        current_set = None
        if chat_id in user_set_selection:
            current_set = user_set_selection[chat_id]
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, —Å–º–æ—Ç—Ä–∏–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if not current_set and len(user) > 6 and user[6]:
            current_set = user[6]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–º–µ–Ω–æ–π —Å–µ—Ç–∞
        is_change = current_set and current_set != set_name
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç –≤ –±–¥ –∏ –∫—ç—à–µ
        crud.update_user_chosen_set(chat_id, set_name)
        user_set_selection[chat_id] = set_name
        reset_daily_words_cache(chat_id)
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–º–µ–Ω–∞ —Å–µ—Ç–∞, –æ—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
        if is_change:
            crud.clear_learned_words_for_user(chat_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–±–æ—Ä–µ —Å–µ—Ç–∞
        await callback.message.edit_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω —Å–µ—Ç '{set_name}' –¥–ª—è —É—Ä–æ–≤–Ω—è {user_level}.\n\n"
            f"{'‚ö†Ô∏è –°–ª–æ–≤–∞—Ä—å –æ—á–∏—â–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –±—ã–ª –≤—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π —Å–µ—Ç.' if is_change else ''}",
            parse_mode="Markdown",
            reply_markup=settings_menu_keyboard()
        )
        
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ç–∞.")

async def handle_confirm_set_by_index(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã —Å–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
    chat_id = callback.from_user.id
    try:
        _, set_index = callback.data.split(":", 1)
        set_index = int(set_index)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–µ—Ç–∞ –∏–∑ –∫—ç—à–∞
        if not hasattr(process_my_sets, 'set_cache'):
            process_my_sets.set_cache = {}
        
        set_name = process_my_sets.set_cache.get(f"{chat_id}_{set_index}")
        if not set_name:
            await callback.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç
        current_set = None
        if chat_id in user_set_selection:
            current_set = user_set_selection[chat_id]
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, —Å–º–æ—Ç—Ä–∏–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = crud.get_user(chat_id)
        if not current_set and user and len(user) > 6 and user[6]:
            current_set = user[6]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, —Å–º–µ–Ω–∏—Ç—å", callback_data=f"set_chg_idx:{set_index}"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="set_change_cancel")
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        await callback.message.edit_text(
            f"‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ! –°–º–µ–Ω–∞ —Å–µ—Ç–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ–ª–Ω–æ–º—É —Å–±—Ä–æ—Å—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.*\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å–µ—Ç: *{current_set}*\n"
            f"–ù–æ–≤—ã–π —Å–µ—Ç: *{set_name}*\n\n"
            f"–ü—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∞ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω. –í—ã —É–≤–µ—Ä–µ–Ω—ã?",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–º–µ–Ω—ã —Å–µ—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

async def handle_set_change_confirmed_by_index(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π —Å–º–µ–Ω—ã —Å–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
    chat_id = callback.from_user.id
    try:
        _, set_index = callback.data.split(":", 1)
        set_index = int(set_index)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–µ—Ç–∞ –∏–∑ –∫—ç—à–∞
        if not hasattr(process_my_sets, 'set_cache'):
            process_my_sets.set_cache = {}
        
        set_name = process_my_sets.set_cache.get(f"{chat_id}_{set_index}")
        if not set_name:
            await callback.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        crud.clear_learned_words_for_user(chat_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç
        crud.update_user_chosen_set(chat_id, set_name)
        user_set_selection[chat_id] = set_name
        reset_daily_words_cache(chat_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
        from utils.sticker_helper import get_congratulation_sticker
        sticker_id = get_congratulation_sticker()
        if sticker_id:
            await bot.send_sticker(chat_id, sticker_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Å–º–µ–Ω–µ —Å–µ—Ç–∞
        await callback.message.edit_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω —Å–µ—Ç '{set_name}'.\n‚ö†Ô∏è –°–ª–æ–≤–∞—Ä—å —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.",
            reply_markup=settings_menu_keyboard()
        )
        
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π —Å–º–µ–Ω–µ —Å–µ—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∞.")

# Updated process_choose_set function with both fixes for long messages
# and for automatically clearing the dictionary when changing sets

async def process_choose_set(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∞. –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ç–∞.
    –ü—Ä–∏ –±–æ–ª—å—à–æ–º –æ–±—ä–µ–º–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å —Å–ª–æ–≤.
    –ü—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    chat_id = callback.from_user.id
    try:
        try:
            _, encoded_set_name = callback.data.split(":", 1)
            # URL-decode the set name to get original name with special characters
            set_name = urllib.parse.unquote(encoded_set_name)
        except ValueError as e:
            logger.error(f"Error parsing callback data: {e}, data: {callback.data}")
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
            return

        user = crud.get_user(chat_id)
        if not user:
            await bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            return

        user_level = user[1]
        set_path = os.path.join(LEVELS_DIR, user_level, f"{set_name}.txt")
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É —Å–µ—Ç–∞: {set_path} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞
        if not os.path.exists(set_path):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å –¥—Ä—É–≥–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º
            parent_dir = os.path.dirname(set_path)
            file_name = os.path.basename(set_path)
            
            if os.path.exists(parent_dir):
                try:
                    files = os.listdir(parent_dir)
                    for file in files:
                        if file.lower() == file_name.lower():
                            set_path = os.path.join(parent_dir, file)
                            logger.info(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –¥—Ä—É–≥–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º: {set_path}")
                            break
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–∞ —Å –¥—Ä—É–≥–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º: {e}")
            
            if not os.path.exists(set_path):
                logger.warning(f"Set file not found: {set_path}")
                await bot.send_message(chat_id, f"–°–µ—Ç {set_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É—Ä–æ–≤–Ω—è {user_level}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ç.")
                return
        
        content = ""
        try:
            with open(set_path, "r", encoding="utf-8") as f:
                content = f.read()
        except UnicodeDecodeError:
            logger.warning(f"Unicode decode error in file {set_path}, trying cp1251 encoding")
            try:
                with open(set_path, "r", encoding="cp1251") as f:
                    content = f.read()
            except Exception as e:
                logger.error(f"Failed to read file with alternative encoding: {e}")
                await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞.")
                return
        except Exception as e:
            logger.error(f"Error reading file {set_path}: {e}")
            await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å (–µ—Å–ª–∏ —ç—Ç–æ —Å–º–µ–Ω–∞ —Å–µ—Ç–∞, –∞ –Ω–µ –ø–µ—Ä–≤–∏—á–Ω—ã–π –≤—ã–±–æ—Ä)
        current_set = user_set_selection.get(chat_id, None)
        dictionary_cleared = False
        
        if current_set and current_set != set_name:
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–º–µ–Ω–∞ —Å–µ—Ç–∞ (–∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç–æ–≥–æ –∂–µ —Å–µ—Ç–∞), –æ—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
            try:
                crud.clear_learned_words_for_user(chat_id)
                dictionary_cleared = True
                logger.info(f"Dictionary cleared for user {chat_id} due to set change from '{current_set}' to '{set_name}'")
            except Exception as e:
                logger.error(f"Error clearing dictionary for user {chat_id}: {e}")
        
        # Store the original (non-encoded) set name
        user_set_selection[chat_id] = set_name
        reset_daily_words_cache(chat_id)  # –æ—á–∏—â–∞–µ–º –∫—ç—à '–°–ª–æ–≤–∞ –¥–Ω—è' –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        intro_text = f"–í—ã–±—Ä–∞–Ω —Å–µ—Ç {set_name} –¥–ª—è —É—Ä–æ–≤–Ω—è {user_level}."
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—á–∏—Å—Ç–∫–µ —Å–ª–æ–≤–∞—Ä—è, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞
        if dictionary_cleared:
            intro_text += "\n‚ö†Ô∏è –°–ª–æ–≤–∞—Ä—å –æ—á–∏—â–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –±—ã–ª –≤—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π —Å–µ—Ç."
            
        intro_text += "\n–°–ª–æ–≤–∞ —Å–µ—Ç–∞:\n\n"
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
        lines = content.split('\n')
        
        # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ ~4096 —Å–∏–º–≤–æ–ª–æ–≤
        MAX_MESSAGE_LENGTH = 3800  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –∏–Ω—Ç—Ä–æ –∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
        
        # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å
        if len(intro_text) + len(content) > MAX_MESSAGE_LENGTH:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –º–æ–∂–µ–º –ø–æ–∫–∞–∑–∞—Ç—å
            preview_content = ""
            preview_line_count = 0
            word_count = len(lines)
            
            for line in lines:
                if len(intro_text) + len(preview_content) + len(line) + 100 < MAX_MESSAGE_LENGTH:  # +100 –¥–ª—è –∑–∞–ø–∞—Å–∞
                    preview_content += line + "\n"
                    preview_line_count += 1
                else:
                    break
            
            note = f"\n\n...–∏ –µ—â–µ {word_count - preview_line_count} —Å–ª–æ–≤(–∞). –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ –æ–±—É—á–µ–Ω–∏–∏."
            message_text = intro_text + preview_content + note
        else:
            message_text = intro_text + content

        await bot.send_message(chat_id, message_text, reply_markup=settings_menu_keyboard())
        
    except Exception as e:
        logger.error(f"Unexpected error in process_choose_set for user {chat_id}: {e}")
        await bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ç–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()


async def process_set_level_callback(callback: types.CallbackQuery, bot: Bot):
    chat_id = callback.from_user.id
    try:
        _, level = callback.data.split(":", 1)
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = crud.get_user(chat_id)
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_set = None
    if chat_id in user_set_selection:
        current_set = user_set_selection[chat_id]
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, —Å–º–æ—Ç—Ä–∏–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not current_set and len(user) > 6 and user[6]:
        current_set = user[6]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
    crud.update_user_level(chat_id, level)
    
    # –ï—Å–ª–∏ —Å–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    if not current_set:
        default_set = DEFAULT_SETS.get(level)
        if default_set:
            try:
                crud.update_user_chosen_set(chat_id, default_set)
                user_set_selection[chat_id] = default_set
                current_set = default_set
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∞–∑–æ–≤—ã–π —Å–µ—Ç {default_set} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –ø—Ä–∏ —Å–º–µ–Ω–µ —É—Ä–æ–≤–Ω—è –Ω–∞ {level}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–∞–∑–æ–≤–æ–≥–æ —Å–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–ª–æ–≤
    reset_daily_words_cache(chat_id)
    
    set_info = f"\n–¢–µ–∫—É—â–∏–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤: {current_set}" if current_set else ""
    await bot.send_message(chat_id, f"–£—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {level}.{set_info}", reply_markup=settings_menu_keyboard())
    await callback.answer()

async def process_set_timezone_callback(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç UTC+X –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π IANA –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.
    """
    chat_id = callback.from_user.id
    try:
        _, tz = callback.data.split(":", 1)
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç UTC+ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π IANA —Ñ–æ—Ä–º–∞—Ç
    if tz.startswith("UTC+"):
        try:
            offset = int(tz[4:])
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞, –≥–¥–µ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
            if offset in russian_tzs:
                tz_mapped = russian_tzs[offset]
            else:
                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: UTC+X —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Etc/GMT-X 
                # (–≤ POSIX –∑–Ω–∞–∫ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω)
                tz_mapped = f"Etc/GMT-{offset}"
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            if not is_valid_timezone(tz_mapped):
                logger.warning(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å {tz_mapped} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                tz_mapped = "Europe/Moscow"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        except ValueError:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ {tz} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            tz_mapped = "Europe/Moscow"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
    else:
        tz_mapped = tz
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –ø–æ—è—Å –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
        if not is_valid_timezone(tz_mapped):
            logger.warning(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å {tz_mapped} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            tz_mapped = "Europe/Moscow"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    crud.update_user_timezone(chat_id, tz_mapped)
    reset_daily_words_cache(chat_id)
    await bot.send_message(chat_id, f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {tz}.", reply_markup=notification_settings_menu_keyboard())
    await callback.answer()

async def process_text_setting(message: types.Message):
    chat_id = message.chat.id
    if chat_id not in pending_settings:
        return
    setting_type = pending_settings.pop(chat_id)
    text = message.text.strip()
    if not text.isdigit():
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=notification_settings_menu_keyboard())
        return
    value = int(text)
    if setting_type == "words":
        if not (1 <= value <= 20):
            await message.answer("–û—à–∏–±–∫–∞: —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20.", reply_markup=notification_settings_menu_keyboard())
            return
        crud.update_user_words_per_day(chat_id, value)
        reset_daily_words_cache(chat_id)
        await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {value}.", reply_markup=notification_settings_menu_keyboard())
    elif setting_type == "repetitions":
        if not (1 <= value <= 5):
            await message.answer("–û—à–∏–±–∫–∞: —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5.", reply_markup=notification_settings_menu_keyboard())
            return
        crud.update_user_notifications(chat_id, value)
        reset_daily_words_cache(chat_id)
        await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {value}.", reply_markup=notification_settings_menu_keyboard())

async def process_notification_back(callback: types.CallbackQuery, bot: Bot):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ"""
    await callback.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:", reply_markup=settings_menu_keyboard())
    await callback.answer()

def register_settings_handlers(dp: Dispatcher, bot: Bot):
    """Register all settings handlers"""
    # Basic settings handlers
    dp.register_callback_query_handler(
        partial(show_settings_callback, bot=bot),
        lambda c: c.data == "menu:settings"
    )
    dp.register_callback_query_handler(
        partial(process_notification_back, bot=bot),
        lambda c: c.data == "settings:back"
    )
    dp.register_callback_query_handler(
        partial(process_settings_choice_callback, bot=bot),
        lambda c: c.data and c.data.startswith("settings:") and c.data != "settings:back"
    )
    dp.register_callback_query_handler(
        partial(process_set_level_callback, bot=bot),
        lambda c: c.data and c.data.startswith("set_level:")
    )
    dp.register_callback_query_handler(
        partial(process_set_timezone_callback, bot=bot),
        lambda c: c.data and c.data.startswith("set_timezone:")
    )
    
    # Set change confirmation handlers
    dp.register_callback_query_handler(
        partial(handle_confirm_set_change, bot=bot),
        lambda c: c.data and c.data.startswith("confirm_set_change:")
    )
    dp.register_callback_query_handler(
        partial(handle_set_change_confirmed, bot=bot),
        lambda c: c.data and c.data.startswith("set_change_confirmed:")
    )
    dp.register_callback_query_handler(
        partial(handle_set_change_cancelled, bot=bot),
        lambda c: c.data == "set_change_cancel"
    )
    
    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    dp.register_callback_query_handler(
        partial(handle_set_by_index, bot=bot),
        lambda c: c.data and c.data.startswith("set_idx:")
    )
    dp.register_callback_query_handler(
        partial(handle_confirm_set_by_index, bot=bot),
        lambda c: c.data and c.data.startswith("confirm_idx:")
    )
    dp.register_callback_query_handler(
        partial(handle_set_change_confirmed_by_index, bot=bot),
        lambda c: c.data and c.data.startswith("set_chg_idx:")
    )
    
    # Final choose_set handler (keep last)
    dp.register_callback_query_handler(
        partial(process_choose_set, bot=bot),
        lambda c: c.data and c.data.startswith("choose_set:")
    )
    
    # Text input handler
    dp.register_message_handler(process_text_setting, content_types=['text'])


async def process_settings_mysettings(callback: types.CallbackQuery, bot: Bot):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    chat_id = callback.from_user.id
    user = crud.get_user(chat_id)
    
    if not user:
        await callback.message.edit_text(
            "‚ö†Ô∏è *–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.",
            parse_mode="Markdown",
            reply_markup=types.InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu:back")
            )
        )
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–µ—Ç, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        current_set = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç –≤ –∫—ç—à–µ
        if chat_id in user_set_selection:
            current_set = user_set_selection[chat_id]
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, —Å–º–æ—Ç—Ä–∏–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if not current_set and len(user) > 6 and user[6]:
            current_set = user[6]
        
        # –ï—Å–ª–∏ —Å–µ—Ç –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π
        if not current_set:
            level = user[1]
            default_set = DEFAULT_SETS.get(level)
            if default_set:
                try:
                    crud.update_user_chosen_set(chat_id, default_set)
                    user_set_selection[chat_id] = default_set
                    current_set = default_set
                    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∞–∑–æ–≤—ã–π —Å–µ—Ç {default_set} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–æ—Ñ–∏–ª—è")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–∞–∑–æ–≤–æ–≥–æ —Å–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_settings = {
            "level": user[1],
            "words_per_day": user[2],
            "repetitions": user[3],
            "timezone": user[5] if len(user) > 5 and user[5] else "–ù–µ –∑–∞–¥–∞–Ω",
            "chosen_set": current_set or "–ù–µ –≤—ã–±—Ä–∞–Ω"
        }
        
        # –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        message = "üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
        message += f"üî§ *–£—Ä–æ–≤–µ–Ω—å:* {user_settings['level']}\n"
        message += f"üìä *–°–ª–æ–≤ –≤ –¥–µ–Ω—å:* {user_settings['words_per_day']}\n"
        message += f"üîÑ *–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:* {user_settings['repetitions']}\n"
        message += f"üåê *–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:* {user_settings['timezone']}\n"
        message += f"üìö *–í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä:* {user_settings['chosen_set']}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        try:
            learned_words = crud.get_learned_words(chat_id)
            message += f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n"
            message += f"üìù –í—ã—É—á–µ–Ω–æ —Å–ª–æ–≤: {len(learned_words)}\n"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        await callback.message.edit_text(
            message,
            parse_mode="Markdown",
            reply_markup=settings_menu_keyboard()
        )

async def handle_confirm_set_change(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã —Å–µ—Ç–∞. 
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
    """
    chat_id = callback.from_user.id
    try:
        # Extract encoded set name from callback data
        _, encoded_set_name = callback.data.split(":", 1)
        # URL-decode the set name
        set_name = urllib.parse.unquote(encoded_set_name)
        
        # Get current set name
        current_set = user_set_selection.get(chat_id, "–Ω–µ –≤—ã–±—Ä–∞–Ω")
        
        # Create confirmation keyboard
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, —Å–º–µ–Ω–∏—Ç—å", callback_data=f"set_change_confirmed:{encoded_set_name}"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="set_change_cancel")
        )
        
        # Send confirmation message
        await bot.send_message(
            chat_id,
            f"‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ! –°–º–µ–Ω–∞ —Å–µ—Ç–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ–ª–Ω–æ–º—É —Å–±—Ä–æ—Å—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.*\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å–µ—Ç: *{current_set}*\n"
            f"–ù–æ–≤—ã–π —Å–µ—Ç: *{set_name}*\n\n"
            f"–ü—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∞ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω. –í—ã —É–≤–µ—Ä–µ–Ω—ã?",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error in handle_confirm_set_change: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

async def handle_set_change_confirmed(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã —Å–µ—Ç–∞.
    –û—á–∏—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∞.
    """
    chat_id = callback.from_user.id
    try:
        # Extract the encoded set name
        _, encoded_set_name = callback.data.split(":", 1)
        set_name = urllib.parse.unquote(encoded_set_name)
        
        # Clear user's dictionary
        try:
            crud.clear_learned_words_for_user(chat_id)
            logger.info(f"Dictionary cleared for user {chat_id} due to set change")
        except Exception as e:
            logger.error(f"Error clearing dictionary: {e}")
            await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ª–æ–≤–∞—Ä—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await callback.answer()
            return
        
        # Get user level
        user = crud.get_user(chat_id)
        if not user:
            await bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            await callback.answer()
            return
            
        user_level = user[1]
        set_path = os.path.join(LEVELS_DIR, user_level, f"{set_name}.txt")
        
        if not os.path.exists(set_path):
            logger.warning(f"Set file not found: {set_path}")
            await bot.send_message(chat_id, f"–°–µ—Ç {set_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É—Ä–æ–≤–Ω—è {user_level}.")
            await callback.answer()
            return
        
        # Read file content
        try:
            with open(set_path, "r", encoding="utf-8") as f:
                content = f.read()
        except UnicodeDecodeError:
            try:
                with open(set_path, "r", encoding="cp1251") as f:
                    content = f.read()
            except Exception as e:
                logger.error(f"Error reading file: {e}")
                await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await callback.answer()
                return
        except Exception as e:
            logger.error(f"Error reading file: {e}")
            await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await callback.answer()
            return
        
        # Store the selected set and reset cache
        user_set_selection[chat_id] = set_name
        reset_daily_words_cache(chat_id)
        
        # Store the selected set and reset cache
        user_set_selection[chat_id] = set_name
        reset_daily_words_cache(chat_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –¥–ª—è —Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è
        sticker_id = get_congratulation_sticker()
        if sticker_id:
            await bot.send_sticker(chat_id, sticker_id)

        # Format message with truncation for large sets
        intro_text = f"–í—ã–±—Ä–∞–Ω —Å–µ—Ç {set_name} –¥–ª—è —É—Ä–æ–≤–Ω—è {user_level}.\n‚ö†Ô∏è –°–ª–æ–≤–∞—Ä—å —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.\n–°–ª–æ–≤–∞ —Å–µ—Ç–∞:\n\n"
        
        # Split content into lines
        lines = content.split('\n')
        
        # Max message length for Telegram
        MAX_MESSAGE_LENGTH = 3800
        
        # Check if content is too large
        if len(intro_text) + len(content) > MAX_MESSAGE_LENGTH:
            preview_content = ""
            preview_line_count = 0
            word_count = len(lines)
            
            for line in lines:
                if len(intro_text) + len(preview_content) + len(line) + 100 < MAX_MESSAGE_LENGTH:
                    preview_content += line + "\n"
                    preview_line_count += 1
                else:
                    break
            
            note = f"\n\n...–∏ –µ—â–µ {word_count - preview_line_count} —Å–ª–æ–≤(–∞). –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ –æ–±—É—á–µ–Ω–∏–∏."
            message_text = intro_text + preview_content + note
        else:
            message_text = intro_text + content
        
        # Send the message
        await bot.send_message(chat_id, message_text, reply_markup=settings_menu_keyboard())
        
    except Exception as e:
        logger.error(f"Error in handle_set_change_confirmed: {e}")
        await bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()


async def handle_set_change_cancelled(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–º–µ–Ω—ã —Å–µ—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É —Å–µ—Ç–æ–≤.
    """
    chat_id = callback.from_user.id
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–µ—Ç–æ–≤
    await process_my_sets(callback, bot)
    await callback.answer("–°–º–µ–Ω–∞ —Å–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

#handlers/__init__.py
# handlers/__init__.py

from .commands import register_command_handlers, set_commands
from .words import register_words_handlers
from .learning import register_learning_handlers
from .dictionary import register_dictionary_handlers
from .settings import register_settings_handlers
from .help import register_help_handlers
from .back import handle_back  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
from .test_level import register_level_test_handlers
from .quiz import register_quiz_handlers

def register_handlers(dp, bot):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    register_command_handlers(dp, bot)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    register_words_handlers(dp, bot)
    register_learning_handlers(dp, bot)
    register_dictionary_handlers(dp, bot)
    register_settings_handlers(dp, bot)
    register_help_handlers(dp, bot)
    dp.register_callback_query_handler(handle_back, lambda c: c.data == "menu:back")
    register_level_test_handlers(dp, bot)
    register_quiz_handlers(dp, bot)

#handlers/help.py
# handlers/help.py
from aiogram import types, Dispatcher, Bot
from keyboards.submenus import help_menu_keyboard
from keyboards.main_menu import main_menu_keyboard
from functools import partial

async def show_help_callback(callback: types.CallbackQuery, bot: Bot):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –ø–æ–º–æ—â–∏:", reply_markup=help_menu_keyboard())
    await callback.answer()

async def process_help_about_callback(callback: types.CallbackQuery, bot: Bot):
    await callback.message.edit_text(
        "–û –±–æ—Ç–µ:\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π, –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ.",
        reply_markup=help_menu_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    )
    await callback.answer()

async def process_help_commands_callback(callback: types.CallbackQuery, bot: Bot):
    await callback.message.edit_text(
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫\n/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/mode - –í—ã–±—Ä–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å\n/profile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/pay - –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n/reset - –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n/help - –°–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–º–æ—â—å",
        reply_markup=help_menu_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    )
    await callback.answer()

async def process_help_feedback_callback(callback: types.CallbackQuery, bot: Bot):
    await callback.message.edit_text(
        "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ admin@example.com",
        reply_markup=help_menu_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    )
    await callback.answer()


def register_help_handlers(dp: Dispatcher, bot: Bot):
    dp.register_callback_query_handler(
        partial(show_help_callback, bot=bot),
        lambda c: c.data == "menu:help"
    )
    dp.register_callback_query_handler(
        partial(process_help_about_callback, bot=bot),
        lambda c: c.data == "help:about"
    )
    dp.register_callback_query_handler(
        partial(process_help_commands_callback, bot=bot),
        lambda c: c.data == "help:commands"
    )
    dp.register_callback_query_handler(
        partial(process_help_feedback_callback, bot=bot),
        lambda c: c.data == "help:feedback"
    )


#handlers/test_level.py
# handlers/test_level.py
import os
import random
from aiogram import types, Dispatcher, Bot
from database import crud
import logging

# Import the visual helpers
from utils.visual_helpers import format_level_test_question, format_level_test_results


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–ª—é—á ‚Äì chat_id)
level_test_states = {}

# –°–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
LEVELS = ["A1", "A2", "B1", "B2", "C1", "C2"]

def load_words_for_level_file(level: str):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞ levels/<level>.txt.
    –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Ñ–æ—Ä–º–∞—Ç: "word - translation1, translation2, ..."
    """
    filename = os.path.join("levels", f"{level}.txt")
    words = []
    
    try:
        if not os.path.exists(filename):
            logger.warning(f"Level file not found: {filename}")
            return words
            
        with open(filename, encoding="utf-8") as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue
                parts = line.split(" - ")
                if len(parts) < 2:
                    continue
                english = parts[0].strip()
                translation = parts[1].strip()
                words.append({"word": english, "translation": translation})
                
        logger.debug(f"Loaded {len(words)} words from level {level}")
        return words
    except FileNotFoundError:
        logger.error(f"Level file not found: {filename}")
        return words
    except PermissionError:
        logger.error(f"Permission denied when accessing level file: {filename}")
        return words
    except UnicodeDecodeError:
        logger.warning(f"Unicode decode error in file {filename}, trying with cp1251 encoding")
        try:
            with open(filename, encoding="cp1251") as f:
                for line in f:
                    line = line.strip()
                    if not line:
                        continue
                    parts = line.split(" - ")
                    if len(parts) < 2:
                        continue
                    english = parts[0].strip()
                    translation = parts[1].strip()
                    words.append({"word": english, "translation": translation})
            logger.debug(f"Loaded {len(words)} words from level {level} with cp1251 encoding")
            return words
        except Exception as e:
            logger.error(f"Failed to load file with alternative encoding: {e}")
            return words
    except Exception as e:
        logger.error(f"Error loading words from level {level}: {e}")
        return words

def generate_level_test_questions():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è.
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö —É—Ä–æ–≤–Ω–µ–π
    –≤–º–µ—Å—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å–µ–π "–í–∞—Ä–∏–∞–Ω—Ç N".
    """
    try:
        questions = []
        # –ó–∞—Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∑–∏–º —Å–ª–æ–≤–∞ –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–ª–∞ –æ—Ç–≤–ª–µ–∫–∞—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        all_words_by_level = {}
        all_translations = []
        
        for level in LEVELS:
            words = load_words_for_level_file(level)
            if words:
                all_words_by_level[level] = words
                # –°—Ä–∞–∑—É —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π –ø—É–ª –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –æ—Ç–≤–ª–µ–∫–∞—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                all_translations.extend([w["translation"] for w in words])
        
        for level in LEVELS:
            try:
                words = all_words_by_level.get(level, [])
                if not words:
                    logger.warning(f"No words found for level {level}")
                    continue
                
                # –ï—Å–ª–∏ –≤ —Ñ–∞–π–ª–µ –º–µ–Ω—å—à–µ 3 —Å–ª–æ–≤–∞, –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ; –∏–Ω–∞—á–µ —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º 3 —Å–ª–æ–≤–∞
                if len(words) < 3:
                    selected = words
                else:
                    selected = random.sample(words, 3)
                
                for entry in selected:
                    try:
                        correct = entry["translation"]
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É–ª –æ—Ç–≤–ª–µ–∫–∞—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π, –∏—Å–∫–ª—é—á–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                        distractor_pool = [t for t in all_translations if t != correct]
                        
                        if len(distractor_pool) >= 3:
                            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –≤—ã–±–∏—Ä–∞–µ–º –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
                            distractors = random.sample(distractor_pool, 3)
                        else:
                            # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º random.choices —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏
                            # –≠—Ç–æ –ª—É—á—à–µ, —á–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ "–í–∞—Ä–∏–∞–Ω—Ç N"
                            distractors = random.choices(distractor_pool, k=3) if distractor_pool else ["???", "???", "???"]
                        
                        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π + –ª–æ–∂–Ω—ã–µ)
                        options_temp = [correct] + distractors
                        random.shuffle(options_temp)
                        
                        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ options_temp; –µ–≥–æ –∏–Ω–¥–µ–∫—Å –∑–∞–ø–æ–º–∏–Ω–∞–µ–º
                        correct_index = options_temp.index(correct)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é "–ù–µ –∑–Ω–∞—é" –≤ –∫–æ–Ω–µ—Ü
                        options = options_temp + ["–ù–µ –∑–Ω–∞—é"]
                        
                        questions.append({
                            "level": level,
                            "word": entry["word"],
                            "correct": correct,
                            "options": options,
                            "correct_index": correct_index
                        })
                    except KeyError as e:
                        logger.error(f"Missing required key in word entry for level {level}: {e}")
                        continue
                    except Exception as e:
                        logger.error(f"Error processing question for level {level}: {e}")
                        continue
            except Exception as e:
                logger.error(f"Error generating questions for level {level}: {e}")
                continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–æ—Ä—è–¥–∫—É —É—Ä–æ–≤–Ω–µ–π
        def level_order(q):
            try:
                return LEVELS.index(q["level"])
            except ValueError:
                return 999
        questions.sort(key=level_order)
        
        logger.info(f"Generated {len(questions)} level test questions")
        return questions
    except Exception as e:
        logger.error(f"Error in generate_level_test_questions: {e}")
        return []

async def start_level_test(chat_id: int, bot: Bot):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã (–ø–æ 3 –Ω–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã).
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞ –≤ level_test_states.
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å.
    """
    questions = generate_level_test_questions()
    if not questions:
        await bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã —É—Ä–æ–≤–Ω–µ–π.")
        return
    level_test_states[chat_id] = {
        "questions": questions,
        "current_index": 0,
        "results": []  # –°–ø–∏—Å–æ–∫ True/False –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    }
    await send_next_level_question(chat_id, bot)

async def send_next_level_question(chat_id: int, bot: Bot):
    """Send the next level test question with enhanced formatting"""
    state = level_test_states.get(chat_id)
    if not state:
        return
    
    if state["current_index"] >= len(state["questions"]):
        await finish_level_test(chat_id, bot)
        return
    
    question = state["questions"][state["current_index"]]
    
    # Use the visual helper to format the question
    formatted_question = format_level_test_question(
        state["current_index"],
        len(state["questions"]),
        question["level"],
        question["word"]
    )
    
    # Create keyboard with improved layout
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    
    # First two options
    row1 = [
        types.InlineKeyboardButton(question["options"][0], callback_data=f"lvltest:{state['current_index']}:{0}"),
        types.InlineKeyboardButton(question["options"][1], callback_data=f"lvltest:{state['current_index']}:{1}")
    ]
    
    # Next two options
    row2 = [
        types.InlineKeyboardButton(question["options"][2], callback_data=f"lvltest:{state['current_index']}:{2}"),
        types.InlineKeyboardButton(question["options"][3], callback_data=f"lvltest:{state['current_index']}:{3}")
    ]
    
    # "Don't know" and "Stop test" buttons
    row3 = [
        types.InlineKeyboardButton(question["options"][4], callback_data=f"lvltest:{state['current_index']}:{4}"),
        types.InlineKeyboardButton("‚õî Stop Test", callback_data="lvltest:stop")
    ]
    
    keyboard.row(*row1)
    keyboard.row(*row2)
    keyboard.row(*row3)
    
    await bot.send_message(
        chat_id, 
        formatted_question,
        parse_mode="Markdown", 
        reply_markup=keyboard
    )

async def handle_level_test_answer(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç", —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è.
    - –ò–Ω–∞—á–µ, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º,
      —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.
    """
    if callback.data == "lvltest:stop":
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞
        await bot.send_message(callback.from_user.id, "–¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        if callback.from_user.id in level_test_states:
            del level_test_states[callback.from_user.id]
        await callback.answer()
        return

    data = callback.data.split(":")
    if len(data) != 3:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    _, q_index_str, option_index_str = data
    try:
        q_index = int(q_index_str)
        option_index = int(option_index_str)
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    chat_id = callback.from_user.id
    state = level_test_states.get(chat_id)
    if not state or q_index >= len(state["questions"]):
        await callback.answer("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω.", show_alert=True)
        return
    question = state["questions"][q_index]
    is_correct = (option_index == question["correct_index"])
    state["results"].append(is_correct)
    state["current_index"] += 1
    response_text = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!" if is_correct else f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['correct']}"
    await callback.answer(response_text)
    await send_next_level_question(chat_id, bot)

async def finish_level_test(chat_id: int, bot: Bot):
    """Updated to use improved result formatting"""
    state = level_test_states.get(chat_id)
    if not state:
        return
    
    results = state["results"]
    
    # Group results by level
    results_by_level = {}
    for i, question in enumerate(state["questions"]):
        level = question["level"]
        if level not in results_by_level:
            results_by_level[level] = [0, 0]  # [correct, total]
        
        results_by_level[level][1] += 1
        if results[i]:
            results_by_level[level][0] += 1
    
    # Determine new level
    new_level = "A1"
    for level in LEVELS:
        score, total = results_by_level.get(level, [0, 0])
        if total > 0 and score >= 2:
            new_level = level
        else:
            break

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –∏ –∏–∑ –∫—ç—à–∞
    current_set = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç –≤ –∫—ç—à–µ
    try:
        from handlers.settings import user_set_selection
        if chat_id in user_set_selection:
            current_set = user_set_selection[chat_id]
    except ImportError:
        logger.error("Could not import user_set_selection, unable to preserve chosen set")

    # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, —Å–º–æ—Ç—Ä–∏–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = crud.get_user(chat_id)
    if not current_set and user and len(user) > 6:
        current_set = user[6]

    # Update user level in database
    crud.update_user_level(chat_id, new_level)
    
    # –ï—Å–ª–∏ —Å–µ—Ç –≤—Å–µ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    if not current_set:
        from config import DEFAULT_SETS
        current_set = DEFAULT_SETS.get(new_level)
        if current_set:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∫—ç—à
            crud.update_user_chosen_set(chat_id, current_set)
            try:
                from handlers.settings import user_set_selection
                user_set_selection[chat_id] = current_set
            except ImportError:
                logger.error("Could not import user_set_selection, unable to update chosen set in memory")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–ª–æ–≤
    reset_daily_words_cache(chat_id)

    # Use the visual helper to format the results
    formatted_results = format_level_test_results(results_by_level, new_level)
    
    # Create keyboard with main menu button
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("Main Menu", callback_data="menu:back"))
    
    await bot.send_message(
        chat_id, 
        formatted_results,
        parse_mode="Markdown", 
        reply_markup=keyboard
    )
    
    del level_test_states[chat_id]


def register_level_test_handlers(dp: Dispatcher, bot: Bot):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞:
      - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–æ callback_data "test_level:start"
      - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "lvltest:"
    """
    dp.register_callback_query_handler(
        lambda c: start_level_test(c.from_user.id, bot),
        lambda c: c.data == "test_level:start"
    )
    dp.register_callback_query_handler(
        lambda c: handle_level_test_answer(c, bot),
        lambda c: c.data and c.data.startswith("lvltest:")
    )

#handlers/learning.py

# –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
import random
from aiogram import types, Dispatcher, Bot
from keyboards.submenus import learning_menu_keyboard, learning_settings_keyboard
from keyboards.main_menu import main_menu_keyboard
from utils.helpers import load_words_for_set, extract_english
from utils.quiz_helpers import load_quiz_data
from database import crud
from database.db import db_manager
from functools import partial
import logging
import os
from config import LEVELS_DIR

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞
pending_learning_settings = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ (–∫–∞–∫ –≤ quiz.py)
learning_test_states = {}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—É—á–µ–Ω–∏—è
def ensure_learning_columns():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—É—á–µ–Ω–∏—è"""
    try:
        from database.db import db_manager
        with db_manager.get_cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("PRAGMA table_info(users)")
            columns = [row[1] for row in cursor.fetchall()]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if 'test_words_count' not in columns:
                cursor.execute("ALTER TABLE users ADD COLUMN test_words_count INTEGER DEFAULT 5")
                
            if 'memorize_words_count' not in columns:
                cursor.execute("ALTER TABLE users ADD COLUMN memorize_words_count INTEGER DEFAULT 5")
                
            # –ö–æ–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db_manager.conn.commit()
            
        logger.info("–ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–æ–Ω–æ–∫: {e}")

# –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
ensure_learning_columns()

async def handle_learning_menu(callback: types.CallbackQuery, bot: Bot):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    
    await callback.message.edit_text("üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è:", reply_markup=learning_menu_keyboard())
    await callback.answer()

async def handle_learning_settings(callback: types.CallbackQuery, bot: Bot):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è"""
    await callback.message.edit_text(
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ –∏ –∑–∞—É—á–∏–≤–∞–Ω–∏—è.",
        parse_mode="Markdown",
        reply_markup=learning_settings_keyboard()
    )
    await callback.answer()

async def handle_test_settings(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ—Å—Ç–∞ –ø–æ —Å–ª–æ–≤–∞—Ä—é"""
    chat_id = callback.from_user.id
    user = crud.get_user(chat_id)
    if not user:
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
    test_words_count = user[7] if len(user) > 7 and user[7] else 5
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞
    pending_learning_settings[chat_id] = "test_words"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ test_words")
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="learning:settings"))
    
    await callback.message.edit_text(
        f"üìä *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞ –ø–æ —Å–ª–æ–≤–∞—Ä—é*\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ—Å—Ç–µ: *{test_words_count}*\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ (–æ—Ç 1 –¥–æ 20):\n"
        f"–ï—Å–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –º–µ–Ω—å—à–µ —Å–ª–æ–≤, —á–µ–º —É–∫–∞–∑–∞–Ω–æ, –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞.",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback.answer()



async def handle_memorize_settings(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞—É—á–∏–≤–∞–Ω–∏—è —Å–µ—Ç–∞"""
    chat_id = callback.from_user.id
    user = crud.get_user(chat_id)
    if not user:
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
    memorize_words_count = user[8] if len(user) > 8 and user[8] else 5
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞
    pending_learning_settings[chat_id] = "memorize_words"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ memorize_words")
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="learning:settings"))
    
    await callback.message.edit_text(
        f"üìù *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—É—á–∏–≤–∞–Ω–∏—è —Å–µ—Ç–∞*\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –∑–∞—É—á–∏–≤–∞–Ω–∏–∏: *{memorize_words_count}*\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ (–æ—Ç 1 –¥–æ 20):",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback.answer()

# –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∏—Å–ª–∞
def is_valid_number(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 20"""
    if not text.isdigit():
        return False
    value = int(text)
    return 1 <= value <= 20

async def handle_memorize_set(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –∑–∞—É—á–∏–≤–∞–Ω–∏—è —Å–µ—Ç–∞"""
    chat_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    from database import crud
    user = crud.get_user(chat_id)
    if not user:
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç
    level = user[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —Å–µ—Ç –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    chosen_set = None
    if len(user) > 6 and user[6]:
        chosen_set = user[6]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫—ç—à–µ –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    from handlers.settings import user_set_selection
    if not chosen_set and chat_id in user_set_selection:
        chosen_set = user_set_selection[chat_id]
    
    # –ï—Å–ª–∏ —Å–µ—Ç –≤—Å–µ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not chosen_set:
        from config import DEFAULT_SETS
        chosen_set = DEFAULT_SETS.get(level)
        if chosen_set:
            crud.update_user_chosen_set(chat_id, chosen_set)
            user_set_selection[chat_id] = chosen_set
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞
    import os
    from config import LEVELS_DIR
    set_file_path = os.path.join(LEVELS_DIR, level, f"{chosen_set}.txt")
    if not os.path.exists(set_file_path):
        await callback.message.edit_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è —Å–µ—Ç–∞ '{chosen_set}' —É—Ä–æ–≤–Ω—è {level}.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
            parse_mode="Markdown",
            reply_markup=learning_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ —Å–µ—Ç–∞
    set_words = []
    try:
        with open(set_file_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line:
                    set_words.append(line)
    except UnicodeDecodeError:
        try:
            with open(set_file_path, 'r', encoding='cp1251') as f:
                for line in f:
                    line = line.strip()
                    if line:
                        set_words.append(line)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞: {e}")
            await callback.message.edit_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞.",
                parse_mode="Markdown",
                reply_markup=learning_menu_keyboard()
            )
            await callback.answer()
            return
    
    if not set_words:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –°–µ—Ç '{chosen_set}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤.",
            parse_mode="Markdown",
            reply_markup=learning_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è
    memorize_words_count = user[8] if len(user) > 8 and user[8] else 5
    memorize_words_count = min(memorize_words_count, len(set_words))
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–µ—Ç–∞
    selected_words = random.sample(set_words, memorize_words_count)
    
    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    learned_raw = crud.get_learned_words(chat_id)
    learned_set = set(extract_english(item[0]).lower() for item in learned_raw)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–≤–∏–∑–∞
    from utils.quiz_helpers import load_quiz_data
    quiz_data = load_quiz_data(level, chosen_set)
    if not quiz_data:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–≤–∏–∑–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è {level}.",
            parse_mode="Markdown",
            reply_markup=learning_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    translations = {item["word"].lower(): item["translation"] for item in quiz_data}
    
    # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è
    questions = []
    for word_line in selected_words:
        english_word = extract_english(word_line).lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
        if " - " in word_line:
            correct_translation = word_line.split(" - ", 1)[1].strip()
        elif " ‚Äì " in word_line:
            correct_translation = word_line.split(" ‚Äì ", 1)[1].strip()
        elif ": " in word_line:
            correct_translation = word_line.split(": ", 1)[1].strip()
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            correct_translation = translations.get(english_word, english_word)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–∏—Å–∫–ª—é—á–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
        options = [correct_translation]
        all_translations = list(translations.values())
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –ø—É–ª–∞ –¥–∏—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–≤
        if correct_translation in all_translations:
            all_translations.remove(correct_translation)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å—Ç—Ä–∞–∫—Ç–æ—Ä—ã
        if len(all_translations) >= 3:
            options.extend(random.sample(all_translations, 3))
        else:
            options.extend(random.choices(all_translations, k=3) if all_translations else ["???", "???", "???"])
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        random.shuffle(options)
        
        correct_index = options.index(correct_translation)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º –∏–ª–∏ –∏–∑—É—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        is_revision = english_word.lower() in learned_set
        
        questions.append({
            "word": english_word,  # –¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –≤–º–µ—Å—Ç–æ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏
            "correct": correct_translation,
            "options": options,
            "correct_index": correct_index,
            "is_revision": is_revision
        })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
    learning_test_states[chat_id] = {
        "questions": questions,
        "current_index": 0,
        "correct": 0,
        "is_revision": False,  # –≠—Ç–æ –∑–∞—É—á–∏–≤–∞–Ω–∏–µ, –∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
        "test_type": "memorize"
    }
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç
    await callback.answer()
    await send_learning_test_question(chat_id, bot)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def process_learning_settings_input(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞/–∑–∞—É—á–∏–≤–∞–Ω–∏—è"""
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –≤–≤–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id not in pending_learning_settings:
        logger.debug(f"Chat ID {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ pending_learning_settings, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        return False  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–≥–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    setting_type = pending_learning_settings[chat_id]  # –ù–µ —É–¥–∞–ª—è–µ–º –ø–æ–∫–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    text = message.text.strip()
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–≤–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {setting_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {text}")
    
    if not text.isdigit():
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=learning_settings_keyboard()
        )
        return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    
    value = int(text)
    if not (1 <= value <= 20):
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20.",
            reply_markup=learning_settings_keyboard()
        )
        return True
    
    try:
        if setting_type == "test_words":
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º crud —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞
            crud.update_user_test_words_count(chat_id, value)
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {value}")
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
            del pending_learning_settings[chat_id]
            
            await message.answer(
                f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {value}.",
                reply_markup=learning_settings_keyboard()
            )
        elif setting_type == "memorize_words":
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º crud —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—É—á–∏–≤–∞–Ω–∏—è
            crud.update_user_memorize_words_count(chat_id, value)
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {value}")
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
            del pending_learning_settings[chat_id]
            
            await message.answer(
                f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {value}.",
                reply_markup=learning_settings_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if chat_id in pending_learning_settings:
            del pending_learning_settings[chat_id]
            
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=learning_settings_keyboard()
        )
    
    return True  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏


async def handle_dictionary_test(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ —Å–ª–æ–≤–∞—Ä—é"""
    chat_id = callback.from_user.id
    user = crud.get_user(chat_id)
    if not user:
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    learned_words = crud.get_learned_words(chat_id)
    if not learned_words:
        await callback.message.edit_text(
            "üìö *–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç*\n\n"
            "–ü—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑—ã, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –≤ —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å!",
            parse_mode="Markdown",
            reply_markup=learning_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    test_words_count = user[7] if len(user) > 7 and user[7] else 5
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –ø–æ —Å–ª–æ–≤–∞—Ä—é —Å {test_words_count} —Å–ª–æ–≤–∞–º–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ
    if test_words_count > len(learned_words):
        logger.info(f"–í —Å–ª–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –º–µ–Ω—å—à–µ —Å–ª–æ–≤ ({len(learned_words)}), —á–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–æ ({test_words_count})")
        test_words_count = len(learned_words)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    selected_words = random.sample(learned_words, test_words_count)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–≤–∏–∑–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    level = user[1]
    chosen_set = user[6] if len(user) > 6 and user[6] else None
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–≤–∏–∑–∞
    quiz_data = load_quiz_data(level, chosen_set)
    if not quiz_data:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–≤–∏–∑–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è {level}.",
            parse_mode="Markdown",
            reply_markup=learning_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    translations = {item["word"].lower(): item["translation"] for item in quiz_data}
    
    # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞
    questions = []
    for word, translation in selected_words:
        english_word = extract_english(word).lower()
        correct_translation = translation
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–∏—Å–∫–ª—é—á–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
        options = [correct_translation]
        all_translations = list(translations.values())
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –ø—É–ª–∞ –¥–∏—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–≤
        if correct_translation in all_translations:
            all_translations.remove(correct_translation)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å—Ç—Ä–∞–∫—Ç–æ—Ä—ã
        if len(all_translations) >= 3:
            options.extend(random.sample(all_translations, 3))
        else:
            options.extend(random.choices(all_translations, k=3) if all_translations else ["???", "???", "???"])
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        random.shuffle(options)
        
        correct_index = options.index(correct_translation)
        
        questions.append({
            "word": word,
            "correct": correct_translation,
            "options": options,
            "correct_index": correct_index,
            "is_revision": True,  # –≠—Ç–æ —Ç–µ—Å—Ç –ø–æ —Å–ª–æ–≤–∞—Ä—é, —Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏
            "test_type": "dictionary"  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞ –¥–ª—è –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
        })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
    learning_test_states[chat_id] = {
        "questions": questions,
        "current_index": 0,
        "correct": 0,
        "is_revision": True,
        "test_type": "dictionary"
    }
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç
    await callback.answer()
    await send_learning_test_question(chat_id, bot)

async def handle_memorize_set(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –∑–∞—É—á–∏–≤–∞–Ω–∏—è —Å–µ—Ç–∞"""
    chat_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = crud.get_user(chat_id)
    if not user:
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç
    level = user[1]
    
    # –ò—â–µ–º —Å–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    chosen_set = None
    if len(user) > 6 and user[6]:
        chosen_set = user[6]
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–µ—Ç '{chosen_set}' –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    
    # –ï—Å–ª–∏ —Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
    if not chosen_set:
        from config import DEFAULT_SETS
        chosen_set = DEFAULT_SETS.get(level)
        if chosen_set:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∫—ç—à
            crud.update_user_chosen_set(chat_id, chosen_set)
            from handlers.settings import user_set_selection
            user_set_selection[chat_id] = chosen_set
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–µ—Ç '{chosen_set}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        else:
            await callback.message.edit_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è {level}.",
                parse_mode="Markdown",
                reply_markup=learning_menu_keyboard()
            )
            await callback.answer()
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞
    set_file_path = os.path.join(LEVELS_DIR, level, f"{chosen_set}.txt")
    
    if not os.path.exists(set_file_path):
        # –¢—É—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞ (—Å–æ–∫—Ä–∞—â–µ–Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
        await callback.message.edit_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è —Å–µ—Ç–∞ '{chosen_set}' —É—Ä–æ–≤–Ω—è {level}.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
            parse_mode="Markdown",
            reply_markup=learning_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ —Å–µ—Ç–∞
    set_words = []
    try:
        with open(set_file_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line:
                    set_words.append(line)
    except UnicodeDecodeError:
        try:
            with open(set_file_path, 'r', encoding='cp1251') as f:
                for line in f:
                    line = line.strip()
                    if line:
                        set_words.append(line)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞: {e}")
            await callback.message.edit_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞.",
                parse_mode="Markdown",
                reply_markup=learning_menu_keyboard()
            )
            await callback.answer()
            return
    
    if not set_words:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –°–µ—Ç '{chosen_set}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤.",
            parse_mode="Markdown",
            reply_markup=learning_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    memorize_words_count = user[8] if len(user) > 8 and user[8] else 5
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞—É—á–∏–≤–∞–Ω–∏–µ —Å–µ—Ç–∞ —Å {memorize_words_count} —Å–ª–æ–≤–∞–º–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∞
    if memorize_words_count > len(set_words):
        logger.info(f"–í —Å–µ—Ç–µ '{chosen_set}' –º–µ–Ω—å—à–µ —Å–ª–æ–≤ ({len(set_words)}), —á–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–æ ({memorize_words_count})")
        memorize_words_count = len(set_words)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–µ—Ç–∞
    selected_words = random.sample(set_words, memorize_words_count)
    
    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    learned_raw = crud.get_learned_words(chat_id)
    learned_set = set(extract_english(item[0]).lower() for item in learned_raw)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–≤–∏–∑–∞
    quiz_data = load_quiz_data(level, chosen_set)
    if not quiz_data:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–≤–∏–∑–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è {level}.",
            parse_mode="Markdown",
            reply_markup=learning_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    translations = {item["word"].lower(): item["translation"] for item in quiz_data}
    
    # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è
    questions = []
    for word_line in selected_words:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞
        english_part = ""
        russian_part = ""
        
        if " - " in word_line:
            parts = word_line.split(" - ", 1)
            english_part = parts[0].strip()
            russian_part = parts[1].strip() if len(parts) > 1 else ""
        elif " ‚Äì " in word_line:
            parts = word_line.split(" ‚Äì ", 1)
            english_part = parts[0].strip()
            russian_part = parts[1].strip() if len(parts) > 1 else ""
        elif ": " in word_line:
            parts = word_line.split(": ", 1)
            english_part = parts[0].strip()
            russian_part = parts[1].strip() if len(parts) > 1 else ""
        else:
            english_part = extract_english(word_line)
            russian_part = translations.get(english_part.lower(), "")
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        if not russian_part:
            russian_part = translations.get(english_part.lower(), english_part)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º –∏–ª–∏ –∏–∑—É—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        is_revision = english_part.lower() in learned_set
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–∏—Å–∫–ª—é—á–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
        options = [russian_part]
        all_translations = list(translations.values())
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –ø—É–ª–∞ –¥–∏—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–≤
        if russian_part in all_translations:
            all_translations.remove(russian_part)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å—Ç—Ä–∞–∫—Ç–æ—Ä—ã
        if len(all_translations) >= 3:
            options.extend(random.sample(all_translations, 3))
        else:
            options.extend(random.choices(all_translations, k=3) if all_translations else ["???", "???", "???"])
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        random.shuffle(options)
        
        correct_index = options.index(russian_part)
        
        questions.append({
            "word": english_part,  # –¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ
            "correct": russian_part,
            "options": options,
            "correct_index": correct_index,
            "is_revision": is_revision,
            "test_type": "memorize"  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞ –¥–ª—è –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
        })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
    learning_test_states[chat_id] = {
        "questions": questions,
        "current_index": 0,
        "correct": 0,
        "is_revision": False,
        "test_type": "memorize"
    }
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç
    await callback.answer()
    await send_learning_test_question(chat_id, bot)

async def send_learning_test_question(chat_id, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞/–∑–∞—É—á–∏–≤–∞–Ω–∏—è"""
    from utils.visual_helpers import format_quiz_question
    
    state = learning_test_states.get(chat_id)
    if not state:
        return
    
    if state["current_index"] >= len(state["questions"]):
        await finish_learning_test(chat_id, bot)
        return
    
    question = state["questions"][state["current_index"]]
    test_type = state.get("test_type", "")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∑–∞–ø–∏—Å—å
    logger.debug(f"–í–æ–ø—Ä–æ—Å —Å–ª–æ–≤–æ: '{question['word']}', –ø–µ—Ä–µ–≤–æ–¥: '{question['correct']}'")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
    if test_type == "dictionary":
        title = "üìö –¢–ï–°–¢ –ü–û –°–õ–û–í–ê–†–Æ"
    else:  # memorize
        title = "üìù –ó–ê–£–ß–ò–í–ê–ù–ò–ï –°–ï–¢–ê"
    
    formatted_question = format_quiz_question(
        state["current_index"] + 1,
        len(state["questions"]),
        question["word"],  # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ
        question["options"],
        question.get("is_revision", False)  # –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    )
    
    # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    formatted_question = formatted_question.replace("üéØ –°–õ–û–í–ê–†–ù–´–ô –ö–í–ò–ó", title)
    formatted_question = formatted_question.replace("üîÑ –ü–û–í–¢–û–†–ï–ù–ò–ï", title)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = learning_quiz_keyboard(question["options"], state["current_index"])
    
    await bot.send_message(
        chat_id, 
        formatted_question,
        parse_mode="Markdown", 
        reply_markup=keyboard
    )

async def process_learning_test_answer(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞/–∑–∞—É—á–∏–≤–∞–Ω–∏—è"""
    from datetime import datetime
    
    if callback.data == "learn:back":
        from keyboards.main_menu import main_menu_keyboard
        await bot.send_message(callback.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard())
        if callback.from_user.id in learning_test_states:
            del learning_test_states[callback.from_user.id]
        await callback.answer()
        return
        
    if callback.data == "learn:stop":
        await bot.send_message(callback.from_user.id, "–¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=learning_menu_keyboard())
        if callback.from_user.id in learning_test_states:
            del learning_test_states[callback.from_user.id]
        await callback.answer()
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    data = callback.data.split(":")
    if len(data) != 4:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
        
    _, _, q_index_str, option_index_str = data
    q_index = int(q_index_str)
    option_index = int(option_index_str)
    
    chat_id = callback.from_user.id
    state = learning_test_states.get(chat_id)
    if not state:
        await callback.answer("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
        
    if q_index != state["current_index"]:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤.", show_alert=True)
        return
        
    question = state["questions"][q_index]
    test_type = state.get("test_type", "")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if option_index == question["correct_index"]:
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        try:
            # –í —Å–ª—É—á–∞–µ —Ç–µ—Å—Ç–∞ –ø–æ —Å–ª–æ–≤–∞—Ä—é –∏–ª–∏ –∑–∞—É—á–∏–≤–∞–Ω–∏—è —Å–µ—Ç–∞ –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
            # –°–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ä—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–≤–∏–∑
            if test_type == "dictionary":
                # –≠—Ç–æ —Ç–µ—Å—Ç –ø–æ —Å–ª–æ–≤–∞—Ä—é, —Å–ª–æ–≤–æ —É–∂–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
                await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            elif test_type == "memorize":
                # –≠—Ç–æ –∑–∞—É—á–∏–≤–∞–Ω–∏–µ —Å–µ—Ç–∞, —Å–ª–æ–≤–æ –ù–ï –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ä—å
                await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! (–°–ª–æ–≤–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ä—å)")
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∞, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
                
            state["correct"] += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
            await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
    else:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await callback.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['correct']}")
        
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    state["current_index"] += 1
    await send_learning_test_question(chat_id, bot)

async def finish_learning_test(chat_id, bot: Bot):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    from utils.visual_helpers import format_result_message
    
    state = learning_test_states.get(chat_id)
    if not state:
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    result_message = format_result_message(
        state['correct'], 
        len(state['questions']),
        state['test_type'] == "dictionary"  # dictionary = –≤—Å–µ–≥–¥–∞ —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back"))
    keyboard.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—É—á–µ–Ω–∏—é", callback_data="learning:back"))
    
    await bot.send_message(
        chat_id, 
        result_message,
        parse_mode="Markdown", 
        reply_markup=keyboard
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    if state['correct'] / len(state['questions']) >= 0.7:
        from utils.sticker_helper import get_congratulation_sticker
        sticker_id = get_congratulation_sticker()
        if sticker_id:
            await bot.send_sticker(chat_id, sticker_id)
    
    del learning_test_states[chat_id]

def register_learning_handlers(dp: Dispatcher, bot: Bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è"""
    # –í–ê–ñ–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–º
    dp.register_message_handler(
        partial(process_learning_settings_input, bot=bot),
        lambda message: message.chat.id in pending_learning_settings and message.text,
        content_types=['text'],
        state="*"  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    )
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ—Å–ª–µ
    dp.register_callback_query_handler(
        partial(handle_learning_menu, bot=bot),
        lambda c: c.data == "menu:learning"
    )
    
    dp.register_callback_query_handler(
        partial(handle_learning_menu, bot=bot),
        lambda c: c.data == "learning:back"
    )
    
    dp.register_callback_query_handler(
        partial(handle_learning_settings, bot=bot),
        lambda c: c.data == "learning:settings"
    )
    
    dp.register_callback_query_handler(
        partial(handle_test_settings, bot=bot),
        lambda c: c.data == "learning:test_settings"
    )
    
    dp.register_callback_query_handler(
        partial(handle_memorize_settings, bot=bot),
        lambda c: c.data == "learning:memorize_settings"
    )
    
    dp.register_callback_query_handler(
        partial(handle_dictionary_test, bot=bot),
        lambda c: c.data == "learning:dictionary_test"
    )
    
    dp.register_callback_query_handler(
        partial(handle_memorize_set, bot=bot),
        lambda c: c.data == "learning:memorize_set"
    )
    
    dp.register_callback_query_handler(
        partial(process_learning_test_answer, bot=bot),
        lambda c: c.data and c.data.startswith("learn:answer:")
    )
    
    dp.register_callback_query_handler(
        partial(process_learning_test_answer, bot=bot),
        lambda c: c.data in ["learn:back", "learn:stop"]
    )


def learning_quiz_keyboard(options, question_index):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ—Å—Ç–∞ –æ–±—É—á–µ–Ω–∏—è —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ callback_data."""
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for i, option in enumerate(options):
        keyboard.add(types.InlineKeyboardButton(option, callback_data=f"learn:answer:{question_index}:{i}"))
    keyboard.add(
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="learn:back"),
        types.InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç", callback_data="learn:stop")
    )
    return keyboard

async def process_direct_settings_update(message: types.Message, bot: Bot):
    """–ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —á–∏—Å–ª–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    chat_id = message.chat.id
    text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not text.isdigit():
        return
    
    value = int(text)
    if not (1 <= value <= 20):
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç - –∫–∞–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—Ç—Å—è
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    try:
        messages = []
        async for msg in bot.get_chat_history(chat_id, limit=3):
            if msg.from_user.is_bot and msg.text:
                if "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞ –ø–æ —Å–ª–æ–≤–∞—Ä—é" in msg.text:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
                    from database.db import db_manager
                    with db_manager.get_cursor() as cursor:
                        cursor.execute("UPDATE users SET test_words_count = ? WHERE chat_id = ?", (value, chat_id))
                        db_manager.conn.commit()
                    
                    await message.answer(
                        f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {value}.",
                        reply_markup=learning_settings_keyboard()
                    )
                    return
                    
                elif "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—É—á–∏–≤–∞–Ω–∏—è —Å–µ—Ç–∞" in msg.text:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è
                    from database.db import db_manager
                    with db_manager.get_cursor() as cursor:
                        cursor.execute("UPDATE users SET memorize_words_count = ? WHERE chat_id = ?", (value, chat_id))
                        db_manager.conn.commit()
                    
                    await message.answer(
                        f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {value}.",
                        reply_markup=learning_settings_keyboard()
                    )
                    return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

#handlers/commands.py
# handlers/commands.py
from aiogram import Bot, Dispatcher, types
from aiogram.types import BotCommand, BotCommandScopeDefault
from utils.sticker_helper import get_welcome_sticker
from keyboards.reply_keyboards import get_main_menu_keyboard, get_remove_keyboard
from keyboards.main_menu import main_menu_keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç main_menu_keyboard
from database import crud  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è crud
import logging

logger = logging.getLogger(__name__)

# –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:
# /start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
# /menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# /mode - –í—ã–±—Ä–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å
# /profile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# /pay - –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
# /reset - –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
# /help - –°–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–º–æ—â—å

async def set_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è –º–µ–Ω—é."""
    commands = [
        BotCommand(command="start", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"),
        BotCommand(command="menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="mode", description="–í—ã–±—Ä–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å"),
        BotCommand(command="profile", description="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand(command="pay", description="–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
        BotCommand(command="reset", description="–°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"),
        BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–º–æ—â—å")
    ]
    await bot.set_my_commands(commands, scope=BotCommandScopeDefault())

async def cmd_start(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    chat_id = message.chat.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç chat_id: {chat_id}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = crud.get_user(chat_id)
        if not user:
            # –ï—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            crud.add_user(chat_id)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chat_id {chat_id}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–µ—Ç –¥–ª—è A1
            from config import DEFAULT_SETS
            default_set = DEFAULT_SETS.get("A1")
            if default_set:
                try:
                    crud.update_user_chosen_set(chat_id, default_set)
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ç–æ–≤
                    from handlers.settings import user_set_selection
                    user_set_selection[chat_id] = default_set
                    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∞–∑–æ–≤—ã–π —Å–µ—Ç {default_set} –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–∞–∑–æ–≤–æ–≥–æ —Å–µ—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            sticker_id = get_welcome_sticker()
            if sticker_id:
                await bot.send_sticker(chat_id, sticker_id)
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–µ—Ç, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            from handlers.settings import user_set_selection
            current_set = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç –≤ –∫—ç—à–µ
            if chat_id in user_set_selection:
                current_set = user_set_selection[chat_id]
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, —Å–º–æ—Ç—Ä–∏–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if not current_set and len(user) > 6 and user[6]:
                current_set = user[6]
            
            # –ï—Å–ª–∏ —Å–µ—Ç –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π
            if not current_set:
                from config import DEFAULT_SETS
                level = user[1]
                default_set = DEFAULT_SETS.get(level)
                if default_set:
                    try:
                        crud.update_user_chosen_set(chat_id, default_set)
                        user_set_selection[chat_id] = default_set
                        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∞–∑–æ–≤—ã–π —Å–µ—Ç {default_set} –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–∞–∑–æ–≤–æ–≥–æ —Å–µ—Ç–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
        await message.answer(
            "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ English Learning Bot!*\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞:\n"
            "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–±–æ—Ä—ã —Å–ª–æ–≤ –Ω–∞ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å\n"
            "‚Ä¢ –ö–≤–∏–∑—ã –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
            "‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="Markdown",
            reply_markup=main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start –¥–ª—è chat_id {chat_id}: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard()
        )

async def cmd_mode(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mode."""
    await message.answer("–§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def cmd_profile(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile."""
    from handlers.settings import process_settings_mysettings
    await process_settings_mysettings(message, message.bot)

async def cmd_pay(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pay."""
    await message.answer("–§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def cmd_reset(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset."""
    await message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω.")

async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    from keyboards.submenus import help_menu_keyboard
    await message.answer(
        "*–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*\n\n"
        "English Learning Bot –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑:\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–±–æ—Ä—ã —Å–ª–æ–≤\n"
        "‚Ä¢ –ö–≤–∏–∑—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π\n"
        "‚Ä¢ –¢–µ—Å—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏:",
        parse_mode="Markdown",
        reply_markup=help_menu_keyboard()
    )

async def cmd_menu(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–¥–≤–∏–≥–∞—é—â–µ–µ—Å—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥."""
    await message.answer(
        "üìã –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥:",
        reply_markup=get_main_menu_keyboard()
    )

async def cmd_close_menu(message: types.Message):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—ã–¥–≤–∏–≥–∞—é—â–µ–µ—Å—è –º–µ–Ω—é."""
    from keyboards.main_menu import main_menu_keyboard
    await message.answer(
        "–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥:",
        reply_markup=main_menu_keyboard()
    )
def register_command_handlers(dp: Dispatcher, bot: Bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥."""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –≤ —Å–ø–∏—Å–∫–µ –∏ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞
    dp.register_message_handler(lambda msg: cmd_start(msg, bot), commands=["start"], state="*")
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dp.register_message_handler(cmd_mode, commands=["mode"])
    dp.register_message_handler(lambda msg: cmd_profile(msg, bot), commands=["profile"])
    dp.register_message_handler(cmd_pay, commands=["pay"])
    dp.register_message_handler(cmd_reset, commands=["reset"])
    dp.register_message_handler(cmd_help, commands=["help"])
    dp.register_message_handler(cmd_menu, commands=["menu"])
    dp.register_message_handler(cmd_close_menu, lambda msg: msg.text == "–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é")
    dp.register_message_handler(lambda msg: cmd_start(msg, bot), lambda msg: msg.text and "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ /start" in msg.text)

#handlers/dictionary.py
# Updated dictionary handlers in handlers/dictionary.py

from aiogram import types, Dispatcher, Bot
from keyboards.submenus import dictionary_menu_keyboard, clear_dictionary_confirm_keyboard
from database import crud
from functools import partial
from utils.visual_helpers import format_dictionary_message
from utils.sticker_helper import get_clean_sticker

async def handle_dictionary(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π —Å–ª–æ–≤–∞—Ä—å". –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ.
    """
    chat_id = callback.from_user.id
    learned = crud.get_learned_words(chat_id)
    
    if not learned:
        await callback.message.edit_text(
            "üìö *–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç*\n\n–ü—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑—ã, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –≤ —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å!",
            parse_mode="Markdown",
            reply_markup=dictionary_menu_keyboard()
        )
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è
        formatted_message = format_dictionary_message(learned)
        
        await callback.message.edit_text(
            formatted_message,
            parse_mode="Markdown", 
            reply_markup=dictionary_menu_keyboard()
        )
    
    await callback.answer()

async def handle_clear_dictionary_confirm(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å–ª–æ–≤–∞—Ä—è. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    chat_id = callback.from_user.id
    
    await callback.message.edit_text(
        "‚ö†Ô∏è *–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å?*\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        parse_mode="Markdown",
        reply_markup=clear_dictionary_confirm_keyboard()
    )
    
    await callback.answer()

async def handle_clear_dictionary_confirmed(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å–ª–æ–≤–∞—Ä—è."""
    chat_id = callback.from_user.id
    
    try:
        # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        crud.clear_learned_words_for_user(chat_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Å–ª–æ–≤–∞—Ä—è
        sticker_id = get_clean_sticker()
        if sticker_id:
            await bot.send_sticker(chat_id, sticker_id)
        
        await callback.message.edit_text(
            "‚úÖ –í–∞—à —Å–ª–æ–≤–∞—Ä—å —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.",
            parse_mode="Markdown",
            reply_markup=dictionary_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error clearing dictionary for user {chat_id}: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ª–æ–≤–∞—Ä—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="Markdown",
            reply_markup=dictionary_menu_keyboard()
        )
    
    await callback.answer()

async def handle_clear_dictionary_cancelled(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—á–∏—Å—Ç–∫–∏ —Å–ª–æ–≤–∞—Ä—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–ª–æ–≤–∞—Ä—è.
    """
    chat_id = callback.from_user.id
    
    await handle_dictionary(callback, bot)
    await callback.answer("–û—á–∏—Å—Ç–∫–∞ —Å–ª–æ–≤–∞—Ä—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

def register_dictionary_handlers(dp: Dispatcher, bot: Bot):
    dp.register_callback_query_handler(
        partial(handle_dictionary, bot=bot),
        lambda c: c.data == "menu:dictionary"
    )
    dp.register_callback_query_handler(
        partial(handle_clear_dictionary_confirm, bot=bot),
        lambda c: c.data == "dictionary:clear_confirm"
    )
    dp.register_callback_query_handler(
        partial(handle_clear_dictionary_confirmed, bot=bot),
        lambda c: c.data == "dictionary:clear_confirmed"
    )
    dp.register_callback_query_handler(
        partial(handle_clear_dictionary_cancelled, bot=bot),
        lambda c: c.data == "dictionary:clear_cancel"
    )

#database/crud.py
# database/crud.py
import logging
from database.db import conn, cursor, db_manager
from config import DEFAULT_WORDS_PER_DAY, DEFAULT_REPETITIONS, REMINDER_DEFAULT

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

def add_user(chat_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT chat_id FROM users WHERE chat_id = ?", (chat_id,))
        if cursor.fetchone() is None:
            # –ë–µ—Ä–µ–º –±–∞–∑–æ–≤—ã–π —Å–µ—Ç –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è A1
            from config import DEFAULT_SETS
            default_set = DEFAULT_SETS.get("A1", "")
            
            # notifications –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            with db_manager.transaction() as tx_conn:
                tx_conn.execute(
                    "INSERT INTO users (chat_id, level, words_per_day, notifications, reminder_time, timezone, chosen_set) VALUES (?, ?, ?, ?, ?, ?, ?)",
                    (chat_id, 'A1', DEFAULT_WORDS_PER_DAY, DEFAULT_REPETITIONS, REMINDER_DEFAULT, "Europe/Moscow", default_set)
                )
            logger.info(f"Added new user with chat_id: {chat_id} with default set: {default_set}")
    except Exception as e:
        logger.error(f"Error adding user {chat_id}: {e}")
        raise

def get_user(chat_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ chat_id."""
    try:
        cursor.execute(
            "SELECT chat_id, level, words_per_day, notifications, reminder_time, timezone, chosen_set FROM users WHERE chat_id = ?", 
            (chat_id,)
        )
        return cursor.fetchone()
    except Exception as e:
        logger.error(f"Error getting user {chat_id}: {e}")
        return None

def get_all_users():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    try:
        cursor.execute("SELECT chat_id, level, words_per_day, notifications, reminder_time, timezone FROM users")
        return cursor.fetchall()
    except Exception as e:
        logger.error(f"Error getting all users: {e}")
        return []

def update_user_level(chat_id: int, level: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        cursor.execute("UPDATE users SET level = ? WHERE chat_id = ?", (level, chat_id))
        conn.commit()
        logger.debug(f"Updated level to {level} for user {chat_id}")
    except Exception as e:
        logger.error(f"Error updating level for user {chat_id}: {e}")
        raise

def update_user_words_per_day(chat_id: int, count: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        cursor.execute("UPDATE users SET words_per_day = ? WHERE chat_id = ?", (count, chat_id))
        conn.commit()
        logger.debug(f"Updated words_per_day to {count} for user {chat_id}")
    except Exception as e:
        logger.error(f"Error updating words_per_day for user {chat_id}: {e}")
        raise

def update_user_notifications(chat_id: int, count: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        cursor.execute("UPDATE users SET notifications = ? WHERE chat_id = ?", (count, chat_id))
        conn.commit()
        logger.debug(f"Updated notifications to {count} for user {chat_id}")
    except Exception as e:
        logger.error(f"Error updating notifications for user {chat_id}: {e}")
        raise

def update_user_reminder_time(chat_id: int, time: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        cursor.execute("UPDATE users SET reminder_time = ? WHERE chat_id = ?", (time, chat_id))
        conn.commit()
        logger.debug(f"Updated reminder_time to {time} for user {chat_id}")
    except Exception as e:
        logger.error(f"Error updating reminder_time for user {chat_id}: {e}")
        raise

def update_user_timezone(chat_id: int, timezone: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        cursor.execute("UPDATE users SET timezone = ? WHERE chat_id = ?", (timezone, chat_id))
        conn.commit()
        logger.debug(f"Updated timezone to {timezone} for user {chat_id}")
    except Exception as e:
        logger.error(f"Error updating timezone for user {chat_id}: {e}")
        raise

def add_word_to_dictionary(chat_id: int, word_data: dict):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        cursor.execute(
            """
            INSERT INTO dictionary (chat_id, word, translation, transcription, example)
            VALUES (?, ?, ?, ?, ?)
            """, 
            (chat_id, word_data.get('word'), word_data.get('translation', ''), 
             word_data.get('transcription', ''), word_data.get('example', ''))
        )
        conn.commit()
        logger.debug(f"Added word '{word_data.get('word')}' to dictionary for user {chat_id}")
    except Exception as e:
        logger.error(f"Error adding word to dictionary for user {chat_id}: {e}")
        raise

def get_user_dictionary(chat_id: int, limit: int = 10, offset: int = 0):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    try:
        cursor.execute(
            "SELECT word, translation, transcription, example FROM dictionary WHERE chat_id = ? ORDER BY id DESC LIMIT ? OFFSET ?", 
            (chat_id, limit, offset)
        )
        return cursor.fetchall()
    except Exception as e:
        logger.error(f"Error getting dictionary for user {chat_id}: {e}")
        return []

def add_learned_word(chat_id: int, word: str, translation: str, learned_date: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã—É—á–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        with db_manager.transaction() as tx_conn:
            tx_cursor = tx_conn.cursor()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ
            tx_cursor.execute(
                "SELECT COUNT(*) FROM learned_words WHERE chat_id = ? AND word = ?", 
                (chat_id, word)
            )
            count = tx_cursor.fetchone()[0]
            # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if count == 0:
                tx_cursor.execute(
                    "INSERT INTO learned_words (chat_id, word, translation, learned_date) VALUES (?, ?, ?, ?)", 
                    (chat_id, word, translation, learned_date)
                )
                logger.debug(f"Added learned word '{word}' for user {chat_id}")
    except Exception as e:
        logger.error(f"Error adding learned word for user {chat_id}: {e}")
        raise

# –í —Ñ–∞–π–ª–µ database/crud.py –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_learned_words

def get_learned_words(chat_id: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∫–æ—Ä—Ç–µ–∂–∏ (word, translation).
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–¥–µ—Å—å —è–≤–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏
        # –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
        with db_manager.get_cursor() as cursor:
            cursor.execute(
                "SELECT word, translation FROM learned_words WHERE chat_id = ?", 
                (chat_id,)
            )
            result = cursor.fetchall()
            logger.debug(f"Retrieved {len(result)} learned words for user {chat_id}")
            return result
    except sqlite3.Error as sql_error:
        logger.error(f"SQLite error getting learned words for user {chat_id}: {sql_error}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        return []
    except Exception as e:
        logger.error(f"Unexpected error getting learned words for user {chat_id}: {e}")
        return []

def clear_learned_words_for_user(chat_id: int):
    """–û—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        cursor.execute("DELETE FROM learned_words WHERE chat_id = ?", (chat_id,))
        conn.commit()
        logger.info(f"Cleared learned words for user {chat_id}")
    except Exception as e:
        logger.error(f"Error clearing learned words for user {chat_id}: {e}")
        raise

def update_user_chosen_set(chat_id: int, set_name: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        cursor.execute("UPDATE users SET chosen_set = ? WHERE chat_id = ?", (set_name, chat_id))
        conn.commit()
        logger.debug(f"Updated chosen_set to '{set_name}' for user {chat_id}")
    except Exception as e:
        logger.error(f"Error updating chosen_set for user {chat_id}: {e}")
        raise

def update_user_test_words_count(chat_id: int, count: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞."""
    try:
        with db_manager.transaction() as conn:
            conn.execute("UPDATE users SET test_words_count = ? WHERE chat_id = ?", (count, chat_id))
        logger.info(f"Updated test_words_count to {count} for user {chat_id}")
    except Exception as e:
        logger.error(f"Error updating test_words_count for user {chat_id}: {e}")
        raise

def update_user_memorize_words_count(chat_id: int, count: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è."""
    try:
        with db_manager.transaction() as conn:
            conn.execute("UPDATE users SET memorize_words_count = ? WHERE chat_id = ?", (count, chat_id))
        logger.info(f"Updated memorize_words_count to {count} for user {chat_id}")
    except Exception as e:
        logger.error(f"Error updating memorize_words_count for user {chat_id}: {e}")
        raise

#database/db.py
# database/db.py
import sqlite3
import threading
import time
import logging
from contextlib import contextmanager
from config import DB_PATH

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class DatabaseManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π —Å—Ä–µ–¥–µ.
    –ò–º–∏—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è SQLite, –Ω–æ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–æ–π.
    """
    _instance = None
    _lock = threading.RLock()
    
    def __new__(cls):
        with cls._lock:
            if cls._instance is None:
                cls._instance = super(DatabaseManager, cls).__new__(cls)
                cls._instance._initialized = False
            return cls._instance
            
    def __init__(self):
        if self._initialized:
            return
            
        self._initialized = True
        self._conn_pool = {}
        self._conn_pool_lock = threading.RLock()
        self._last_conn_id = 0
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ –∞—Ç—Ä–∏–±—É—Ç—ã conn –∏ cursor
        # –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
        self.conn = self._create_connection()
        self.cursor = self.conn.cursor()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
        self.init_db()
        logger.info("Database initialized successfully")
    
    def _create_connection(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        connection = sqlite3.connect(DB_PATH, check_same_thread=False)
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        connection.execute("PRAGMA journal_mode=WAL")
        connection.execute("PRAGMA synchronous=NORMAL")
        connection.isolation_level = None  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
        connection.row_factory = sqlite3.Row  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
        return connection
        
    def get_connection(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ."""
        current_thread = threading.current_thread().ident
        with self._conn_pool_lock:
            if current_thread not in self._conn_pool:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
                self._conn_pool[current_thread] = self._create_connection()
            return self._conn_pool[current_thread]
    
    @contextmanager
    def get_cursor(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞."""
        conn = self.get_connection()
        cursor = conn.cursor()
        try:
            yield cursor
        finally:
            cursor.close()
    
    def execute(self, sql, params=None, commit=False):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ –æ—à–∏–±–æ–∫.
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π —Å—Ä–µ–¥–µ.
        """
        if params is None:
            params = ()
            
        conn = self.get_connection()
        max_attempts = 5
        attempt = 0
        
        while attempt < max_attempts:
            try:
                with self._lock:  # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –ë–î –Ω–∞ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
                    cursor = conn.cursor()
                    cursor.execute(sql, params)
                    if commit:
                        conn.commit()
                    return cursor
            except sqlite3.OperationalError as e:
                if "database is locked" in str(e) or "busy" in str(e):
                    attempt += 1
                    if attempt >= max_attempts:
                        logger.error(f"Failed to execute after {max_attempts} attempts: {sql}")
                        raise
                    backoff = 0.1 * (2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    logger.warning(f"Database locked, retrying in {backoff:.2f}s ({attempt}/{max_attempts})")
                    time.sleep(backoff)
                else:
                    logger.error(f"SQL error: {e} in query: {sql}")
                    raise
            except Exception as e:
                logger.error(f"Unexpected error: {e} in query: {sql}")
                raise
    
    @contextmanager
    def transaction(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç–∫–∞—Ç–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö."""
        conn = self.get_connection()
        conn.execute("BEGIN")
        try:
            yield conn
            conn.commit()
        except Exception as e:
            conn.rollback()
            logger.error(f"Transaction rolled back: {e}")
            raise
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–≤–∞—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    chat_id INTEGER PRIMARY KEY,
                    level TEXT DEFAULT 'A1',
                    words_per_day INTEGER DEFAULT 5,
                    notifications INTEGER DEFAULT 10,
                    reminder_time TEXT DEFAULT '09:00',
                    timezone TEXT DEFAULT 'Europe/Moscow',
                    chosen_set TEXT DEFAULT ''
                )
            ''', commit=True)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–ª–æ–≤–∞—Ä—è
            self.execute('''
                CREATE TABLE IF NOT EXISTS dictionary (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    chat_id INTEGER,
                    word TEXT,
                    translation TEXT,
                    transcription TEXT,
                    example TEXT
                )
            ''', commit=True)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
            self.execute('''
                CREATE TABLE IF NOT EXISTS learned_words (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    chat_id INTEGER,
                    word TEXT,
                    translation TEXT,
                    learned_date TEXT
                )
            ''', commit=True)
        except Exception as e:
            logger.error(f"Error initializing database: {e}")
            raise
    
    def close_all(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        with self._conn_pool_lock:
            for conn in self._conn_pool.values():
                try:
                    conn.close()
                except:
                    pass
            self._conn_pool.clear()
            try:
                self.conn.close()
            except:
                pass

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
db_manager = DatabaseManager()

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∫ conn –∏ cursor —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å
conn = db_manager.conn
cursor = db_manager.cursor

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î, –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def init_db():
    db_manager.init_db()

#keyboards/reply_keyboards.py
# keyboards/reply_keyboards.py
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

def get_main_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –≤—ã–¥–≤–∏–≥–∞—é—â–µ–µ—Å—è –º–µ–Ω—é —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞."""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    
    keyboard.add(KeyboardButton("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ /start"))
    keyboard.add(KeyboardButton("–í—ã–±—Ä–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å /mode"))
    keyboard.add(KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è /profile"))
    keyboard.add(KeyboardButton("–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É /pay"))
    keyboard.add(KeyboardButton("–°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ /reset"))
    keyboard.add(KeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é"))
    
    return keyboard

def get_remove_keyboard():
    """–£–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    return ReplyKeyboardMarkup(resize_keyboard=True, remove_keyboard=True)

#keyboards/submenus.py
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import random

def main_menu_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìå –°–ª–æ–≤–∞ –¥–Ω—è", callback_data="menu:words_day"),
        InlineKeyboardButton("üìñ –û–±—É—á–µ–Ω–∏–µ", callback_data="menu:learning")
    )
    keyboard.add(
        InlineKeyboardButton("üìö –ú–æ–π —Å–ª–æ–≤–∞—Ä—å", callback_data="menu:dictionary"),
        InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu:settings")
    )
    keyboard.add(
        InlineKeyboardButton("üéØ –ö–≤–∏–∑", callback_data="quiz:start"),
        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="menu:help")
    )
    return keyboard

def words_day_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="menu:back"))
    return keyboard

def dictionary_menu_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    # Add Clear Dictionary button
    keyboard.add(InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å", callback_data="dictionary:clear_confirm"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu:back"))
    return keyboard

# New confirmation keyboard for dictionary clearing
def clear_dictionary_confirm_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="dictionary:clear_confirmed"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="dictionary:clear_cancel")
    )
    return keyboard

def set_change_confirm_keyboard(encoded_set_name):
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞, —Å–º–µ–Ω–∏—Ç—å", callback_data=f"set_change_confirmed:{encoded_set_name}"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="set_change_cancel")
    )
    return keyboard

def settings_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ –¥–≤—É—Ö–∫–æ–ª–æ–Ω–æ—á–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —ç–º–æ–¥–∑–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º."""
    keyboard = InlineKeyboardMarkup(row_width=2)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 2 —Å—Ç–æ–ª–±—Ü–∞
    
    # –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü: –£—Ä–æ–≤–µ–Ω—å, –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    # –í—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü: –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –ù–∞–±–æ—Ä—ã —Å–ª–æ–≤, –ù–∞–∑–∞–¥
    keyboard.add(
        InlineKeyboardButton("üî§ –£—Ä–æ–≤–µ–Ω—å", callback_data="settings:level"),
        InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="settings:mysettings")
    )
    keyboard.add(
        InlineKeyboardButton("‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings:notifications"),
        InlineKeyboardButton("üìö –ù–∞–±–æ—Ä—ã —Å–ª–æ–≤", callback_data="settings:set")
    )
    keyboard.add(
        InlineKeyboardButton("üåê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="settings:timezone"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu:back")
    )
    
    return keyboard   

def notification_settings_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —ç–º–æ–¥–∑–∏."""
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    keyboard.add(
        InlineKeyboardButton("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤", callback_data="settings:words"),
        InlineKeyboardButton("üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π", callback_data="settings:repetitions")
    )
    keyboard.add(
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings:back")
    )
    
    return keyboard

def learning_menu_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è.
    4 –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –≤ 2 —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 —Å—Ç–æ–ª–±—Ü–∞.
    """
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìö –¢–µ—Å—Ç –ø–æ —Å–ª–æ–≤–∞—Ä—é", callback_data="learning:dictionary_test"),
        InlineKeyboardButton("üìù –ó–∞—É—á–∏–≤–∞–Ω–∏–µ —Å–µ—Ç–∞", callback_data="learning:memorize_set")
    )
    keyboard.add(
        InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è", callback_data="learning:settings"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu:back")
    )
    return keyboard

def learning_settings_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—É—á–µ–Ω–∏—è.
    3 –∫–Ω–æ–ø–∫–∏ –≤ 2 —Å—Ç—Ä–æ–∫–∏: –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - 2 –∫–Ω–æ–ø–∫–∏, –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - 1 –∫–Ω–æ–ø–∫–∞.
    """
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞", callback_data="learning:test_settings"),
        InlineKeyboardButton("üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—É—á–∏–≤–∞–Ω–∏—è", callback_data="learning:memorize_settings")
    )
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="learning:back"))
    return keyboard

def help_menu_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="help:about"),
        InlineKeyboardButton("üìú –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", callback_data="help:commands"),
        InlineKeyboardButton("‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="help:feedback"),
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="menu:back")
    )
    return keyboard

def quiz_keyboard(options, question_index):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–≤–∏–∑–∞.
    –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –∏–º–µ–µ—Ç callback_data –≤ —Ñ–æ—Ä–º–∞—Ç–µ "quiz:answer:<question_index>:<option_index>".
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–≤–∏–∑".
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞.
    """
    keyboard = InlineKeyboardMarkup(row_width=2)
    for i, option in enumerate(options):
        keyboard.add(InlineKeyboardButton(option, callback_data=f"quiz:answer:{question_index}:{i}"))
    keyboard.add(
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="quiz:back"),
        InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–≤–∏–∑", callback_data="quiz:stop")
    )
    return keyboard

def level_selection_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å —ç–º–æ–¥–∑–∏."""
    keyboard = InlineKeyboardMarkup(row_width=3)  # –¢—Ä–∏ —É—Ä–æ–≤–Ω—è –≤ —Ä—è–¥
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
    keyboard.add(
        InlineKeyboardButton("üü¢ A1", callback_data="set_level:A1"),
        InlineKeyboardButton("üü¢ A2", callback_data="set_level:A2"),
        InlineKeyboardButton("üü° B1", callback_data="set_level:B1")
    )
    keyboard.add(
        InlineKeyboardButton("üü° B2", callback_data="set_level:B2"),
        InlineKeyboardButton("üî¥ C1", callback_data="set_level:C1"),
        InlineKeyboardButton("üî¥ C2", callback_data="set_level:C2")
    )
    keyboard.add(
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings:back")
    )
    
    return keyboard

#keyboards/main_menu.py
# keyboards/main_menu.py
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def main_menu_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìå –°–ª–æ–≤–∞ –¥–Ω—è", callback_data="menu:words_day"),
        InlineKeyboardButton("üìñ –û–±—É—á–µ–Ω–∏–µ", callback_data="menu:learning"),
    )
    keyboard.add(
        InlineKeyboardButton("üìö –ú–æ–π —Å–ª–æ–≤–∞—Ä—å", callback_data="menu:dictionary"),
        InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu:settings"),
    )
    keyboard.add(
        InlineKeyboardButton("üéØ –ö–≤–∏–∑", callback_data="quiz:start"),
        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="menu:help")
    )
    return keyboard


#utils/visual_helpers.py
# utils/visual_helpers.py
import logging
from typing import List, Tuple
import re

logger = logging.getLogger(__name__)

# –°–∏–º–≤–æ–ª—ã –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
PROGRESS_FILLED = "‚ñà"
PROGRESS_EMPTY = "‚ñë"
BULLET_STYLES = {
    "standard": "‚Ä¢ ",
    "numbered": None,  # –ë—É–¥–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ "1. ", "2. " –∏ —Ç.–¥.
    "arrow": "‚Üí ",
    "star": "‚òÖ ",
    "check": "‚úì ",
    "diamond": "‚óÜ "
}

SECTION_DIVIDERS = {
    "light": "‚îÄ",
    "medium": "‚îÅ",
    "heavy": "‚ïê",
    "double": "‚ïê",
    "decorated": "‚Ä¢‚îÄ‚Ä¢",
    "star": "‚úßÔΩ•Ôæü: *‚úßÔΩ•Ôæü:* *:ÔΩ•Ôæü‚úß*:ÔΩ•Ôæü‚úß"
}

# –≠–º–æ–¥–∑–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
EMOJI = {
    "learn": ["üìö", "üìñ", "üìù", "üîç", "üéì", "‚úèÔ∏è", "üìò"],
    "success": ["‚úÖ", "üéâ", "üèÜ", "üåü", "üëç", "üéä", "üíØ"],
    "warning": ["‚ö†Ô∏è", "‚ùó", "üîî", "üì¢", "‚ÄºÔ∏è"],
    "error": ["‚ùå", "üö´", "‚õî", "üî¥", "‚ùó"],
    "time": ["‚è∞", "‚åö", "üïí", "‚è±Ô∏è", "üìÖ"],
    "level": ["üîÑ", "üîº", "üÜô", "üìä", "üìà"],
    "quiz": ["üéØ", "‚ùì", "üéÆ", "üß©", "üé≤", "üé™"],
    "settings": ["‚öôÔ∏è", "üîß", "üõ†Ô∏è", "üî®", "üî©"],
    "menu": ["üìã", "üìä", "üìë", "üìÅ"]
}

# –°—Ç–∏–∫–µ—Ä—ã –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π (ID —Å—Ç–∏–∫–µ—Ä–æ–≤)
CONGRATULATION_STICKERS = [
    "CAACAgIAAxkBAAEKX2RlB3TN7AAB3o7Dh4QXsaU6SWHccpQAAjcHAAJlhUhLOh2LB8jQBDswBA",  # –ü—Ä–∏–º–µ—Ä ID —Å—Ç–∏–∫–µ—Ä–∞
    "CAACAgIAAxkBAAEKX2ZlB3VnXKiJ7AABaRpSmMhlg3JFQmQAAkIHAAL2U-hLNLtFY_Tf0GUwBA",  # –ü—Ä–∏–º–µ—Ä ID —Å—Ç–∏–∫–µ—Ä–∞
    "CAACAgIAAxkBAAEKX2hlB3V8Tit78f3MF-Z20VkfUvl7KAACbgUAAvLm-UtcQxCPuiDzijAE"    # –ü—Ä–∏–º–µ—Ä ID —Å—Ç–∏–∫–µ—Ä–∞
]

def format_header(text: str, emoji: str = None, top_divider: str = None, bottom_divider: str = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏."""
    header = f"{emoji} {text} {emoji}" if emoji else text
    
    if top_divider:
        header = f"{top_divider}\n{header}"
    if bottom_divider:
        header = f"{header}\n{bottom_divider}"
        
    return header

def format_bullet_list(items: List[str], style: str = "standard", start_index: int = 1) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ –º–∞—Ä–∫–µ—Ä–æ–≤."""
    bullet_style = BULLET_STYLES.get(style, BULLET_STYLES["standard"])
    formatted_items = []
    
    for i, item in enumerate(items):
        if style == "numbered":
            line = f"{i+start_index}. {item}"
        else:
            line = f"{bullet_style}{item}"
        formatted_items.append(line)
        
    return "\n".join(formatted_items)

def format_word_item(word: str, translation: str, transcription: str = None, 
                    example: str = None, emoji: str = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä–Ω–æ–µ —Å–ª–æ–≤–æ —Å –¥–µ—Ç–∞–ª—è–º–∏."""
    if not emoji:
        emoji = "üìù"
        
    result = f"{emoji} *{word}* ‚Äî _{translation}_"
    
    if transcription:
        result += f"\n  [{transcription}]"
        
    if example:
        result += f"\n  –ü—Ä–∏–º–µ—Ä: \"{example}\""
        
    return result

def format_progress_bar(current: int, total: int, length: int = 10) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —à–∫–∞–ª—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    filled_length = int(length * current / total) if total > 0 else 0
    bar = PROGRESS_FILLED * filled_length + PROGRESS_EMPTY * (length - filled_length)
    return f"[{bar}] {current}/{total}"

def format_quiz_question(question_number: int, total_questions: int, word: str, 
                         options: List[str], is_revision: bool = False) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    progress = format_progress_bar(question_number, total_questions)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —É–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ —Å–ª–æ–≤–∞
    clean_word = word
    if " - " in clean_word:
        clean_word = clean_word.split(" - ", 1)[0].strip()
    elif " ‚Äì " in clean_word:
        clean_word = clean_word.split(" ‚Äì ", 1)[0].strip()
    elif ": " in clean_word:
        clean_word = clean_word.split(": ", 1)[0].strip()
    
    header = "üîÑ –ü–û–í–¢–û–†–ï–ù–ò–ï" if is_revision else "üéØ –°–õ–û–í–ê–†–ù–´–ô –ö–í–ò–ó"
    question = f"{header}\n{progress}\n\n–í–æ–ø—Ä–æ—Å {question_number}/{total_questions}:\n\n–ö–∞–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ '*{clean_word}*'?"
    
    return question

def format_result_message(correct: int, total: int, is_revision: bool = False) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–≤–∏–∑–∞."""
    percentage = (correct / total) * 100 if total > 0 else 0
    
    # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if percentage >= 90:
        emoji = "üéâ"
    elif percentage >= 70:
        emoji = "üëç"
    elif percentage >= 50:
        emoji = "üëå"
    else:
        emoji = "üîÑ"
        
    progress = format_progress_bar(correct, total, 20)
    
    header = f"{emoji} –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! {emoji}"
    divider = SECTION_DIVIDERS["decorated"]
    
    message = f"{header}\n{divider}\n\n"
    message += f"*–°—á–µ—Ç:* {correct} –∏–∑ {total} ({percentage:.1f}%)\n{progress}\n\n"
    
    if is_revision:
        message += "–í—ã –±—ã–ª–∏ –≤ *—Ä–µ–∂–∏–º–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è*. –≠—Ç–∏ —Å–ª–æ–≤–∞ —É–∂–µ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ.\n\n"
        if percentage < 70:
            message += "üí° *–°–æ–≤–µ—Ç:* –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è —ç—Ç–∏—Ö —Å–ª–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."
    else:
        message += "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å.\n\n"
        if percentage < 70:
            message += "üí° *–°–æ–≤–µ—Ç:* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–≤–∏–∑ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞, —á—Ç–æ–±—ã –æ—Å–≤–æ–∏—Ç—å —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏."
            
    return message

def extract_english(word_line: str) -> str:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è extract_english —Å –ª—É—á—à–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    try:
        if not word_line or not isinstance(word_line, str):
            return ""
            
        # –£–¥–∞–ª—è–µ–º –≤–µ–¥—É—â–∏–µ —ç–º–æ–¥–∑–∏ –∏–ª–∏ —Å–∏–º–≤–æ–ª—ã
        cleaned_line = re.sub(r'^[^\w]*', '', word_line).strip()
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        for separator in [" - ", " ‚Äì ", ": "]:
            if separator in cleaned_line:
                return cleaned_line.split(separator, 1)[0].strip()
                
        return cleaned_line
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ '{word_line}': {e}")
        return word_line.strip() if isinstance(word_line, str) else ""

def format_daily_words_message(messages: List[str], times: List[str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ–≤–∞–º–∏ –¥–Ω—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤–∏–∑—É–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º."""
    header = "üìö –°–ª–æ–≤–∞—Ä—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
    
    result = f"{header}\n\n"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª—é–±–æ–µ –ø—Ä–µ—Ñ–∏–∫—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞—á–∏–Ω–∞—é—â–µ–µ—Å—è —Å üéì –∏–ª–∏ ‚ö†Ô∏è)
    prefix_message = ""
    word_messages = messages.copy()
    
    if messages and (messages[0].startswith("üéì") or messages[0].startswith("‚ö†Ô∏è")):
        prefix_message = messages[0]
        word_messages = messages[1:]
    
    if prefix_message:
        result += f"{prefix_message}\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    time_groups = {}
    for i, time in enumerate(times):
        if i < len(word_messages):
            if time not in time_groups:
                time_groups[time] = []
            time_groups[time].append(word_messages[i])
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
    for time, words in time_groups.items():
        result += f"‚è∞ *{time}*\n"
        for word in words:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            word_text = word
            if word.startswith("üîπ "):
                word_text = word[2:].strip()
            result += f"‚Ä¢ {word_text}\n"
        result += "\n"
    
    return result

def format_dictionary_message(words: List[Tuple[str, str]]) -> str:
    
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å–∏ —Å–ª–æ–≤–∞—Ä—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤–∏–∑—É–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º."""
    if not words:
        return "üìö *–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç*\n\n–ü—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑—ã, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –≤ —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å!"
    
    header = "üìö –í–∞—à —Å–ª–æ–≤–∞—Ä—å"
    
    result = f"{header}\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    alpha_dict = {}
    for word, translation in words:
        first_letter = word[0].upper() if word else "?"
        if first_letter not in alpha_dict:
            alpha_dict[first_letter] = []
        alpha_dict[first_letter].append((word, translation))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    for letter in sorted(alpha_dict.keys()):
        result += f"*{letter}*\n"
        for word, translation in alpha_dict[letter]:
            result += f"‚Ä¢ {word} ‚Äî _{translation}_\n"
        result += "\n"
    
    return result

def format_level_test_question(q_index: int, total: int, level: str, word: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞ —É—Ä–æ–≤–Ω—è —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏."""
    progress = format_progress_bar(q_index + 1, total)
    
    header = f"üìä –¢–µ—Å—Ç —É—Ä–æ–≤–Ω—è: {level}"
    
    result = f"{header}\n\n"
    result += f"{progress}\n\n"
    result += f"–í–æ–ø—Ä–æ—Å {q_index + 1} –∏–∑ {total}:\n\n"
    result += f"–ö–∞–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ '*{word}*'?"
    
    return result

def format_level_test_results(results_by_level: dict, new_level: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ —É—Ä–æ–≤–Ω—è —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏."""
    header = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ —É—Ä–æ–≤–Ω—è"
    
    result = f"{header}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
    result += "*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º*\n"
    for level, (score, total) in sorted(results_by_level.items()):
        progress = format_progress_bar(score, total, 10)
        result += f"*{level}*: {score}/{total} {progress}\n"
    
    result += f"\n"
    result += f"üéì *–í–∞—à —É—Ä–æ–≤–µ–Ω—å —Ç–µ–ø–µ—Ä—å: {new_level}*\n\n"
    
    if new_level == "A1":
        result += "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ! –í—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ."
    elif new_level in ["A2", "B1"]:
        result += "–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –í—ã —Å—Ç—Ä–æ–∏—Ç–µ –ø—Ä–æ—á–Ω—ã–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç."
    elif new_level in ["B2", "C1"]:
        result += "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –í—ã —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ–≤–æ–ª—å–Ω–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º."
    else:  # C2
        result += "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–∞–∏–≤—ã—Å—à–µ–≥–æ —É—Ä–æ–≤–Ω—è."
    
    return result

def format_settings_overview(user_settings: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏."""
    header = "‚öôÔ∏è –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    
    result = f"{header}\n\n"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º —ç–º–æ–¥–∑–∏
    result += f"üî§ *–£—Ä–æ–≤–µ–Ω—å*: {user_settings.get('level', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}\n"
    result += f"üìù *–°–ª–æ–≤ –≤ –¥–µ–Ω—å*: {user_settings.get('words_per_day', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n"
    result += f"üîÅ *–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π*: {user_settings.get('repetitions', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n"
    result += f"üåê *–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å*: {user_settings.get('timezone', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}\n"
    result += f"üìö *–í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä*: {user_settings.get('chosen_set', '–ù–µ –≤—ã–±—Ä–∞–Ω')}\n"
    
    return result

def format_result_message(correct: int, total: int, is_revision: bool = False) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–≤–∏–∑–∞."""
    percentage = (correct / total) * 100 if total > 0 else 0
    
    # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if percentage >= 90:
        emoji = "üéâ"
    elif percentage >= 70:
        emoji = "üëç"
    elif percentage >= 50:
        emoji = "üëå"
    else:
        emoji = "üîÑ"
        
    progress = format_progress_bar(correct, total, 20)
    
    header = f"{emoji} –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! {emoji}"
    
    message = f"{header}\n\n"
    message += f"*–°—á–µ—Ç:* {correct} –∏–∑ {total} ({percentage:.1f}%)\n{progress}\n\n"
    
    if is_revision:
        message += "–í—ã –±—ã–ª–∏ –≤ *—Ä–µ–∂–∏–º–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è*. –≠—Ç–∏ —Å–ª–æ–≤–∞ —É–∂–µ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ.\n\n"
        if percentage < 70:
            message += "üí° *–°–æ–≤–µ—Ç:* –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è —ç—Ç–∏—Ö —Å–ª–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."
    else:
        message += "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å.\n\n"
        if percentage < 70:
            message += "üí° *–°–æ–≤–µ—Ç:* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–≤–∏–∑ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞, —á—Ç–æ–±—ã –æ—Å–≤–æ–∏—Ç—å —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏."
            
    return message

#utils/sticker_helper.py
# utils/sticker_helper.py
import random
import logging
from typing import List

logger = logging.getLogger(__name__)

# ID —Å—Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π (–Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ ID)
CONGRATULATION_STICKERS = [
    "CAACAgIAAxkBAAEOGn9n8VgDNk-LiGKGtIFdoF-mcH7dFwACsUIAAuzowEncnUsSshcY4jYE",  # –ê–ø–ª–æ–¥–∏—Å–º–µ–Ω—Ç—ã
    "CAACAgIAAxkBAAEOGoNn8VhCLHSxD3n-LgLEb6EHE59psQACqCoAAkRtWUi50I6LZeu10TYE",  # –ü–æ–±–µ–¥–∞
    "CAACAgIAAxkBAAEOGodn8VhlbulYsIr_PMipimhuebHVwgACIDsAAo_yUEhLNqxeSlOWvDYE",    # –û—Ç–ª–∏—á–Ω–æ
    "CAACAgIAAxkBAAEOGoln8Vh69Z4X9znkmJ1OerOdEkWZyAACbyoAAqAVWEjIcv-tVvXsRTYE"     # –ú–æ–ª–æ–¥–µ—Ü
]

# ID —Å—Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π
CLEAN_STICKERS = [
    "CAACAgIAAxkBAAEOGmJn8VSOHXIYi01pBkUEsCPEyTDC1AAC1ygAAtzp6Eg7WBFqJXABxjYE",  # –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
    "CAACAgIAAxkBAAEOGoVn8VhYr_JhwOAYBk-leBdZde9-FgACgzgAAvxWgEtjNWPp4shPgzYE"   # –ü–æ–≤—ã—à–µ–Ω–∏–µ
]

WELCOME_STICKERS = [
    "CAACAgIAAxkBAAEOGmJn8VSOHXIYi01pBkUEsCPEyTDC1AAC1ygAAtzp6Eg7WBFqJXABxjYE",  # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    "CAACAgIAAxkBAAEOGmJn8VSOHXIYi01pBkUEsCPEyTDC1AAC1ygAAtzp6Eg7WBFqJXABxjYE"   # –†—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ
]

def get_random_sticker(sticker_list: List[str]) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞."""
    if not sticker_list:
        logger.warning("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤")
        return None
    return random.choice(sticker_list)

def get_congratulation_sticker(score_percentage: float = None) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä. 
    –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.
    """
    return get_random_sticker(CONGRATULATION_STICKERS)

def get_clean_sticker() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è."""
    return get_random_sticker(CLEAN_STICKERS)

def get_welcome_sticker() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä."""
    return get_random_sticker(WELCOME_STICKERS)

#utils/helpers.py
import os
import random
import logging
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from config import LEVELS_DIR, REMINDER_START, DURATION_HOURS, DEFAULT_SETS
from database import crud

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö—ç—à –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–ª–æ–≤
daily_words_cache = {}

# –•—Ä–∞–Ω–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
previous_daily_words = {}
# –î–æ–±–∞–≤—å—Ç–µ –≤ utils/helpers.py —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–±—Ä–æ—Å–∞ –∫—ç—à–∞

def reset_daily_words_cache(chat_id):
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫—ç—à —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –¥–Ω—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    """
    try:
        if chat_id in daily_words_cache:
            logger.info(f"Resetting daily words cache for user {chat_id}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            entry = daily_words_cache[chat_id]
            if len(entry) > 9:
                is_revision = entry[9]
                logger.debug(f"User {chat_id} was in revision mode: {is_revision}")
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –∫—ç—à–∞
            del daily_words_cache[chat_id]
            logger.debug(f"Cache reset for user {chat_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
            if chat_id not in daily_words_cache:
                logger.info(f"Cache successfully reset for user {chat_id}")
            else:
                logger.error(f"Failed to reset cache for user {chat_id}")
        else:
            logger.debug(f"No cache found for user {chat_id}, nothing to reset")
    except Exception as e:
        logger.error(f"Error resetting cache for user {chat_id}: {e}")

def load_words_for_set(level: str, chosen_set: str):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ç–∞.
    –§–∞–π–ª –∏—â–µ—Ç—Å—è –ø–æ –ø—É—Ç–∏ LEVELS_DIR/level/chosen_set.txt.
    """
    if not level or not chosen_set:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: —É—Ä–æ–≤–µ–Ω—å={level}, —Å–µ—Ç={chosen_set}")
        return []
        
    filename = os.path.join(LEVELS_DIR, level, f"{chosen_set}.txt")
    words = []
    
    try:
        if not os.path.exists(filename):
            logger.warning(f"Set file not found: {filename}")
            return words
            
        with open(filename, encoding="utf-8") as f:
            words = [line.strip() for line in f if line.strip()]
        
        logger.debug(f"Loaded {len(words)} words from {filename}")
        return words
    except FileNotFoundError:
        logger.error(f"File not found: {filename}")
        return words
    except PermissionError:
        logger.error(f"Permission denied when accessing file: {filename}")
        return words
    except UnicodeDecodeError:
        logger.error(f"Unicode decode error in file: {filename}")
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª —Å –¥—Ä—É–≥–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
            with open(filename, encoding="cp1251") as f:
                words = [line.strip() for line in f if line.strip()]
            logger.info(f"Successfully loaded file with cp1251 encoding: {filename}")
            return words
        except Exception as e:
            logger.error(f"Failed to load file with alternative encoding: {e}")
            return words
    except Exception as e:
        logger.error(f"Error loading words from {filename}: {e}")
        return words

def compute_notification_times(total_count, first_time, duration_hours, tz="Europe/Moscow"):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    try:
        base = datetime.strptime(first_time, "%H:%M").replace(tzinfo=ZoneInfo(tz))
        interval = timedelta(hours=duration_hours / total_count)
        times = [(base + n * interval).strftime("%H:%M") for n in range(total_count)]
        return times
    except ValueError as e:
        logger.error(f"Invalid time format '{first_time}': {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        return [f"{int(i * 24 / total_count):02d}:00" for i in range(total_count)]
    except Exception as e:
        logger.error(f"Error computing notification times: {e}")
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return ["12:00"] * total_count

# –í —Ñ–∞–π–ª–µ utils/helpers.py –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é extract_english

def extract_english(word_line: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫—É—é —á–∞—Å—Ç—å –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ 'word - translation'.
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π —Ä–∞–±–æ—Ç—ã.
    """
    try:
        if not word_line or not isinstance(word_line, str):
            logger.error(f"Invalid input to extract_english: {word_line}")
            return ""
            
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 'word - translation'
        if " - " in word_line:
            return word_line.split(" - ", 1)[0].strip()
            
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 'word ‚Äì translation' (—Å –¥–ª–∏–Ω–Ω—ã–º —Ç–∏—Ä–µ)
        if " ‚Äì " in word_line:
            return word_line.split(" ‚Äì ", 1)[0].strip()
            
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 'word: translation'
        if ": " in word_line:
            return word_line.split(": ", 1)[0].strip()
            
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å emoji –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, —É–¥–∞–ª—è–µ–º –∏—Ö
        cleaned_line = word_line.strip()
        if cleaned_line and (cleaned_line[0] in ['üîπ', 'üìå', '‚è∞', '‚ö†Ô∏è', 'üéì']):
            cleaned_line = cleaned_line[1:].strip()
            
        # –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É
        return cleaned_line
    except Exception as e:
        logger.error(f"Error extracting English word from '{word_line}': {e}")
        return word_line.strip() if isinstance(word_line, str) else ""

def get_daily_words_for_user(chat_id, level, words_count, repetitions, first_time, duration_hours, force_reset=False, chosen_set=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–Ω—è.
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤ –∏ —Ä–µ–∂–∏–º–æ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - tuple (messages, times) - —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –≤—Ä–µ–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    - None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    try:
        from handlers.settings import user_set_selection
    except ImportError as e:
        logger.error(f"Error importing user_set_selection: {e}")
        user_set_selection = {}

    try:
        today = datetime.now().strftime("%Y-%m-%d")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –∫—ç—à–∞ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if force_reset:
            reset_daily_words_cache(chat_id)
            if chat_id in previous_daily_words:
                del previous_daily_words[chat_id]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã
        if chat_id in daily_words_cache:
            cached = daily_words_cache[chat_id]
            if (cached[0] == today and cached[3] == first_time and 
                cached[4] == duration_hours and cached[5] == words_count and cached[6] == repetitions):
                return cached[1], cached[2]
            reset_daily_words_cache(chat_id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç —Å–ª–æ–≤
        if chosen_set is None:
            chosen_set = user_set_selection.get(chat_id, DEFAULT_SETS.get(level))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
        set_file_path = os.path.join(LEVELS_DIR, level, f"{chosen_set}.txt")
        if not os.path.exists(set_file_path):
            logger.warning(f"–°–µ—Ç '{chosen_set}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è {level}. –ü—É—Ç—å: {set_file_path}")
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–π —Å–µ—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
            default_set = DEFAULT_SETS.get(level)
            if default_set:
                default_set_path = os.path.join(LEVELS_DIR, level, f"{default_set}.txt")
                if os.path.exists(default_set_path):
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∫—ç—à–µ
                    try:
                        from database import crud
                        crud.update_user_chosen_set(chat_id, default_set)
                        user_set_selection[chat_id] = default_set
                        chosen_set = default_set
                        logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∞–∑–æ–≤—ã–π —Å–µ—Ç '{default_set}' –¥–ª—è —É—Ä–æ–≤–Ω—è {level} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
                else:
                    logger.error(f"–ë–∞–∑–æ–≤—ã–π —Å–µ—Ç '{default_set}' —Ç–æ–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è {level}. –ü—É—Ç—å: {default_set_path}")
                    return None
            else:
                logger.error(f"–ù–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ —Å–µ—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è {level}")
                return None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ç–∞
        file_words = load_words_for_set(level, chosen_set)
        if not file_words:
            logger.warning(f"No words found for level {level}, set {chosen_set}")
            return None

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        try:
            learned_raw = crud.get_learned_words(chat_id)
            # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º extract_english –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞
            learned_set = set(extract_english(item[0]) for item in learned_raw)
        except Exception as e:
            logger.error(f"Error getting learned words for user {chat_id}: {e}")
            learned_set = set()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞
        available_words = []
        for word in file_words:
            eng_word = extract_english(word)
            if eng_word not in learned_set:
                available_words.append(word)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
        leftover_words = []
        if chat_id in previous_daily_words:
            for word in previous_daily_words[chat_id]:
                eng_word = extract_english(word)
                if eng_word not in learned_set:
                    leftover_words.append(word)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ —Ä–µ–∂–∏–º–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –º—ã –∏–ª–∏ –Ω–µ—Ç
        is_revision_mode = len(available_words) == 0 and len(file_words) > 0
        
        unique_words = []
        prefix_message = ""
        
        if is_revision_mode:
            # –†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è - –≤—Å–µ —Å–ª–æ–≤–∞ —É–∂–µ –≤—ã—É—á–µ–Ω—ã
            prefix_message = "üéì –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –≤ —ç—Ç–æ–º –Ω–∞–±–æ—Ä–µ. –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:\n\n"
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤—Å–µ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            if len(file_words) <= words_count:
                unique_words = file_words.copy()
            else:
                unique_words = random.sample(file_words, words_count)
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –µ—Å—Ç—å –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
            
            # 1. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
            if leftover_words:
                if len(leftover_words) <= words_count:
                    unique_words.extend(leftover_words)
                else:
                    unique_words.extend(random.sample(leftover_words, words_count))
            
            # 2. –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, –µ—Å–ª–∏ –º–µ—Å—Ç–æ –µ—â–µ –æ—Å—Ç–∞–ª–æ—Å—å
            if len(unique_words) < words_count:
                words_needed = words_count - len(unique_words)
                remaining_available = [w for w in available_words if w not in unique_words]
                
                if remaining_available:
                    if len(remaining_available) <= words_needed:
                        unique_words.extend(remaining_available)
                    else:
                        unique_words.extend(random.sample(remaining_available, words_needed))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–µ–Ω—å—à–µ –ª–∏ —Å–ª–æ–≤, —á–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–æ
            if len(unique_words) < words_count:
                # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                total_words = len(available_words) + len(leftover_words)
                # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                total_unique = len(set([extract_english(w) for w in (available_words + leftover_words)]))
                
                if total_unique > 0:
                    prefix_message = f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {total_unique} –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ —ç—Ç–æ–º –Ω–∞–±–æ—Ä–µ!\n\n"
                else:
                    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ö–æ—Ç—è —ç—Ç–æ—Ç —Å–ª—É—á–∞–π –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ is_revision_mode
                    prefix_message = "üéì –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –≤ —ç—Ç–æ–º –Ω–∞–±–æ—Ä–µ.\n\n"
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        try:
            if prefix_message:
                messages_unique = [prefix_message] + ["üîπ " + word for word in unique_words]
            else:
                messages_unique = ["üîπ " + word for word in unique_words]
                
            repeated_messages = messages_unique * repetitions
            total_notifications = len(repeated_messages)
        except Exception as e:
            logger.error(f"Error creating messages: {e}")
            messages_unique = ["üîπ Error loading words"]
            repeated_messages = messages_unique * repetitions
            total_notifications = len(repeated_messages)

        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user = crud.get_user(chat_id)
            user_tz = user[5] if user and len(user) > 5 and user[5] else "Europe/Moscow"
        except Exception as e:
            logger.error(f"Error getting user timezone: {e}")
            user_tz = "Europe/Moscow"

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        times = compute_notification_times(total_notifications, first_time, duration_hours, tz=user_tz)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ñ–ª–∞–≥–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        daily_words_cache[chat_id] = (today, repeated_messages, times, first_time, duration_hours, 
                                    words_count, repetitions, user_tz, unique_words, is_revision_mode)
        
        return repeated_messages, times
    except Exception as e:
        logger.error(f"Unhandled error in get_daily_words_for_user for chat_id {chat_id}: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return ["üîπ Error loading daily words"], ["12:00"]

#utils/constants.py
# utils/constants.py
levels_order = ["A1", "A2", "B1", "B2", "C1", "C2"]


#utils/cache_manager.py
# utils/cache_manager.py
import threading
import logging
import time
from datetime import datetime, timedelta
from typing import Dict, Any, Tuple, Optional

class CacheManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫,
    –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    def __init__(self, expiry_time: int = 86400):  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞
        self._cache: Dict[int, Tuple[float, Any]] = {}  # {key: (expiry_timestamp, value)}
        self._lock = threading.RLock()
        self._expiry_time = expiry_time
        self.logger = logging.getLogger('cache_manager')
        
    def get(self, key: int) -> Optional[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏"""
        with self._lock:
            if key not in self._cache:
                return None
            
            timestamp, value = self._cache[key]
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏
            if current_time > timestamp:
                self.logger.info(f"Cache expired for key {key}")
                del self._cache[key]
                return None
                
            return value
            
    def set(self, key: int, value: Any, custom_expiry: Optional[int] = None) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫—ç—à —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å—Ä–æ–∫–æ–º –≥–æ–¥–Ω–æ—Å—Ç–∏"""
        with self._lock:
            expiry = custom_expiry if custom_expiry is not None else self._expiry_time
            expiry_timestamp = time.time() + expiry
            self._cache[key] = (expiry_timestamp, value)
            self.logger.debug(f"Cache set for key {key} with expiry {expiry} seconds")
            
    def delete(self, key: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞"""
        with self._lock:
            if key in self._cache:
                del self._cache[key]
                self.logger.debug(f"Cache deleted for key {key}")
                return True
            return False
            
    def clear(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞"""
        with self._lock:
            self._cache.clear()
            self.logger.info("Cache cleared completely")
            
    def get_all_keys(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –≤ –∫—ç—à–µ"""
        with self._lock:
            return list(self._cache.keys())
            
    def clean_expired(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
        count = 0
        current_time = time.time()
        with self._lock:
            expired_keys = [k for k, (timestamp, _) in self._cache.items() if current_time > timestamp]
            for k in expired_keys:
                del self._cache[k]
                count += 1
        if count > 0:
            self.logger.info(f"Cleaned {count} expired cache entries")
        return count
            
    def has_key(self, key: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–∞ –≤ –∫—ç—à–µ —Å —É—á–µ—Ç–æ–º —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏"""
        with self._lock:
            if key not in self._cache:
                return False
                
            timestamp, _ = self._cache[key]
            if time.time() > timestamp:
                del self._cache[key]
                return False
                
            return True

#utils/quiz_helpers.py
# utils/quiz_helpers.py
"""
–§–∞–π–ª: utils/quiz_helpers.py
–û–ø–∏—Å–∞–Ω–∏–µ: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–≤–∏–∑–∞.
"""

import os
import logging
from config import LEVELS_DIR, DEFAULT_SETS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

def load_quiz_data(level: str, chosen_set: str = None):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–≤–∏–∑–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.
    """
    try:
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —É—Ä–æ–≤–Ω—è
        if chosen_set is None:
            chosen_set = DEFAULT_SETS.get(level)
            if not chosen_set:
                logger.warning(f"No default set defined for level {level}")
                return []
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ç–∞
        filename = os.path.join(LEVELS_DIR, level, f"{chosen_set}.txt")
        
        if not os.path.exists(filename):
            logger.warning(f"Quiz file not found: {filename}")
            return []
            
        quiz_items = []
        try:
            with open(filename, encoding="utf-8") as f:
                for line in f:
                    line = line.strip()
                    if not line:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
                    word = None
                    translation = None
                    
                    for separator in [" - ", " ‚Äì ", ": "]:
                        if separator in line:
                            parts = line.split(separator, 1)
                            if len(parts) == 2:
                                word = parts[0].strip()
                                translation = parts[1].strip()
                                quiz_items.append({"word": word, "translation": translation})
                                break
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –Ω–æ —Å—Ç—Ä–æ–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Å–ª–æ–≤–æ,
                    # –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –∫–∞–∫ –µ—Å—Ç—å (—ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é)
                    if word is None and line and not line.startswith(("#", "//")):
                        quiz_items.append({"word": line, "translation": line})
            
            logger.debug(f"Loaded {len(quiz_items)} quiz items from {filename}")
            return quiz_items
        except UnicodeDecodeError:
            logger.warning(f"Unicode decode error in file {filename}, trying with cp1251 encoding")
            try:
                with open(filename, encoding="cp1251") as f:
                    for line in f:
                        line = line.strip()
                        if not line:
                            continue
                        
                        # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É –¥–ª—è –¥—Ä—É–≥–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                        word = None
                        translation = None
                        
                        for separator in [" - ", " ‚Äì ", ": "]:
                            if separator in line:
                                parts = line.split(separator, 1)
                                if len(parts) == 2:
                                    word = parts[0].strip()
                                    translation = parts[1].strip()
                                    quiz_items.append({"word": word, "translation": translation})
                                    break
                        
                        if word is None and line and not line.startswith(("#", "//")):
                            quiz_items.append({"word": line, "translation": line})
                
                logger.debug(f"Loaded {len(quiz_items)} quiz items from {filename} with cp1251 encoding")
                return quiz_items
            except Exception as e:
                logger.error(f"Failed to load file with alternative encoding: {e}")
                return []
    except FileNotFoundError:
        logger.error(f"Quiz file not found: {filename}")
        return []
    except PermissionError:
        logger.error(f"Permission denied when accessing quiz file: {filename}")
        return []
    except Exception as e:
        logger.error(f"Error loading quiz data for level {level}, set {chosen_set}: {e}")
        return []

#tests/test_crud.py
# tests/test_crud.py
import unittest
from database import crud
from database.db import conn, cursor

class TestCRUD(unittest.TestCase):
    test_chat_id = 999999  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    def setUp(self):
        # –ü–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º chat_id (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        cursor.execute("DELETE FROM users WHERE chat_id = ?", (self.test_chat_id,))
        cursor.execute("DELETE FROM dictionary WHERE chat_id = ?", (self.test_chat_id,))
        conn.commit()

    def tearDown(self):
        # –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞ –æ—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ—Å—Ç–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        cursor.execute("DELETE FROM users WHERE chat_id = ?", (self.test_chat_id,))
        cursor.execute("DELETE FROM dictionary WHERE chat_id = ?", (self.test_chat_id,))
        conn.commit()

    def test_add_and_get_user(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è add_user –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ get_user ‚Äì –µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç."""
        crud.add_user(self.test_chat_id)
        user = crud.get_user(self.test_chat_id)
        self.assertIsNotNone(user, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É")
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ user: (chat_id, level, words_per_day, notifications, reminder_time)
        self.assertEqual(user[0], self.test_chat_id)
        self.assertEqual(user[1], 'A1')     # —É—Ä–æ–≤–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.assertEqual(user[2], 5)        # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.assertEqual(user[3], 10)       # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.assertEqual(user[4], '09:00')  # –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def test_update_user_level(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è update_user_level –æ–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        crud.add_user(self.test_chat_id)
        crud.update_user_level(self.test_chat_id, 'B2')
        user = crud.get_user(self.test_chat_id)
        self.assertEqual(user[1], 'B2', "–£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ B2")

    def test_update_user_words_per_day(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è update_user_words_per_day –æ–±–Ω–æ–≤–ª—è–µ—Ç —á–∏—Å–ª–æ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å."""
        crud.add_user(self.test_chat_id)
        crud.update_user_words_per_day(self.test_chat_id, 7)
        user = crud.get_user(self.test_chat_id)
        self.assertEqual(user[2], 7, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 7")

    def test_update_user_notifications(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è update_user_notifications –æ–±–Ω–æ–≤–ª—è–µ—Ç —á–∏—Å–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        crud.add_user(self.test_chat_id)
        crud.update_user_notifications(self.test_chat_id, 15)
        user = crud.get_user(self.test_chat_id)
        self.assertEqual(user[3], 15, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 15")

    def test_update_user_reminder_time(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è update_user_reminder_time –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
        crud.add_user(self.test_chat_id)
        crud.update_user_reminder_time(self.test_chat_id, "12:30")
        user = crud.get_user(self.test_chat_id)
        self.assertEqual(user[4], "12:30", "–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 12:30")

    def test_add_word_to_dictionary_and_get(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–≤–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ä—å –∏ –µ–≥–æ –º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å."""
        crud.add_user(self.test_chat_id)
        word_data = {
            "word": "apple",
            "translation": "—è–±–ª–æ–∫–æ",
            "transcription": "/Àà√¶p.…ôl/",
            "example": "I ate an apple."
        }
        crud.add_word_to_dictionary(self.test_chat_id, word_data)
        dictionary = crud.get_user_dictionary(self.test_chat_id, limit=10, offset=0)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–≤–∞—Ä—å –Ω–µ –ø—É—Å—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ "apple"
        self.assertGreaterEqual(len(dictionary), 1, "–°–ª–æ–≤–∞—Ä—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–ø–∏—Å—å")
        found = any(entry[0] == "apple" for entry in dictionary)
        self.assertTrue(found, "–°–ª–æ–≤–æ 'apple' –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ")

if __name__ == '__main__':
    unittest.main()


#tests/test_bot.py
# tests/test_bot.py
import unittest

class TestBot(unittest.TestCase):
    def test_placeholder(self):
        self.assertTrue(True)

if __name__ == '__main__':
    unittest.main()


