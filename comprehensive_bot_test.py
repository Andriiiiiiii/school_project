# comprehensive_bot_test.py
"""
–ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê ENGLISH LEARNING BOT
=========================================================

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é:
1. –ú–æ–π —Å–ª–æ–≤–∞—Ä—å
2. –°–ª–æ–≤–∞ –¥–Ω—è 
3. –¢–µ—Å—Ç –¥–Ω—è
4. –ü—Ä–∞–∫—Ç–∏–∫–∞ (—Ç–µ—Å—Ç –ø–æ —Å–ª–æ–≤–∞—Ä—é, –∑–∞—É—á–∏–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞)
5. –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è (—É—Ä–æ–≤–µ–Ω—å, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–∞–±–æ—Ä—ã)
6. –°–∏—Å—Ç–µ–º–∞ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
7. –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å–∫–∏–¥–æ–∫
8. –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
"""

import sys
import os
import asyncio
import random
from datetime import datetime, timedelta
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'

def print_header(text, color=Colors.BLUE):
    print(f"\n{color}{Colors.BOLD}{'='*80}")
    print(f"{text:^80}")
    print(f"{'='*80}{Colors.END}")

def print_test(text, color=Colors.CYAN):
    print(f"\n{color}{Colors.BOLD}üß™ {text}{Colors.END}")

def print_success(text):
    print(f"{Colors.GREEN}‚úÖ {text}{Colors.END}")

def print_error(text):
    print(f"{Colors.RED}‚ùå {text}{Colors.END}")

def print_warning(text):
    print(f"{Colors.YELLOW}‚ö†Ô∏è  {text}{Colors.END}")

def print_info(text):
    print(f"{Colors.WHITE}‚ÑπÔ∏è  {text}{Colors.END}")

class BotTester:
    def __init__(self):
        self.test_users = [888881, 888882, 888883]  # –†–∞–∑–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        self.passed_tests = 0
        self.failed_tests = 0
        self.total_tests = 0
        
    def setup_test_environment(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã"""
        print_header("–ù–ê–°–¢–†–û–ô–ö–ê –¢–ï–°–¢–û–í–û–ô –°–†–ï–î–´")
        
        try:
            from database.db import db_manager
            from database import crud
            
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user_id in self.test_users:
                with db_manager.transaction() as conn:
                    conn.execute("DELETE FROM users WHERE chat_id = ?", (user_id,))
                    conn.execute("DELETE FROM dictionary WHERE chat_id = ?", (user_id,))
                    conn.execute("DELETE FROM learned_words WHERE chat_id = ?", (user_id,))
                    conn.execute("DELETE FROM active_payments WHERE chat_id = ?", (user_id,))
            
            print_success("–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –æ—á–∏—â–µ–Ω–∞")
            return True
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ä–µ–¥—ã: {e}")
            return False

    def test_user_creation_and_onboarding(self):
        """–¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥"""
        print_header("–¢–ï–°–¢ 1: –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ò –û–ù–ë–û–†–î–ò–ù–ì")
        
        try:
            from database import crud
            from config import DEFAULT_SETS
            
            for i, user_id in enumerate(self.test_users):
                print_test(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                crud.add_user(user_id)
                user = crud.get_user(user_id)
                
                assert user is not None, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —Å–æ–∑–¥–∞–Ω"
                assert user[0] == user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π chat_id"
                assert user[1] == "A1", "–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                assert user[2] == 5, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                assert user[3] in [3, 10], "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                
                print_success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞
                default_set = DEFAULT_SETS.get("A1")
                if default_set:
                    crud.update_user_chosen_set(user_id, default_set)
                    updated_user = crud.get_user(user_id)
                    assert updated_user[6] == default_set, "–ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
                    print_success(f"–ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä '{default_set}' –Ω–∞–∑–Ω–∞—á–µ–Ω")
                
                # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
                levels = ["A1", "A2", "B1", "B2", "C1", "C2"]
                test_level = levels[i % len(levels)]
                crud.update_user_level(user_id, test_level)
                
                updated_user = crud.get_user(user_id)
                assert updated_user[1] == test_level, f"–£—Ä–æ–≤–µ–Ω—å –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {test_level}"
                print_success(f"–£—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {test_level}")
            
            self.passed_tests += 1
            return True
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            self.failed_tests += 1
            return False

    def test_words_day_generation(self):
        """–¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ–≤ –¥–Ω—è"""
        print_header("–¢–ï–°–¢ 2: –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–õ–û–í –î–ù–Ø")
        
        try:
            from utils.helpers import get_daily_words_for_user, reset_daily_words_cache
            from config import REMINDER_START, DURATION_HOURS
            
            user_id = self.test_users[0]
            
            print_test("–ë–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ–≤ –¥–Ω—è")
            
            # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            result = get_daily_words_for_user(
                user_id, "A1", 5, 3,
                first_time=REMINDER_START,
                duration_hours=DURATION_HOURS
            )
            
            assert result is not None, "–°–ª–æ–≤–∞ –¥–Ω—è –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã"
            messages, times = result
            assert len(messages) > 0, "–°–æ–æ–±—â–µ–Ω–∏—è –ø—É—Å—Ç—ã–µ"
            assert len(times) > 0, "–í—Ä–µ–º–µ–Ω–∞ –ø—É—Å—Ç—ã–µ"
            assert len(messages) == len(times), "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤—Ä–µ–º–µ–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
            
            print_success(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤—Ä–µ–º–µ–Ω–∞–º–∏")
            
            # –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
            result2 = get_daily_words_for_user(
                user_id, "A1", 5, 3,
                first_time=REMINDER_START,
                duration_hours=DURATION_HOURS
            )
            
            assert result2 == result, "–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            print_success("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –¢–µ—Å—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –∫—ç—à–∞")
            result3 = get_daily_words_for_user(
                user_id, "A1", 7, 2,  # –î—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                first_time=REMINDER_START,
                duration_hours=DURATION_HOURS,
                force_reset=True
            )
            
            assert result3 != result, "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            messages3, times3 = result3
            expected_total = 7 * 2  # 7 —Å–ª–æ–≤ √ó 2 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            assert len(messages3) == expected_total, f"–û–∂–∏–¥–∞–ª–æ—Å—å {expected_total} —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–æ {len(messages3)}"
            print_success("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            test_cases = [
                (3, 1),   # –ú–∏–Ω–∏–º—É–º
                (10, 5),  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
                (20, 3),  # –ú–∞–∫—Å–∏–º—É–º —Å–ª–æ–≤
                (1, 1),   # –ö—Ä–∞–π–Ω–∏–π –º–∏–Ω–∏–º—É–º
            ]
            
            for words, reps in test_cases:
                reset_daily_words_cache(user_id)
                result = get_daily_words_for_user(
                    user_id, "A1", words, reps,
                    first_time=REMINDER_START,
                    duration_hours=DURATION_HOURS,
                    force_reset=True
                )
                
                if result:
                    messages, times = result
                    expected = words * reps
                    assert len(messages) <= expected + 1, f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {words}√ó{reps}"
                    print_success(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã {words}√ó{reps}: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            self.passed_tests += 1
            return True
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–≤ –¥–Ω—è: {e}")
            import traceback
            traceback.print_exc()
            self.failed_tests += 1
            return False

    def test_dictionary_functionality(self):
        """–¢–µ—Å—Ç 3: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–ª–æ–≤–∞—Ä—è"""
        print_header("–¢–ï–°–¢ 3: –§–£–ù–ö–¶–ò–û–ù–ê–õ –°–õ–û–í–ê–†–Ø")
        
        try:
            from database import crud
            
            user_id = self.test_users[0]
            
            print_test("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª–æ–≤–∞
            test_words = [
                ("apple", "—è–±–ª–æ–∫–æ"),
                ("book", "–∫–Ω–∏–≥–∞"), 
                ("cat", "–∫–æ—Ç"),
                ("dog", "—Å–æ–±–∞–∫–∞"),
                ("house", "–¥–æ–º")
            ]
            
            today = datetime.now().strftime("%Y-%m-%d")
            
            for word, translation in test_words:
                crud.add_learned_word(user_id, word, translation, today)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
            learned = crud.get_learned_words(user_id)
            assert len(learned) == len(test_words), f"–û–∂–∏–¥–∞–ª–æ—Å—å {len(test_words)} —Å–ª–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {len(learned)}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            learned_words = [w[0] for w in learned]
            for word, _ in test_words:
                assert word in learned_words, f"–°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ"
            
            print_success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(test_words)} —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å")
            
            # –¢–µ—Å—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
            crud.add_learned_word(user_id, "apple", "—è–±–ª–æ–∫–æ", today)  # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
            learned_after = crud.get_learned_words(user_id)
            assert len(learned_after) == len(test_words), "–î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω—ã"
            print_success("–î—É–±–ª–∏–∫–∞—Ç—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω—ã")
            
            # –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Å–ª–æ–≤–∞—Ä—è
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —Å–ª–æ–≤–∞—Ä—è")
            crud.clear_learned_words_for_user(user_id)
            cleared = crud.get_learned_words(user_id)
            assert len(cleared) == 0, "–°–ª–æ–≤–∞—Ä—å –Ω–µ –æ—á–∏—â–µ–Ω"
            print_success("–°–ª–æ–≤–∞—Ä—å –æ—á–∏—â–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            self.passed_tests += 1
            return True
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å–ª–æ–≤–∞—Ä—è: {e}")
            self.failed_tests += 1
            return False

    def test_quiz_functionality(self):
        """–¢–µ—Å—Ç 4: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç–µ—Å—Ç–æ–≤"""
        print_header("–¢–ï–°–¢ 4: –§–£–ù–ö–¶–ò–û–ù–ê–õ –¢–ï–°–¢–û–í")
        
        try:
            from utils.quiz_helpers import load_quiz_data
            from utils.quiz_utils import generate_quiz_options
            from database import crud
            
            user_id = self.test_users[0]
            
            print_test("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–≤–∏–∑–∞")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∫–≤–∏–∑–∞
            quiz_data = load_quiz_data("A1", "A1 Basic 1")
            assert quiz_data is not None, "–î–∞–Ω–Ω—ã–µ –∫–≤–∏–∑–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
            assert len(quiz_data) > 0, "–î–∞–Ω–Ω—ã–µ –∫–≤–∏–∑–∞ –ø—É—Å—Ç—ã–µ"
            
            print_success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(quiz_data)} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
            print_test("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤")
            
            if quiz_data:
                test_item = quiz_data[0]
                correct_answer = test_item["translation"]
                all_translations = [item["translation"] for item in quiz_data]
                
                options, correct_index = generate_quiz_options(correct_answer, all_translations, 4)
                
                assert len(options) == 4, f"–û–∂–∏–¥–∞–ª–æ—Å—å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞, –ø–æ–ª—É—á–µ–Ω–æ {len(options)}"
                assert correct_answer in options, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö"
                assert options[correct_index] == correct_answer, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"
                assert correct_index >= 0 and correct_index < 4, "–ò–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"
                
                print_success("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –¢–µ—Å—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–≤–∏–∑–∞
            print_test("–°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–≤–∏–∑–∞")
            
            # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            crud.clear_learned_words_for_user(user_id)
            today = datetime.now().strftime("%Y-%m-%d")
            
            correct_answers = 0
            test_questions = quiz_data[:5] if len(quiz_data) >= 5 else quiz_data
            
            for question in test_questions:
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (50% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
                if random.choice([True, False]):
                    crud.add_learned_word(
                        user_id, 
                        question["word"], 
                        question["translation"], 
                        today
                    )
                    correct_answers += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–∏–ª–∏—Å—å –≤ —Å–ª–æ–≤–∞—Ä—å
            learned = crud.get_learned_words(user_id)
            assert len(learned) == correct_answers, f"–í —Å–ª–æ–≤–∞—Ä–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å {correct_answers} —Å–ª–æ–≤"
            
            print_success(f"–°–∏–º—É–ª—è—Ü–∏—è –∫–≤–∏–∑–∞: {correct_answers}/{len(test_questions)} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
            
            self.passed_tests += 1
            return True
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
            import traceback
            traceback.print_exc()
            self.failed_tests += 1
            return False

    def test_settings_and_personalization(self):
        """–¢–µ—Å—Ç 5: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è"""
        print_header("–¢–ï–°–¢ 5: –ù–ê–°–¢–†–û–ô–ö–ò –ò –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø")
        
        try:
            from database import crud
            
            user_id = self.test_users[1]
            crud.add_user(user_id)
            
            print_test("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
            # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            test_cases = [
                ("level", "B2", lambda u: u[1]),
                ("words_per_day", 15, lambda u: u[2]),
                ("notifications", 4, lambda u: u[3]),
                ("timezone", "Europe/London", lambda u: u[5]),
            ]
            
            for setting_name, test_value, getter in test_cases:
                if setting_name == "level":
                    crud.update_user_level(user_id, test_value)
                elif setting_name == "words_per_day":
                    crud.update_user_words_per_day(user_id, test_value)
                elif setting_name == "notifications":
                    crud.update_user_notifications(user_id, test_value)
                elif setting_name == "timezone":
                    crud.update_user_timezone(user_id, test_value)
                
                user = crud.get_user(user_id)
                actual_value = getter(user)
                assert actual_value == test_value, f"{setting_name}: –æ–∂–∏–¥–∞–ª–æ—Å—å {test_value}, –ø–æ–ª—É—á–µ–Ω–æ {actual_value}"
                print_success(f"{setting_name} –æ–±–Ω–æ–≤–ª–µ–Ω: {test_value}")
            
            # –¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –Ω–∞–±–æ—Ä–∞ —Å–ª–æ–≤
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–±–æ—Ä–∞ —Å–ª–æ–≤")
            
            test_set = "A1 Basic 1"
            crud.update_user_chosen_set(user_id, test_set)
            user = crud.get_user(user_id)
            assert user[6] == test_set, f"–ù–∞–±–æ—Ä –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω: –æ–∂–∏–¥–∞–ª—Å—è {test_set}, –ø–æ–ª—É—á–µ–Ω {user[6]}"
            print_success(f"–ù–∞–±–æ—Ä —Å–ª–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {test_set}")
            
            # –¢–µ—Å—Ç —Å–º–µ–Ω—ã –Ω–∞–±–æ—Ä–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π —Å–ª–æ–≤–∞—Ä—è
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã –Ω–∞–±–æ—Ä–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π —Å–ª–æ–≤–∞—Ä—è")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
            today = datetime.now().strftime("%Y-%m-%d")
            crud.add_learned_word(user_id, "test", "—Ç–µ—Å—Ç", today)
            
            # –ú–µ–Ω—è–µ–º –Ω–∞–±–æ—Ä
            new_set = "A1 Basic 2"
            crud.clear_learned_words_for_user(user_id)  # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–∞–±–æ—Ä–∞
            crud.update_user_chosen_set(user_id, new_set)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º
            learned = crud.get_learned_words(user_id)
            user = crud.get_user(user_id)
            
            assert len(learned) == 0, "–°–ª–æ–≤–∞—Ä—å –Ω–µ –æ—á–∏—â–µ–Ω –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–∞–±–æ—Ä–∞"
            assert user[6] == new_set, "–ù–∞–±–æ—Ä –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω"
            print_success("–°–º–µ–Ω–∞ –Ω–∞–±–æ—Ä–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π —Å–ª–æ–≤–∞—Ä—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            self.passed_tests += 1
            return True
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            self.failed_tests += 1
            return False

    def test_streak_functionality(self):
        """–¢–µ—Å—Ç 6: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥"""
        print_header("–¢–ï–°–¢ 6: –§–£–ù–ö–¶–ò–û–ù–ê–õ –î–ù–ï–ô –ü–û–î–†–Ø–î")
        
        try:
            from database import crud
            
            user_id = self.test_users[2]
            crud.add_user(user_id)
            
            print_test("–ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å streak")
            
            # –¢–µ—Å—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            streak, date = crud.get_user_streak(user_id)
            assert streak == 0, f"–ù–∞—á–∞–ª—å–Ω—ã–π streak –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0, –ø–æ–ª—É—á–µ–Ω {streak}"
            assert date is None, "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å None"
            print_success("–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ streak –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –¢–µ—Å—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ streak")
            
            new_streak = crud.increment_user_streak(user_id)
            assert new_streak == 1, f"–ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ streak –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1, –ø–æ–ª—É—á–µ–Ω {new_streak}"
            
            # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å
            same_day_streak = crud.increment_user_streak(user_id)
            assert same_day_streak == 1, f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 1, –ø–æ–ª—É—á–µ–Ω {same_day_streak}"
            print_success("–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç streak —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è streak
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è streak")
            
            yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
            crud.update_user_streak(user_id, 5, yesterday)
            
            streak, date = crud.get_user_streak(user_id)
            assert streak == 5, f"Streak –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 5, –ø–æ–ª—É—á–µ–Ω {streak}"
            assert date == yesterday, f"–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å {yesterday}, –ø–æ–ª—É—á–µ–Ω–∞ {date}"
            print_success("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ streak —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
            incremented = crud.increment_user_streak(user_id)
            assert incremented == 6, f"–ü–æ—Å–ª–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ streak –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 6, –ø–æ–ª—É—á–µ–Ω {incremented}"
            print_success("–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç —Å–±—Ä–æ—Å–∞
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±—Ä–æ—Å–∞ streak")
            
            crud.reset_user_streak(user_id)
            streak, date = crud.get_user_streak(user_id)
            assert streak == 0, f"–ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ streak –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0, –ø–æ–ª—É—á–µ–Ω {streak}"
            print_success("–°–±—Ä–æ—Å streak —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞")
            
            from services.scheduler import process_daily_reset
            
            # –°–ª—É—á–∞–π 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç –≤—á–µ—Ä–∞
            yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
            crud.update_user_streak(user_id, 10, yesterday)
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à —Å–±—Ä–æ—Å–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if hasattr(process_daily_reset, 'processed_resets'):
                process_daily_reset.processed_resets.clear()
            
            process_daily_reset(user_id)
            streak, _ = crud.get_user_streak(user_id)
            assert streak == 10, f"Streak –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è (—Ç–µ—Å—Ç –≤—á–µ—Ä–∞), –ø–æ–ª—É—á–µ–Ω {streak}"
            print_success("Streak —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–∏ —Ç–µ—Å—Ç–µ –≤—á–µ—Ä–∞")
            
            # –°–ª—É—á–∞–π 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç –ø–æ–∑–∞–≤—á–µ—Ä–∞
            day_before_yesterday = (datetime.now() - timedelta(days=2)).strftime("%Y-%m-%d")
            crud.update_user_streak(user_id, 15, day_before_yesterday)
            
            if hasattr(process_daily_reset, 'processed_resets'):
                process_daily_reset.processed_resets.clear()
            
            process_daily_reset(user_id)
            streak, _ = crud.get_user_streak(user_id)
            assert streak == 0, f"Streak –¥–æ–ª–∂–µ–Ω —Å–±—Ä–æ—Å–∏—Ç—å—Å—è (–ø—Ä–æ–ø—É—Å–∫ –¥–Ω—è), –ø–æ–ª—É—á–µ–Ω {streak}"
            print_success("Streak —Å–±—Ä–æ—à–µ–Ω –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –¥–Ω—è")
            
            self.passed_tests += 1
            return True
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ streak: {e}")
            import traceback
            traceback.print_exc()
            self.failed_tests += 1
            return False

    def test_subscription_and_discounts(self):
        """–¢–µ—Å—Ç 7: –ü–æ–¥–ø–∏—Å–∫–∞ –∏ —Å–∫–∏–¥–∫–∏"""
        print_header("–¢–ï–°–¢ 7: –ü–û–î–ü–ò–°–ö–ê –ò –°–ö–ò–î–ö–ò")
        
        try:
            from database import crud
            from services.payment import PaymentService
            
            user_id = self.test_users[0]
            
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏")
            
            # –¢–µ—Å—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            is_premium = crud.is_user_premium(user_id)
            assert not is_premium, "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–º–∏—É–º"
            
            status, expires_at, payment_id = crud.get_user_subscription_status(user_id)
            assert status == 'free', f"–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'free', –ø–æ–ª—É—á–µ–Ω {status}"
            print_success("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            
            # –¢–µ—Å—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º")
            
            future_date = (datetime.now() + timedelta(days=30)).isoformat()
            crud.update_user_subscription(user_id, "premium", future_date, "test_payment")
            
            is_premium = crud.is_user_premium(user_id)
            assert is_premium, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"
            
            status, expires_at, payment_id = crud.get_user_subscription_status(user_id)
            assert status == 'premium', f"–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'premium', –ø–æ–ª—É—á–µ–Ω {status}"
            assert expires_at == future_date, "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
            print_success("–ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç —Å–∫–∏–¥–æ–∫ –∑–∞ streak
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∏–¥–æ–∫ –∑–∞ streak")
            
            # –ë–µ–∑ streak
            crud.reset_user_streak(user_id)
            discount = crud.calculate_streak_discount(user_id)
            assert discount == 0, f"–ë–µ–∑ streak —Å–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 0%, –ø–æ–ª—É—á–µ–Ω–∞ {discount}%"
            
            # –° streak 15 –¥–Ω–µ–π
            crud.update_user_streak(user_id, 15)
            discount = crud.calculate_streak_discount(user_id)
            assert discount == 15, f"–ó–∞ 15 –¥–Ω–µ–π —Å–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 15%, –ø–æ–ª—É—á–µ–Ω–∞ {discount}%"
            
            # –° streak 35 –¥–Ω–µ–π (–º–∞–∫—Å–∏–º—É–º 30%)
            crud.update_user_streak(user_id, 35)
            discount = crud.calculate_streak_discount(user_id)
            assert discount == 30, f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 30%, –ø–æ–ª—É—á–µ–Ω–∞ {discount}%"
            
            print_success("–°–∫–∏–¥–∫–∏ –∑–∞ streak —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω —Å–æ —Å–∫–∏–¥–∫–æ–π
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω —Å–æ —Å–∫–∏–¥–∫–æ–π")
            
            price_info = PaymentService.calculate_discounted_price(user_id, 1)
            assert price_info['has_discount'], "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–∫–∏–¥–∫–∞"
            assert price_info['discount_percent'] == 30, "–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 30%"
            assert price_info['final_price'] < price_info['base_price'], "–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –±–∞–∑–æ–≤–æ–π"
            
            expected_final = price_info['base_price'] * 0.7  # 30% —Å–∫–∏–¥–∫–∞
            assert abs(price_info['final_price'] - expected_final) < 0.01, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Ü–µ–Ω—ã"
            print_success("–†–∞—Å—á–µ—Ç —Ü–µ–Ω —Å–æ —Å–∫–∏–¥–∫–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ —Å–∫–∏–¥–∫–∏)
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∏–¥–æ–∫ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
            crud.update_user_subscription(user_id, "free")
            crud.update_user_streak(user_id, 20)  # –ë–æ–ª—å—à–æ–π streak
            
            discount = crud.calculate_streak_discount(user_id)
            assert discount == 0, f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å —Å–∫–∏–¥–∫—É, –ø–æ–ª—É—á–µ–Ω–∞ {discount}%"
            print_success("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞—é—Ç —Å–∫–∏–¥–∫–∏")
            
            self.passed_tests += 1
            return True
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å–∫–∏–¥–æ–∫: {e}")
            import traceback
            traceback.print_exc()
            self.failed_tests += 1
            return False

    def test_subscription_helpers(self):
        """–¢–µ—Å—Ç 8: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        print_header("–¢–ï–°–¢ 8: –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ü–û–î–ü–ò–°–ö–ò")
        
        try:
            from utils.subscription_helpers import (
                get_available_sets_for_user,
                is_set_available_for_user,
                get_premium_sets_for_level,
                get_all_sets_for_level
            )
            from database import crud
            
            user_id = self.test_users[1]
            crud.add_user(user_id)
            
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–∞–±–æ—Ä–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
            # –¢–µ—Å—Ç –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            crud.update_user_subscription(user_id, "free")
            crud.update_user_level(user_id, "A1")
            
            available_sets = get_available_sets_for_user(user_id, "A1")
            all_sets = get_all_sets_for_level("A1")
            premium_sets = get_premium_sets_for_level("A1")
            
            print_info(f"–í—Å–µ–≥–æ –Ω–∞–±–æ—Ä–æ–≤ A1: {len(all_sets)}")
            print_info(f"–î–æ—Å—Ç—É–ø–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: {len(available_sets)}")
            print_info(f"–ü—Ä–µ–º–∏—É–º –Ω–∞–±–æ—Ä–æ–≤: {len(premium_sets)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
            assert len(available_sets) < len(all_sets), "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–±–æ—Ä—ã
            basic_sets = ["A1 Basic 1", "A1 Basic 2"]
            for basic_set in basic_sets:
                if basic_set in all_sets:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–±–æ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    is_available = is_set_available_for_user(user_id, basic_set)
                    assert is_available, f"–ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä '{basic_set}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
            
            print_success("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            
            # –¢–µ—Å—Ç –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–∞–±–æ—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
            future_date = (datetime.now() + timedelta(days=30)).isoformat()
            crud.update_user_subscription(user_id, "premium", future_date, "test_payment")
            
            available_sets_premium = get_available_sets_for_user(user_id, "A1")
            
            # –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –Ω–∞–±–æ—Ä–∞–º
            assert len(available_sets_premium) == len(all_sets), "–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –Ω–∞–±–æ—Ä–∞–º"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º –Ω–∞–±–æ—Ä—ã
            for premium_set in premium_sets[:3]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3
                is_available = is_set_available_for_user(user_id, premium_set)
                assert is_available, f"–ü—Ä–µ–º–∏—É–º –Ω–∞–±–æ—Ä '{premium_set}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
            
            print_success("–í—Å–µ –Ω–∞–±–æ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            
            # –¢–µ—Å—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π")
            
            levels_to_test = ["A2", "B1", "B2", "C1", "C2"]
            for level in levels_to_test:
                crud.update_user_level(user_id, level)
                level_sets = get_available_sets_for_user(user_id, level)
                level_all = get_all_sets_for_level(level)
                
                if level_all:  # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–±–æ—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è
                    assert len(level_sets) > 0, f"–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –¥–ª—è —É—Ä–æ–≤–Ω—è {level}"
                    assert len(level_sets) == len(level_all), f"–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –Ω–∞–±–æ—Ä–∞–º —É—Ä–æ–≤–Ω—è {level}"
                    print_success(f"–£—Ä–æ–≤–µ–Ω—å {level}: {len(level_sets)} –Ω–∞–±–æ—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ")
            
            self.passed_tests += 1
            return True
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            import traceback
            traceback.print_exc()
            self.failed_tests += 1
            return False

    def test_edge_cases_and_error_handling(self):
        """–¢–µ—Å—Ç 9: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        print_header("–¢–ï–°–¢ 9: –ì–†–ê–ù–ò–ß–ù–´–ï –°–õ–£–ß–ê–ò –ò –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö")
        
        try:
            from database import crud
            from utils.helpers import get_daily_words_for_user
            from config import REMINDER_START, DURATION_HOURS
            
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
            # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            fake_user_id = 999999
            streak, date = crud.get_user_streak(fake_user_id)
            assert streak == 0, "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å streak = 0"
            
            discount = crud.calculate_streak_discount(fake_user_id)
            assert discount == 0, "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å–∫–∏–¥–∫—É = 0"
            
            print_success("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –¢–µ—Å—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π streak
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π streak")
            
            user_id = self.test_users[0]
            
            # –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π streak
            crud.update_user_streak(user_id, 9999)
            discount = crud.calculate_streak_discount(user_id)
            assert discount <= 30, f"–°–∫–∏–¥–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 30%, –ø–æ–ª—É—á–µ–Ω–∞ {discount}%"
            
            # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π streak (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–º, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º)
            crud.update_user_streak(user_id, -5)
            streak, _ = crud.get_user_streak(user_id)
            assert streak >= 0, f"Streak –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º, –ø–æ–ª—É—á–µ–Ω {streak}"
            
            print_success("–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –Ω–∞–±–æ—Ä–æ–º —Å–ª–æ–≤
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å–ª–æ–≤")
            
            crud.update_user_chosen_set(user_id, "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–∞–±–æ—Ä")
            result = get_daily_words_for_user(
                user_id, "A1", 5, 3,
                first_time=REMINDER_START,
                duration_hours=DURATION_HOURS,
                force_reset=True
            )
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å None –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–º–µ–Ω–∏—Ç—å –Ω–∞–±–æ—Ä
            if result is None:
                print_success("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–∞–±–æ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (None)")
            elif len(result) == 3:  # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–º–µ–Ω–∏—Ç—å –Ω–∞–±–æ—Ä
                print_success("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–∞–±–æ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–º–µ–Ω—ã)")
            else:
                print_warning("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞–±–æ—Ä–∞")
            
            # –¢–µ—Å—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–ª–æ–≤ –¥–Ω—è
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–ª–æ–≤ –¥–Ω—è")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä
            crud.update_user_chosen_set(user_id, "A1 Basic 1")
            
            extreme_cases = [
                (0, 1),   # 0 —Å–ª–æ–≤
                (1, 0),   # 0 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
                (100, 10), # –û—á–µ–Ω—å –º–Ω–æ–≥–æ —Å–ª–æ–≤
                (5, 100),  # –û—á–µ–Ω—å –º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            ]
            
            for words, reps in extreme_cases:
                try:
                    result = get_daily_words_for_user(
                        user_id, "A1", words, reps,
                        first_time=REMINDER_START,
                        duration_hours=DURATION_HOURS,
                        force_reset=True
                    )
                    # –õ—é–±–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ None - –≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ –Ω–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                    print_success(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã {words}√ó{reps} –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –±–µ–∑ –æ—à–∏–±–æ–∫")
                except Exception as e:
                    print_warning(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã {words}√ó{reps} –≤—ã–∑–≤–∞–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            
            # –¢–µ—Å—Ç –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏")
            
            past_date = (datetime.now() - timedelta(days=1)).isoformat()
            crud.update_user_subscription(user_id, "premium", past_date, "expired_payment")
            
            is_premium = crud.is_user_premium(user_id)
            assert not is_premium, "–ò—Å—Ç–µ–∫—à–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å—á–∏—Ç–∞—Ç—å—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π"
            
            discount = crud.calculate_streak_discount(user_id)
            assert discount == 0, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å —Å–∫–∏–¥–∫—É"
            
            print_success("–ò—Å—Ç–µ–∫—à–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            self.passed_tests += 1
            return True
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: {e}")
            import traceback
            traceback.print_exc()
            self.failed_tests += 1
            return False

    def test_daily_reset_scenarios(self):
        """–¢–µ—Å—Ç 10: –°—Ü–µ–Ω–∞—Ä–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞"""
        print_header("–¢–ï–°–¢ 10: –°–¶–ï–ù–ê–†–ò–ò –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –°–ë–†–û–°–ê")
        
        try:
            from database import crud
            from utils.helpers import get_daily_words_for_user, previous_daily_words, reset_daily_words_cache
            from services.scheduler import process_daily_reset
            from config import REMINDER_START, DURATION_HOURS
            
            user_id = self.test_users[2]
            crud.add_user(user_id)
            crud.update_user_chosen_set(user_id, "A1 Basic 1")
            
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –¥–Ω—è
            result = get_daily_words_for_user(
                user_id, "A1", 5, 2,
                first_time=REMINDER_START,
                duration_hours=DURATION_HOURS,
                force_reset=True
            )
            
            assert result is not None, "–°–ª–æ–≤–∞ –¥–Ω—è –¥–æ–ª–∂–Ω—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å (—Å–∏–º—É–ª–∏—Ä—É–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞)
            today = datetime.now().strftime("%Y-%m-%d")
            crud.add_learned_word(user_id, "apple", "—è–±–ª–æ–∫–æ", today)
            crud.add_learned_word(user_id, "book", "–∫–Ω–∏–≥–∞", today)
            # –û—Å—Ç–∞–≤–ª—è–µ–º 3 —Å–ª–æ–≤–∞ –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–º–∏
            
            print_success("–°–∏–º—É–ª—è—Ü–∏—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
            print_test("–°–∏–º—É–ª—è—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞")
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if hasattr(process_daily_reset, 'processed_resets'):
                process_daily_reset.processed_resets.clear()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å–±—Ä–æ—Å–∞
            learned_before = crud.get_learned_words(user_id)
            
            process_daily_reset(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ previous_daily_words
            if user_id in previous_daily_words:
                leftover_words = previous_daily_words[user_id]
                print_success(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(leftover_words)} –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å")
            else:
                print_info("–ù–µ—Ç –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å")
            
            # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–≤ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å —Å —É—á–µ—Ç–æ–º –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã—Ö
            print_test("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ–≤ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å —Å –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏")
            
            result_next_day = get_daily_words_for_user(
                user_id, "A1", 5, 2,
                first_time=REMINDER_START,
                duration_hours=DURATION_HOURS,
                force_reset=True
            )
            
            if result_next_day:
                messages, times = result_next_day
                print_success(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å")
            else:
                print_warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å")
            
            # –¢–µ—Å—Ç —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –≤—Å–µ —Å–ª–æ–≤–∞ –≤—ã—É—á–µ–Ω—ã
            print_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (–≤—Å–µ —Å–ª–æ–≤–∞ –≤—ã—É—á–µ–Ω—ã)")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
            from pathlib import Path
            from config import LEVELS_DIR
            
            set_file = Path(LEVELS_DIR) / "A1" / "A1 Basic 1.txt"
            if set_file.exists():
                with open(set_file, 'r', encoding='utf-8') as f:
                    all_words = [line.strip() for line in f if line.strip()]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
                for word_line in all_words[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    if " - " in word_line:
                        word, translation = word_line.split(" - ", 1)
                        crud.add_learned_word(user_id, word.strip(), translation.strip(), today)
                
                print_success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {min(10, len(all_words))} —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                reset_daily_words_cache(user_id)
                result_revision = get_daily_words_for_user(
                    user_id, "A1", 5, 2,
                    first_time=REMINDER_START,
                    duration_hours=DURATION_HOURS,
                    force_reset=True
                )
                
                if result_revision:
                    messages, times = result_revision
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                    revision_indicators = ["üéì", "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º", "–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"]
                    has_revision_indicator = any(
                        any(indicator in msg for indicator in revision_indicators)
                        for msg in messages
                    )
                    
                    if has_revision_indicator:
                        print_success("–†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    else:
                        print_info("–†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é)")
            
            self.passed_tests += 1
            return True
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞: {e}")
            import traceback
            traceback.print_exc()
            self.failed_tests += 1
            return False

    def cleanup_test_environment(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã"""
        print_header("–û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–û–ô –°–†–ï–î–´")
        
        try:
            from database.db import db_manager
            from utils.helpers import daily_words_cache, previous_daily_words
            
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user_id in self.test_users:
                with db_manager.transaction() as conn:
                    conn.execute("DELETE FROM users WHERE chat_id = ?", (user_id,))
                    conn.execute("DELETE FROM dictionary WHERE chat_id = ?", (user_id,))
                    conn.execute("DELETE FROM learned_words WHERE chat_id = ?", (user_id,))
                    conn.execute("DELETE FROM active_payments WHERE chat_id = ?", (user_id,))
                
                # –û—á–∏—â–∞–µ–º –∫—ç—à–∏
                if user_id in daily_words_cache:
                    del daily_words_cache[user_id]
                if user_id in previous_daily_words:
                    del previous_daily_words[user_id]
            
            print_success("–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –æ—á–∏—â–µ–Ω–∞")
            return True
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print_header("–ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENGLISH LEARNING BOT", Colors.PURPLE)
        
        start_time = datetime.now()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã
        if not self.setup_test_environment():
            print_error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ä–µ–¥—É")
            return False
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        tests = [
            ("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥", self.test_user_creation_and_onboarding),
            ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ–≤ –¥–Ω—è", self.test_words_day_generation),
            ("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–ª–æ–≤–∞—Ä—è", self.test_dictionary_functionality),
            ("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç–µ—Å—Ç–æ–≤", self.test_quiz_functionality),
            ("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è", self.test_settings_and_personalization),
            ("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥", self.test_streak_functionality),
            ("–ü–æ–¥–ø–∏—Å–∫–∞ –∏ —Å–∫–∏–¥–∫–∏", self.test_subscription_and_discounts),
            ("–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏", self.test_subscription_helpers),
            ("–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏", self.test_edge_cases_and_error_handling),
            ("–°—Ü–µ–Ω–∞—Ä–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞", self.test_daily_reset_scenarios),
        ]
        
        self.total_tests = len(tests)
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        for test_name, test_func in tests:
            print_info(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
            try:
                success = test_func()
                if success:
                    print_success(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                else:
                    print_error(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
            except Exception as e:
                print_error(f"üí• {test_name}: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - {e}")
                self.failed_tests += 1
        
        # –û—á–∏—Å—Ç–∫–∞
        self.cleanup_test_environment()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        end_time = datetime.now()
        duration = end_time - start_time
        
        print_header("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø", Colors.PURPLE)
        
        print(f"{Colors.WHITE}–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration.total_seconds():.2f} —Å–µ–∫—É–Ω–¥{Colors.END}")
        print(f"{Colors.WHITE}–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.total_tests}{Colors.END}")
        print(f"{Colors.GREEN}–ü—Ä–æ–π–¥–µ–Ω–æ: {self.passed_tests}{Colors.END}")
        print(f"{Colors.RED}–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.failed_tests}{Colors.END}")
        
        success_rate = (self.passed_tests / self.total_tests) * 100 if self.total_tests > 0 else 0
        print(f"{Colors.WHITE}–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%{Colors.END}")
        
        if self.failed_tests == 0:
            print(f"\n{Colors.GREEN}{Colors.BOLD}üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!{Colors.END}")
            print(f"{Colors.GREEN}–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.{Colors.END}")
        else:
            print(f"\n{Colors.RED}{Colors.BOLD}‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´{Colors.END}")
            print(f"{Colors.RED}–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å {self.failed_tests} –æ—à–∏–±–æ–∫.{Colors.END}")
        
        return self.failed_tests == 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print(f"{Colors.CYAN}{Colors.BOLD}")
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë                    ENGLISH LEARNING BOT - COMPREHENSIVE TEST                ‚ïë")
    print("‚ïë                                                                              ‚ïë")
    print("‚ïë  –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é        ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    print(f"{Colors.END}")
    
    tester = BotTester()
    success = tester.run_all_tests()
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())