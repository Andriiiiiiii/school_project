# handlers.py
import asyncio
import random
import os
import tempfile
import logging
from datetime import datetime

from aiogram import types, Dispatcher, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from gtts import gTTS

import database

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ (—Å—Ç–∞—Ä—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
quiz_data = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–∞ —É—Ä–æ–≤–Ω—è
test_states = {}  # –∫–ª—é—á: chat_id, –∑–Ω–∞—á–µ–Ω–∏–µ: dict —Å –ø–æ–ª—è–º–∏: current_level, words, index, batch_size

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —É—Ä–æ–≤–Ω–µ–π
levels_order = ["A1", "A2", "B1", "B2", "C1", "C2"]

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìñ –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –¥–Ω—è", callback_data="menu:get_word"),
        InlineKeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu:settings"),
        InlineKeyboardButton("üìö –ú–æ–π —Å–ª–æ–≤–∞—Ä—å", callback_data="menu:my_dictionary"),
        InlineKeyboardButton("üìù –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="menu:quiz"),
        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="menu:help"),
        InlineKeyboardButton("üìù –¢–µ—Å—Ç —É—Ä–æ–≤–Ω—è", callback_data="menu:test")
    )
    return keyboard

def register_handlers(dp: Dispatcher, bot: Bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤."""
    # --- –ö–æ–º–∞–Ω–¥–∞ /start ---
    @dp.message_handler(commands=['start'])
    async def cmd_start(message: types.Message):
        chat_id = message.chat.id
        database.add_user(chat_id)
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ English Learning Bot!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=main_menu_keyboard()
        )

    # --- –ö–æ–º–∞–Ω–¥–∞ /help ---
    @dp.message_handler(commands=['help'])
    async def cmd_help(message: types.Message):
        help_text = (
            "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
            "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/help - –ü–æ–º–æ—â—å\n"
            "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "/dictionary - –ú–æ–π —Å–ª–æ–≤–∞—Ä—å\n"
            "/quiz - –í–∏–∫—Ç–æ—Ä–∏–Ω–∞\n"
            "/test - –¢–µ—Å—Ç —É—Ä–æ–≤–Ω—è\n\n"
            "–¢–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
        )
        await message.answer(help_text, reply_markup=main_menu_keyboard())

    # --- –ö–æ–º–∞–Ω–¥–∞ /test (–¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ —É—Ä–æ–≤–Ω—è) ---
    @dp.message_handler(commands=['test'])
    async def cmd_test(message: types.Message):
        chat_id = message.chat.id
        await start_test(chat_id, bot)

    # --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–æ–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫) ---
    @dp.callback_query_handler(lambda c: c.data.startswith("menu:"))
    async def process_main_menu(callback_query: types.CallbackQuery):
        action = callback_query.data.split(":")[1]
        chat_id = callback_query.from_user.id

        if action == "get_word":
            await send_proficiency_word_of_day(chat_id, bot)
        elif action == "settings":
            await send_settings_menu(chat_id, bot)
        elif action == "my_dictionary":
            await send_dictionary(chat_id, bot)
        elif action == "quiz":
            await send_quiz(chat_id, bot)
        elif action == "help":
            await send_help(chat_id, bot)
        elif action == "test":
            await start_test(chat_id, bot)
        await callback_query.answer()

    # --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—Å—Ç–∞—Ä—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª) ---
    @dp.callback_query_handler(lambda c: c.data.startswith("topic:"))
    async def process_topic_selection(callback_query: types.CallbackQuery):
        topic = callback_query.data.split(":")[1]
        chat_id = callback_query.from_user.id
        database.update_user_topic(chat_id, topic)
        await bot.send_message(chat_id, f"–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {topic.capitalize()}.", reply_markup=main_menu_keyboard())
        await callback_query.answer()

    @dp.callback_query_handler(lambda c: c.data == "settime")
    async def process_set_time(callback_query: types.CallbackQuery):
        chat_id = callback_query.from_user.id
        await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞ –¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):")
        await callback_query.answer()

    @dp.message_handler(lambda message: message.text and len(message.text) == 5 and message.text[2] == ':')
    async def process_time_input(message: types.Message):
        chat_id = message.chat.id
        time_str = message.text
        try:
            datetime.strptime(time_str, "%H:%M")
            database.update_user_reminder_time(chat_id, time_str)
            await message.answer(f"–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞ –¥–Ω—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}.", reply_markup=main_menu_keyboard())
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    @dp.callback_query_handler(lambda c: c.data.startswith("pronounce:"))
    async def process_pronounce(callback_query: types.CallbackQuery):
        word = callback_query.data.split(":")[1]
        chat_id = callback_query.from_user.id
        try:
            tts = gTTS(text=word, lang='en')
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tf:
                temp_filename = tf.name
                tts.save(temp_filename)
            with open(temp_filename, 'rb') as audio:
                await bot.send_audio(chat_id, audio, caption=f"–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ: {word}")
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è")
            await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ.")
        finally:
            if os.path.exists(temp_filename):
                os.remove(temp_filename)
        await callback_query.answer()

    @dp.callback_query_handler(lambda c: c.data.startswith("add:"))
    async def process_add_word(callback_query: types.CallbackQuery):
        word = callback_query.data.split(":")[1]
        chat_id = callback_query.from_user.id
        user = database.get_user(chat_id)
        if not user:
            await bot.send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        topic = user[1]
        word_data = next((w for w in database.words_data.get(topic, []) if w['word'] == word), None)
        if word_data is None:
            for t in database.TOPICS:
                word_data = next((w for w in database.words_data.get(t, []) if w['word'] == word), None)
                if word_data:
                    break
        if word_data:
            database.add_word_to_dictionary(chat_id, word_data)
            await bot.send_message(chat_id, "–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å!", reply_markup=main_menu_keyboard())
        else:
            await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª–æ–≤–æ –≤ –±–∞–∑–µ.", reply_markup=main_menu_keyboard())
        await callback_query.answer()

    @dp.callback_query_handler(lambda c: c.data.startswith("example:"))
    async def process_example(callback_query: types.CallbackQuery):
        word = callback_query.data.split(":")[1]
        chat_id = callback_query.from_user.id
        user = database.get_user(chat_id)
        topic = user[1] if user else 'business'
        word_data = next((w for w in database.words_data.get(topic, []) if w['word'] == word), None)
        if word_data:
            await bot.send_message(chat_id, f"–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n{word_data['example']}", reply_markup=main_menu_keyboard())
        else:
            await bot.send_message(chat_id, "–ü—Ä–∏–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu_keyboard())
        await callback_query.answer()

    @dp.callback_query_handler(lambda c: c.data.startswith("quiz:"))
    async def process_quiz_answer(callback_query: types.CallbackQuery):
        chat_id = callback_query.from_user.id
        data = callback_query.data.split(":")[1]
        if chat_id not in quiz_data:
            await bot.send_message(chat_id, "–í–æ–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu_keyboard())
            return
        correct_translation = quiz_data[chat_id]['correct']
        reply_text = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ" if data == "1" else f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_translation}"
        del quiz_data[chat_id]
        try:
            await bot.edit_message_text(reply_text, chat_id=chat_id, message_id=callback_query.message.message_id)
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã")
        await callback_query.answer()

    @dp.message_handler(commands=['quiz'])
    async def cmd_quiz(message: types.Message):
        await send_quiz(message.chat.id, bot)

    @dp.message_handler(commands=['dictionary'])
    async def cmd_dictionary(message: types.Message):
        await send_dictionary(message.chat.id, bot)

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∞ —É—Ä–æ–≤–Ω—è ---
    @dp.callback_query_handler(lambda c: c.data.startswith("test:"))
    async def process_test_answer(callback_query: types.CallbackQuery):
        chat_id = callback_query.from_user.id
        answer = callback_query.data.split(":")[1]  # 'know' –∏–ª–∏ 'donot'
        if chat_id not in test_states:
            await bot.send_message(chat_id, "–¢–µ—Å—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /test –¥–ª—è –Ω–∞—á–∞–ª–∞.", reply_markup=main_menu_keyboard())
            await callback_query.answer()
            return
        state = test_states[chat_id]
        current_level = state['current_level']
        if answer == "donot":
            # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ ‚Äì –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–∞–∫ –∏—Ç–æ–≥
            database.update_user_proficiency(chat_id, current_level)
            await bot.send_message(chat_id, f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {current_level}", reply_markup=main_menu_keyboard())
            del test_states[chat_id]
            await callback_query.answer()
            return
        else:  # answer == "know"
            state['index'] += 1
            if state['index'] >= state['batch_size']:
                # –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –ø–∞–∫–µ—Ç–∞ –æ—Ç–≤–µ—á–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äì –ø–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å (–µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π)
                current_index = levels_order.index(current_level)
                if current_index < len(levels_order) - 1:
                    new_level = levels_order[current_index + 1]
                    state['current_level'] = new_level
                    await bot.send_message(chat_id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ —É—Ä–æ–≤–µ–Ω—å {current_level}. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {new_level}.", reply_markup=main_menu_keyboard())
                    words = load_words_for_level(new_level)
                    state['words'] = words
                    state['index'] = 0
                else:
                    database.update_user_proficiency(chat_id, current_level)
                    await bot.send_message(chat_id, f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {current_level}", reply_markup=main_menu_keyboard())
                    del test_states[chat_id]
                    await callback_query.answer()
                    return
            await send_test_question(chat_id, bot)
            await callback_query.answer()

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ —É—Ä–æ–≤–Ω—è
def load_words_for_level(level: str):
    filename = f"{level}.txt"
    if not os.path.exists(filename):
        return []
    with open(filename, encoding="utf-8") as f:
        words = [line.strip() for line in f if line.strip()]
    # –ï—Å–ª–∏ —Å–ª–æ–≤ –±–æ–ª—å—à–µ 5 ‚Äì –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ 5, –∏–Ω–∞—á–µ –±–µ—Ä—ë–º –≤—Å–µ
    if len(words) > 5:
        return random.sample(words, 5)
    return words

# –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ —É—Ä–æ–≤–Ω—è
async def start_test(chat_id: int, bot: Bot):
    initial_level = "A1"
    words = load_words_for_level(initial_level)
    if not words:
        await bot.send_message(chat_id, f"–§–∞–π–ª {initial_level}.txt –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.", reply_markup=main_menu_keyboard())
        return
    test_states[chat_id] = {
        'current_level': initial_level,
        'words': words,
        'index': 0,
        'batch_size': 5
    }
    await bot.send_message(chat_id, f"–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —É—Ä–æ–≤–Ω—è. –£—Ä–æ–≤–µ–Ω—å: {initial_level}")
    await send_test_question(chat_id, bot)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞ —É—Ä–æ–≤–Ω—è
async def send_test_question(chat_id: int, bot: Bot):
    state = test_states.get(chat_id)
    if not state:
        return
    if state['index'] >= len(state['words']):
        await bot.send_message(chat_id, "–í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=main_menu_keyboard())
        del test_states[chat_id]
        return
    word = state['words'][state['index']]
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ó–Ω–∞—é", callback_data="test:know"),
        InlineKeyboardButton("–ù–µ –∑–Ω–∞—é", callback_data="test:donot")
    )
    await bot.send_message(chat_id, f"–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã —Å–ª–æ–≤–æ: {word}?", reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–æ–≤–∞ –¥–Ω—è —Å —É—á—ë—Ç–æ–º —É—Ä–æ–≤–Ω—è –≤–ª–∞–¥–µ–Ω–∏—è
async def send_proficiency_word_of_day(chat_id: int, bot: Bot):
    proficiency = database.get_user_proficiency(chat_id)
    if not proficiency:
        proficiency = "A1"
    try:
        current_index = levels_order.index(proficiency)
    except ValueError:
        current_index = 0
    next_index = current_index + 1 if current_index < len(levels_order) - 1 else current_index
    next_level = levels_order[next_index]
    words = load_words_for_level(next_level)
    if not words:
        await bot.send_message(chat_id, f"–§–∞–π–ª {next_level}.txt –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.", reply_markup=main_menu_keyboard())
        return
    word = random.choice(words)
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üîä –ü–æ—Å–ª—É—à–∞—Ç—å", callback_data=f"pronounce:{word}"),
        InlineKeyboardButton("üìö –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å", callback_data=f"add:{word}")
    )
    await bot.send_message(chat_id, f"–°–ª–æ–≤–æ –¥–Ω—è (—É—Ä–æ–≤–µ–Ω—å {next_level}): {word}", reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def send_settings_menu(chat_id: int, bot: Bot):
    keyboard = InlineKeyboardMarkup(row_width=2)
    topic_buttons = [InlineKeyboardButton(text=t.capitalize(), callback_data=f"topic:{t}") for t in database.TOPICS]
    keyboard.add(*topic_buttons)
    keyboard.add(InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="settime"))
    keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="menu:help"))
    await bot.send_message(chat_id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
async def send_dictionary(chat_id: int, bot: Bot):
    words = database.get_user_dictionary(chat_id)
    if not words:
        await bot.send_message(chat_id, "–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç.", reply_markup=main_menu_keyboard())
    else:
        text = "–í–∞—à –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å:\n\n"
        for word, translation, transcription, example in words:
            text += (f"–°–ª–æ–≤–æ: {word}\n"
                     f"–ü–µ—Ä–µ–≤–æ–¥: {translation}\n"
                     f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {transcription}\n"
                     f"–ü—Ä–∏–º–µ—Ä: {example}\n\n")
        await bot.send_message(chat_id, text, reply_markup=main_menu_keyboard())

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (—Å—Ç–∞—Ä—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
async def send_quiz(chat_id: int, bot: Bot):
    question = generate_quiz_question(chat_id)
    if question is None:
        await bot.send_message(chat_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!", reply_markup=main_menu_keyboard())
    else:
        question_text, keyboard = question
        await bot.send_message(chat_id, question_text, reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–º–æ—â–∏ –∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
async def send_help(chat_id: int, bot: Bot):
    help_text = (
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–º–æ—â—å\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/dictionary - –ú–æ–π —Å–ª–æ–≤–∞—Ä—å\n"
        "/quiz - –í–∏–∫—Ç–æ—Ä–∏–Ω–∞\n"
        "/test - –¢–µ—Å—Ç —É—Ä–æ–≤–Ω—è\n\n"
        "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: @YourSupportUsername"
    )
    await bot.send_message(chat_id, help_text, reply_markup=main_menu_keyboard())

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (—Å—Ç–∞—Ä—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
def generate_quiz_question(chat_id: int):
    user = database.get_user(chat_id)
    if not user:
        return None
    topic = user[1]
    word_index = user[2]
    word_list = database.words_data.get(topic, [])
    if not word_list:
        return None
    candidate_pool = word_list[:word_index] if word_index > 0 else word_list
    if not candidate_pool:
        candidate_pool = word_list
    correct_word = random.choice(candidate_pool)
    correct_translation = correct_word['translation']
    options = [correct_translation]
    distractors = [w['translation'] for w in candidate_pool if w['translation'] != correct_translation]
    if len(distractors) < 3:
        distractors += [w['translation'] for w in word_list if w['translation'] not in options + distractors]
    distractors = list(set(distractors))
    random.shuffle(distractors)
    options += distractors[:3]
    random.shuffle(options)
    keyboard = InlineKeyboardMarkup(row_width=2)
    for opt in options:
        correct_flag = "1" if opt == correct_translation else "0"
        button = InlineKeyboardButton(text=opt, callback_data=f"quiz:{correct_flag}")
        keyboard.insert(button)
    quiz_data[chat_id] = {
        'word': correct_word['word'],
        'correct': correct_translation
    }
    question_text = (
        f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ ¬´{correct_word['word']}¬ª?\n"
        f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {correct_word['transcription']}\n"
        f"–ü—Ä–∏–º–µ—Ä: {correct_word['example']}"
    )
    return question_text, keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏ —Å–ª–æ–≤–∞ –¥–Ω—è (—Å—Ç–∞—Ä—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
async def check_and_send_daily_words(bot: Bot):
    now = datetime.now().strftime("%H:%M")
    cur = database.conn.cursor()
    cur.execute("SELECT chat_id, topic, word_index, reminder_time FROM users")
    users = cur.fetchall()
    for chat_id, topic, word_index, reminder_time in users:
        if now == reminder_time:
            word_list = database.words_data.get(topic, [])
            if not word_list:
                continue
            if word_index >= len(word_list):
                word_index = 0
            word_item = word_list[word_index]
            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                InlineKeyboardButton("üîä –ü–æ—Å–ª—É—à–∞—Ç—å", callback_data=f"pronounce:{word_item['word']}"),
                InlineKeyboardButton("üìñ –ü—Ä–∏–º–µ—Ä—ã", callback_data=f"example:{word_item['word']}"),
                InlineKeyboardButton("üìö –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å", callback_data=f"add:{word_item['word']}")
            )
            text = (
                f"–°–ª–æ–≤–æ –¥–Ω—è:\n\n"
                f"–°–ª–æ–≤–æ: {word_item['word']}\n"
                f"–ü–µ—Ä–µ–≤–æ–¥: {word_item['translation']}\n"
                f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {word_item['transcription']}\n"
                f"–ü—Ä–∏–º–µ—Ä: {word_item['example']}"
            )
            try:
                await bot.send_message(chat_id, text, reply_markup=keyboard)
                database.update_user_word_index(chat_id, word_index + 1)
            except Exception as e:
                logging.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
