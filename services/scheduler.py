# services/scheduler.py
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import asyncio
import logging
from aiogram import Bot
from zoneinfo import ZoneInfo
from database import crud
from utils.helpers import get_daily_words_for_user, daily_words_manager, previous_daily_words_manager, reset_daily_words_cache
from config import REMINDER_START, DURATION_HOURS, SERVER_TIMEZONE, DAILY_RESET_TIME

logger = logging.getLogger(__name__)
FIRST_TIME = REMINDER_START

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –±—ã–ª–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∫–≤–∏–∑—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
quiz_reminder_sent = {}

def scheduler_job(bot: Bot, loop: asyncio.AbstractEventLoop):
    """
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π
        try:
            now_server = datetime.now(tz=ZoneInfo(SERVER_TIMEZONE))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã {SERVER_TIMEZONE}: {e}")
            now_server = datetime.now(tz=ZoneInfo("UTC"))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        try:
            users = crud.get_all_users()
        except Exception as e:
            logger.error(f"Error getting users from database: {e}")
            users = []
            
        for user in users:
            try:
                process_user(user, now_server, bot, loop)
            except Exception as e:
                logger.error(f"Error processing user {user[0] if user else 'unknown'}: {e}")
                continue
    except Exception as e:
        logger.error(f"Unhandled error in scheduler_job: {e}")

def process_user(user, now_server, bot, loop):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ.
    –í—ã–Ω–µ—Å–µ–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ª—É—á—à–µ–π –∏–∑–æ–ª—è—Ü–∏–∏ –æ—à–∏–±–æ–∫.
    """
    chat_id = user[0]
    level = user[1]
    words_count = user[2]
    repetitions = user[3]
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    user_tz = user[5] if len(user) > 5 and user[5] else "Europe/Moscow"
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        ZoneInfo(user_tz)
        now_local = now_server.astimezone(ZoneInfo(user_tz))
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å {user_tz} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        user_tz = "Europe/Moscow"
        try:
            now_local = now_server.astimezone(ZoneInfo(user_tz))
            # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            crud.update_user_timezone(chat_id, user_tz)
        except Exception as e2:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º: {e2}")
            now_local = now_server  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –∫–∞–∫ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π
    
    now_local_str = now_local.strftime("%H:%M")
    local_today_str = now_local.strftime("%Y-%m-%d")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
    try:
        local_base_obj = datetime.strptime(f"{local_today_str} {FIRST_TIME}", "%Y-%m-%d %H:%M").replace(tzinfo=ZoneInfo(user_tz))
        local_end_obj = local_base_obj + timedelta(hours=DURATION_HOURS)
        end_time_str = local_end_obj.strftime("%H:%M")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–Ω—è (—ç—Ç–æ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
    try:
        result = get_daily_words_for_user(chat_id, level, words_count, repetitions,
                                         first_time=FIRST_TIME, duration_hours=DURATION_HOURS)
        if result is None:
            return
        messages, times = result

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ã—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        if now_local_str in times:
            notif_index = times.index(now_local_str)
            message_text = messages[notif_index] if notif_index < len(messages) else ""
            try:
                asyncio.run_coroutine_threadsafe(
                    bot.send_message(chat_id, f"üìå –°–ª–æ–≤–∞ –¥–Ω—è:\n{message_text}"),
                    loop
                )
            except Exception as e:
                logger.error(f"Error sending notification to user {chat_id}: {e}")
        
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–≤–Ω–æ –∫–æ–Ω—Ü—É –ø–µ—Ä–∏–æ–¥–∞ (FIRST_TIME + DURATION_HOURS)
        if now_local_str == end_time_str:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–µ–≥–æ–¥–Ω—è
            if quiz_reminder_sent.get(chat_id) != local_today_str:
                try:
                    asyncio.run_coroutine_threadsafe(
                        bot.send_message(chat_id, "–ü—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑ —á—Ç–æ–±—ã —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–∏–ª–∏—Å—å –≤ –ú–æ–π —Å–ª–æ–≤–∞—Ä—å"),
                        loop
                    )
                    quiz_reminder_sent[chat_id] = local_today_str
                except Exception as e:
                    logger.error(f"Error sending quiz reminder to user {chat_id}: {e}")

        # –ü—Ä–∏ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ DAILY_RESET_TIME —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤
        if now_local.strftime("%H:%M") == DAILY_RESET_TIME:
            try:
                if chat_id in daily_words_cache:
                    entry = daily_words_cache[chat_id]
                    unique_words = entry[8]  # —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
                    # –§–∏–ª—å—Ç—Ä—É–µ–º, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –≤ "–ú–æ–µ–º —Å–ª–æ–≤–∞—Ä–µ"
                    learned_raw = crud.get_learned_words(chat_id)
                    learned_set = set(item[0] for item in learned_raw)
                    filtered_unique = [w for w in unique_words if w not in learned_set]
                    previous_daily_words[chat_id] = filtered_unique
                    reset_daily_words_cache(chat_id)
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è
                if chat_id in quiz_reminder_sent:
                    del quiz_reminder_sent[chat_id]
            except Exception as e:
                logger.error(f"Error processing daily reset for user {chat_id}: {e}")
    except Exception as e:
        logger.error(f"Error processing daily words for user {chat_id}: {e}")

        
def start_scheduler(bot: Bot, loop: asyncio.AbstractEventLoop):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç APScheduler, –∫–æ—Ç–æ—Ä—ã–π –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ –≤—ã–∑—ã–≤–∞–µ—Ç scheduler_job.
    """
    scheduler = AsyncIOScheduler()
    scheduler.add_job(scheduler_job, 'interval', minutes=1, args=[bot, loop])
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ (–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)
    scheduler.add_job(lambda: daily_words_manager.clean_expired(), 'interval', hours=6)
    scheduler.add_job(lambda: previous_daily_words_manager.clean_expired(), 'interval', hours=6)
    scheduler.start()
    return scheduler