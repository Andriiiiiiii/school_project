#scheduler.py
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import asyncio
from math import ceil
from database import crud
from utils.helpers import load_words_for_level
from aiogram import Bot

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
FIRST_TIME = "02:19"      # FT: –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
DURATION_HOURS = 1        # DT: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

def compute_notification_times(Y):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ Y –≤—Ä–µ–º—ë–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    –ü–æ —Ñ–æ—Ä–º—É–ª–µ: T‚Çô = FT + (n-1) ¬∑ (DT / Y)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM".
    """
    base = datetime.strptime(FIRST_TIME, "%H:%M")
    interval = timedelta(hours=DURATION_HOURS / Y)
    times = []
    for n in range(Y):
        t = base + n * interval
        formatted_time = t.strftime("%H:%M")
        times.append(formatted_time)
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω
    print("–í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", times)
    return times

def distribute_word_messages_cyclic(words_list, Y):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ words_list –¥–ª–∏–Ω–æ–π T = 3*X (–∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–æ 3 —Ä–∞–∑–∞)
    –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç N = ceil(T / Y) ‚Äì —á–∏—Å–ª–æ —Å–ª–æ–≤ –≤ –∫–∞–∂–¥–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏.
    –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∏–Ω–¥–µ–∫—Å–æ–º i (0-based) –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª–æ–≤–∞:
         words_list[(i*N + j) mod T],  j = 0..N-1.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ Y —Å—Ç—Ä–æ–∫, –≥–¥–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äì —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    T = len(words_list)
    N = ceil(T / Y)
    messages = []
    for i in range(Y):
        msg_words = [words_list[(i * N + j) % T] for j in range(N)]
        messages.append("\n".join(f"üîπ {word}" for word in msg_words))
    return messages

def compute_notification_message_for_user(user):
    """
    –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (user ‚Äì –∫–æ—Ä—Ç–µ–∂: chat_id, level, words_per_day, notifications, reminder_time)
    –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–≤—ã–µ X —Å–ª–æ–≤ –¥–ª—è –µ–≥–æ —É—Ä–æ–≤–Ω—è, –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –∏—Ö 3 —Ä–∞–∑–∞ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ –ø–æ Y —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (messages, times), –≥–¥–µ:
      - messages: —Å–ø–∏—Å–æ–∫ –∏–∑ Y —Å–æ–æ–±—â–µ–Ω–∏–π,
      - times: —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (Y –∑–Ω–∞—á–µ–Ω–∏–π).
    """
    _, level, words_per_day, notifications, _ = user
    X = words_per_day
    Y = notifications
    words = load_words_for_level(level)
    if not words:
        return None
    selected_words = words[:X]
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ 3 —Ä–∞–∑–∞
    words_repeated = selected_words * 3
    messages = distribute_word_messages_cyclic(words_repeated, Y)
    times = compute_notification_times(Y)
    return messages, times

def scheduler_job(bot: Bot):
    now_str = datetime.now().strftime("%H:%M")
    base_obj = datetime.strptime(FIRST_TIME, "%H:%M")
    end_obj = base_obj + timedelta(hours=DURATION_HOURS)
    now_obj = datetime.strptime(now_str, "%H:%M")

    print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –ó–∞–ø—É—Å–∫ scheduler_job")
    print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now_str}, –ø–µ—Ä–∏–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏: {base_obj.strftime('%H:%M')} - {end_obj.strftime('%H:%M')}")

    if base_obj <= now_obj <= end_obj:
        users = crud.get_all_users()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user in users:
            result = compute_notification_message_for_user(user)
            if result is None:
                continue
            messages, times = result
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[0]} | –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {times}")
            if now_str in times:
                notif_index = times.index(now_str)
                message_text = messages[notif_index] if notif_index < len(messages) else ""
                chat_id = user[0]
                print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} –≤ {now_str}: {message_text}")
                asyncio.create_task(bot.send_message(chat_id, f"üìå –°–ª–æ–≤–∞ –¥–Ω—è:\n{message_text}"))
    else:
        print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è {now_str} –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

    if now_str == end_obj.strftime("%H:%M"):
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã)
        pass

def start_scheduler(bot: Bot):
    scheduler = AsyncIOScheduler()
    scheduler.add_job(scheduler_job, 'interval', minutes=1, args=[bot])
    scheduler.start()
    return scheduler

