from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import asyncio
from math import ceil
from database import crud
from utils.helpers import load_words_for_level
from aiogram import Bot

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: —Å 10:00 –¥–æ 20:00
FIRST_TIME = "10:00"        # –ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
DURATION_HOURS = 10         # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

def compute_notification_times(Y):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ Y –≤—Ä–µ–º–µ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –Ω–∞—á–∏–Ω–∞—è —Å FIRST_TIME –∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—è
    –∏–Ω—Ç–µ—Ä–≤–∞–ª DURATION_HOURS –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.
    """
    base = datetime.strptime(FIRST_TIME, "%H:%M")
    interval = timedelta(hours=DURATION_HOURS / Y)
    times = [(base + n * interval).strftime("%H:%M") for n in range(Y)]
    return times

def distribute_word_messages_cyclic(words_list, Y):
    """
    –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –ø–æ Y —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º.
    """
    T = len(words_list)
    N = ceil(T / Y)
    messages = []
    for i in range(Y):
        msg_words = [words_list[(i * N + j) % T] for j in range(N)]
        messages.append("\n".join(f"üîπ {word}" for word in msg_words))
    return messages

def compute_notification_message_for_user(user):
    """
    –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î) –≤—ã—á–∏—Å–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:
      - –ë–µ—Ä—ë—Ç —É—Ä–æ–≤–µ–Ω—å, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ (X) –∏ —á–∏—Å–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (Y),
      - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–≤—ã–µ X —Å–ª–æ–≤ –¥–ª—è —É—Ä–æ–≤–Ω—è,
      - –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –∏—Ö 3 —Ä–∞–∑–∞,
      - –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–æ–≤–∞ –ø–æ Y —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º,
      - –í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (messages, times) –∏–ª–∏ None, –µ—Å–ª–∏ —Å–ª–æ–≤ –Ω–µ—Ç.
    """
    _, level, words_per_day, notifications, _ = user
    X = words_per_day
    Y = notifications
    words = load_words_for_level(level)
    if not words:
        return None
    selected_words = words[:X]
    words_repeated = selected_words * 3
    messages = distribute_word_messages_cyclic(words_repeated, Y)
    times = compute_notification_times(Y)
    return messages, times

def scheduler_job(bot: Bot, loop: asyncio.AbstractEventLoop):
    """
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º:
      - –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤—Ö–æ–¥–∏—Ç –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π,
        –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
      - –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
    """
    now_str = datetime.now().strftime("%H:%M")
    base_obj = datetime.strptime(FIRST_TIME, "%H:%M")
    end_obj = base_obj + timedelta(hours=DURATION_HOURS)
    now_obj = datetime.strptime(now_str, "%H:%M")

    if base_obj <= now_obj <= end_obj:
        users = crud.get_all_users()
        for user in users:
            result = compute_notification_message_for_user(user)
            if result is None:
                continue
            messages, times = result
            if now_str in times:
                notif_index = times.index(now_str)
                message_text = messages[notif_index] if notif_index < len(messages) else ""
                chat_id = user[0]
                asyncio.run_coroutine_threadsafe(
                    bot.send_message(chat_id, f"üìå –°–ª–æ–≤–∞ –¥–Ω—è:\n{message_text}"),
                    loop
                )

    if now_str == end_obj.strftime("%H:%M"):
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã)
        pass

def start_scheduler(bot: Bot, loop: asyncio.AbstractEventLoop):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ APScheduler, –∫–æ—Ç–æ—Ä—ã–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤—ã–∑—ã–≤–∞–µ—Ç scheduler_job.
    –ü–∞—Ä–∞–º–µ—Ç—Ä loop ‚Äì —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π event loop –±–æ—Ç–∞.
    """
    scheduler = AsyncIOScheduler()
    scheduler.add_job(scheduler_job, 'interval', minutes=1, args=[bot, loop])
    scheduler.start()
    return scheduler
