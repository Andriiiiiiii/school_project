# simulate_real_usage.py
"""
–°–ò–ú–£–õ–Ø–¶–ò–Ø –†–ï–ê–õ–¨–ù–û–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê –î–ù–ï–ô –ü–û–î–†–Ø–î
–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–Ω–µ–π
"""

import sys
import os
import asyncio
from datetime import datetime, timedelta
from dotenv import load_dotenv

load_dotenv()
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

class UserSimulator:
    """–°–∏–º—É–ª—è—Ç–æ—Ä –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    
    def __init__(self, user_id, name, is_premium=False):
        self.user_id = user_id
        self.name = name
        self.is_premium = is_premium
        self.daily_activity = []
    
    def log_activity(self, day, activity, result):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        self.daily_activity.append({
            'day': day,
            'activity': activity,
            'result': result
        })

async def simulate_real_usage():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ streak —Å–∏—Å—Ç–µ–º—ã."""
    print("üé≠ –°–ò–ú–£–õ–Ø–¶–ò–Ø –†–ï–ê–õ–¨–ù–û–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø STREAK –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    try:
        from database import crud
        from services.payment import PaymentService
        from database.db import db_manager
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ç–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = [
            UserSimulator(800001, "–ê–ª–µ–∫—Å–µ–π (–Ω–æ–≤–∏—á–æ–∫)", is_premium=False),
            UserSimulator(800002, "–ú–∞—Ä–∏—è (–∞–∫—Ç–∏–≤–Ω–∞—è)", is_premium=True),
            UserSimulator(800003, "–ü–µ—Ç—Ä (–Ω–µ–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π)", is_premium=False),
            UserSimulator(800004, "–ê–Ω–Ω–∞ (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è)", is_premium=True),
        ]
        
        print("üë• –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
        for user in users:
            status = "Premium" if user.is_premium else "Free"
            print(f"   ‚Ä¢ {user.name} (ID: {user.user_id}, {status})")
        
        # –û—á–∏—Å—Ç–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        with db_manager.transaction() as tx:
            for user in users:
                tx.execute("DELETE FROM users WHERE chat_id = ?", (user.user_id,))
                tx.execute("DELETE FROM dictionary WHERE chat_id = ?", (user.user_id,))
                tx.execute("DELETE FROM learned_words WHERE chat_id = ?", (user.user_id,))
                tx.execute("DELETE FROM active_payments WHERE chat_id = ?", (user.user_id,))
        
        for user in users:
            crud.add_user(user.user_id)
            if user.is_premium:
                future_date = (datetime.now() + timedelta(days=30)).isoformat()
                crud.update_user_subscription(user.user_id, "premium", future_date, f"test_{user.user_id}")
        
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –°–∏–º—É–ª—è—Ü–∏—è 14 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        print("\nüìÖ –°–ò–ú–£–õ–Ø–¶–ò–Ø 14 –î–ù–ï–ô –ê–ö–¢–ò–í–ù–û–°–¢–ò")
        print("-" * 40)
        
        base_date = datetime.now() - timedelta(days=13)  # –ù–∞—á–∏–Ω–∞–µ–º —Å 14 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        activity_patterns = {
            800001: [1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1],  # –ù–æ–≤–∏—á–æ–∫: –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ
            800002: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  # –ê–∫—Ç–∏–≤–Ω–∞—è: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
            800003: [1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1],  # –ù–µ–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π: —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏
            800004: [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1],  # –°—Ç–∞–±–∏–ª—å–Ω–∞—è: –ø–æ—á—Ç–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        }
        
        for day in range(14):
            current_date = base_date + timedelta(days=day)
            date_str = current_date.strftime("%Y-%m-%d")
            day_name = current_date.strftime("%A")
            
            print(f"\nüìÜ –î–µ–Ω—å {day + 1} ({day_name}, {date_str})")
            
            for user in users:
                is_active = activity_patterns[user.user_id][day]
                
                if is_active:
                    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∫–∞–∫ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞
                    if day == 0:
                        # –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å - –Ω–∞—á–∏–Ω–∞–µ–º —Å streak = 1
                        new_streak = 1
                        crud.update_user_streak(user.user_id, 1, date_str)
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
                        prev_date = (current_date - timedelta(days=1)).strftime("%Y-%m-%d")
                        current_streak, last_test_date = crud.get_user_streak(user.user_id)
                        
                        if last_test_date == prev_date:
                            # –ë—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –≤—á–µ—Ä–∞ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º streak
                            new_streak = current_streak + 1
                        elif last_test_date is None or last_test_date < prev_date:
                            # –ë—ã–ª –ø—Ä–æ–ø—É—Å–∫ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
                            new_streak = 1
                        else:
                            # –ß—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ - –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
                            new_streak = 1
                        
                        crud.update_user_streak(user.user_id, new_streak, date_str)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    user.log_activity(day + 1, "test_completed", f"streak: {new_streak}")
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É –µ—Å–ª–∏ –ø—Ä–µ–º–∏—É–º
                    if user.is_premium:
                        discount = crud.calculate_streak_discount(user.user_id)
                        print(f"   üéØ {user.name}: –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! Streak: {new_streak}, –°–∫–∏–¥–∫–∞: {discount}%")
                    else:
                        print(f"   üìù {user.name}: –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! Streak: {new_streak}")
                    
                else:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
                    user.log_activity(day + 1, "inactive", "no_test")
                    current_streak, _ = crud.get_user_streak(user.user_id)
                    print(f"   üò¥ {user.name}: –ù–µ–∞–∫—Ç–∏–≤–µ–Ω (—Ç–µ–∫—É—â–∏–π streak: {current_streak})")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "=" * 60)
        print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –°–ò–ú–£–õ–Ø–¶–ò–ò")
        print("=" * 60)
        
        for user in users:
            current_streak, last_test_date = crud.get_user_streak(user.user_id)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            total_active_days = sum(1 for activity in user.daily_activity if activity['activity'] == 'test_completed')
            activity_rate = (total_active_days / 14) * 100
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π streak
            max_streak = 0
            current_temp_streak = 0
            for activity in user.daily_activity:
                if activity['activity'] == 'test_completed':
                    current_temp_streak += 1
                    max_streak = max(max_streak, current_temp_streak)
                else:
                    current_temp_streak = 0
            
            print(f"\nüë§ {user.name}:")
            print(f"   üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {total_active_days}/14 –¥–Ω–µ–π ({activity_rate:.1f}%)")
            print(f"   üî• –¢–µ–∫—É—â–∏–π streak: {current_streak} –¥–Ω–µ–π")
            print(f"   üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π streak: {max_streak} –¥–Ω–µ–π")
            print(f"   üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç: {last_test_date or '–Ω–∏–∫–æ–≥–¥–∞'}")
            
            if user.is_premium:
                discount = crud.calculate_streak_discount(user.user_id)
                price_info = PaymentService.calculate_discounted_price(user.user_id, 1)
                print(f"   üí∞ –¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞: {discount}% (—Ü–µ–Ω–∞: {price_info['final_price']:.0f}‚ÇΩ)")
            else:
                print(f"   üí∞ –°–∫–∏–¥–∫–∞: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (Free –∞–∫–∫–∞—É–Ω—Ç)")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É —Å–æ —Å–∫–∏–¥–∫–æ–π
        print(f"\nüí≥ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ö–£–ü–û–ö –°–û –°–ö–ò–î–ö–û–ô")
        print("-" * 40)
        
        premium_users = [user for user in users if user.is_premium]
        for user in premium_users:
            current_streak, _ = crud.get_user_streak(user.user_id)
            if current_streak > 0:
                for months in [1, 3, 12]:
                    price_info = PaymentService.calculate_discounted_price(user.user_id, months)
                    
                    period_name = {1: "1 –º–µ—Å—è—Ü", 3: "3 –º–µ—Å—è—Ü–∞", 12: "12 –º–µ—Å—è—Ü–µ–≤"}[months]
                    
                    if price_info['has_discount']:
                        print(f"   {user.name} - {period_name}:")
                        print(f"      –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {price_info['base_price']:.0f}‚ÇΩ")
                        print(f"      –°–∫–∏–¥–∫–∞: {price_info['discount_percent']}% (-{price_info['discount_amount']:.0f}‚ÇΩ)")
                        print(f"      –ö –æ–ø–ª–∞—Ç–µ: {price_info['final_price']:.0f}‚ÇΩ")
                        print()
        
        # –°–∏–º—É–ª—è—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ (–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫)
        print(f"üïê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –°–ë–†–û–°–ê")
        print("-" * 40)
        
        from services.scheduler import process_daily_reset
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–±—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –≤—á–µ—Ä–∞
        inactive_yesterday_user = users[2]  # –ü–µ—Ç—Ä (–Ω–µ–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –ø–æ–∑–∞–≤—á–µ—Ä–∞
        day_before_yesterday = (datetime.now() - timedelta(days=2)).strftime("%Y-%m-%d")
        crud.update_user_streak(inactive_yesterday_user.user_id, 8, day_before_yesterday)
        
        print(f"   {inactive_yesterday_user.name}: streak = 8, –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç = {day_before_yesterday}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å
        process_daily_reset(inactive_yesterday_user.user_id)
        
        reset_streak, _ = crud.get_user_streak(inactive_yesterday_user.user_id)
        print(f"   –ü–æ—Å–ª–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞: streak = {reset_streak}")
        
        expected = 0  # –î–æ–ª–∂–µ–Ω —Å–±—Ä–æ—Å–∏—Ç—å—Å—è
        if reset_streak == expected:
            print(f"   ‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª—Å—è streak = {expected}, –ø–æ–ª—É—á–µ–Ω = {reset_streak}")
        
        # –û—á–∏—Å—Ç–∫–∞
        print(f"\nüßπ –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
        print("-" * 40)
        
        with db_manager.transaction() as tx:
            for user in users:
                tx.execute("DELETE FROM users WHERE chat_id = ?", (user.user_id,))
                tx.execute("DELETE FROM dictionary WHERE chat_id = ?", (user.user_id,))
                tx.execute("DELETE FROM learned_words WHERE chat_id = ?", (user.user_id,))
                tx.execute("DELETE FROM active_payments WHERE chat_id = ?", (user.user_id,))
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        print("üéâ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        
        print("‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:")
        print("   ‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("   ‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ streak –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω—è—Ö") 
        print("   ‚Ä¢ –°–±—Ä–æ—Å streak –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–∞—Ö")
        print("   ‚Ä¢ –†–∞—Å—á–µ—Ç —Å–∫–∏–¥–æ–∫ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–ª–∞—Ç–µ–∂–µ–π")
        print("   ‚Ä¢ –†–∞–±–æ—Ç–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        
        print("\nüí° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –°–ò–ú–£–õ–Ø–¶–ò–ò: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(simulate_real_usage())
    
    if success:
        print("\nüöÄ –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    else:
        print("\nüí• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏–º—É–ª—è—Ü–∏–∏")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
    
    sys.exit(0 if success else 1)