# utils/subscription_helpers.py
import logging
from datetime import datetime
from pathlib import Path
from typing import List

from config import LEVELS_DIR, FREE_SETS
from database import crud

logger = logging.getLogger(__name__)

def get_available_sets_for_user(chat_id: int, level: str) -> List[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏.
    
    Args:
        chat_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        level: –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (A1, A2, B1, B2, C1, C2)
        
    Returns:
        –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤
    """
    try:
        level_dir = Path(LEVELS_DIR) / level
        if not level_dir.exists():
            logger.warning(f"Level directory {level_dir} does not exist")
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–±–æ—Ä—ã –¥–ª—è —É—Ä–æ–≤–Ω—è
        all_sets = [f.stem for f in level_dir.glob("*.txt")]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        is_premium = crud.is_user_premium(chat_id)
        
        if is_premium:
            # –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –Ω–∞–±–æ—Ä–∞–º
            logger.debug(f"Premium user {chat_id} has access to all {len(all_sets)} sets for level {level}")
            return sorted(all_sets)
        else:
            # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –±–∞–∑–æ–≤—ã–º –Ω–∞–±–æ—Ä–∞–º
            free_sets = FREE_SETS.get(level, [])
            available_sets = [s for s in all_sets if s in free_sets]
            logger.debug(f"Free user {chat_id} has access to {len(available_sets)} free sets for level {level}")
            return sorted(available_sets)
            
    except Exception as e:
        logger.error(f"Error getting available sets for user {chat_id}, level {level}: {e}")
        return []

def is_set_available_for_user(chat_id: int, set_name: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        chat_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        set_name: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞
        
    Returns:
        True –µ—Å–ª–∏ –Ω–∞–±–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–±–æ—Ä–∞
        level = None
        for lvl in ["A1", "A2", "B1", "B2", "C1", "C2"]:
            if set_name.startswith(lvl):
                level = lvl
                break
                
        if not level:
            logger.warning(f"Could not determine level for set {set_name}")
            return False
            
        available_sets = get_available_sets_for_user(chat_id, level)
        is_available = set_name in available_sets
        
        logger.debug(f"Set {set_name} is {'available' if is_available else 'not available'} for user {chat_id}")
        return is_available
        
    except Exception as e:
        logger.error(f"Error checking set availability for user {chat_id}, set {set_name}: {e}")
        return False

def get_premium_sets_for_level(level: str) -> List[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º –Ω–∞–±–æ—Ä–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.
    
    Args:
        level: –£—Ä–æ–≤–µ–Ω—å (A1, A2, B1, B2, C1, C2)
        
    Returns:
        –°–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º –Ω–∞–±–æ—Ä–æ–≤
    """
    try:
        level_dir = Path(LEVELS_DIR) / level
        if not level_dir.exists():
            return []
            
        all_sets = [f.stem for f in level_dir.glob("*.txt")]
        free_sets = FREE_SETS.get(level, [])
        premium_sets = [s for s in all_sets if s not in free_sets]
        
        logger.debug(f"Found {len(premium_sets)} premium sets for level {level}")
        return sorted(premium_sets)
        
    except Exception as e:
        logger.error(f"Error getting premium sets for level {level}: {e}")
        return []

def check_subscription_expiry(chat_id: int) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π.
    
    Args:
        chat_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
    """
    try:
        status, expires_at, payment_id = crud.get_user_subscription_status(chat_id)
        
        result = {
            "status": status,
            "is_premium": False,
            "expires_at": expires_at,
            "payment_id": payment_id,
            "days_left": 0,
            "expired": False
        }
        
        if status == 'premium' and expires_at:
            try:
                expiry_date = datetime.fromisoformat(expires_at)
                now = datetime.now()
                
                if now < expiry_date:
                    result["is_premium"] = True
                    result["days_left"] = (expiry_date - now).days
                else:
                    result["expired"] = True
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
                    crud.update_user_subscription(chat_id, 'expired')
                    
            except ValueError as e:
                logger.error(f"Invalid expiry date format for user {chat_id}: {e}")
                
        return result
        
    except Exception as e:
        logger.error(f"Error checking subscription expiry for user {chat_id}: {e}")
        return {"status": "free", "is_premium": False, "expires_at": None, "payment_id": None, "days_left": 0, "expired": False}

def format_subscription_status(chat_id: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        chat_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–¥–ø–∏—Å–∫–∏
    """
    try:
        info = check_subscription_expiry(chat_id)
        
        if info["is_premium"]:
            days_left = info["days_left"]
            if days_left > 7:
                return f"üíé *Premium –∞–∫—Ç–∏–≤–µ–Ω*\n–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}"
            elif days_left > 0:
                return f"‚ö†Ô∏è *Premium –∏—Å—Ç–µ–∫–∞–µ—Ç*\n–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}"
            else:
                return f"‚ö†Ô∏è *Premium –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è*"
        elif info["expired"]:
            return "‚ùå *Premium –∏—Å—Ç–µ–∫*\n–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º –Ω–∞–±–æ—Ä–∞–º"
        else:
            return "üÜì *–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç*\n–î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã"
            
    except Exception as e:
        logger.error(f"Error formatting subscription status for user {chat_id}: {e}")
        return "‚ùì *–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω*"