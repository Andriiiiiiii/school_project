# utils/helpers.py

import os
import random
import logging
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from config import LEVELS_DIR, REMINDER_START, DURATION_HOURS, DEFAULT_SETS, PRODUCTION_MODE
from database import crud
from utils.visual_helpers import extract_english

logger = logging.getLogger(__name__)

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—ç—à–∏
daily_words_cache = {}
previous_daily_words = {}

# –ö—ç—à —Ñ–∞–π–ª–æ–≤ —Å–æ —Å–ª–æ–≤–∞–º–∏ (–Ω–æ–≤—ã–π –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
_words_file_cache = {}
_cache_max_age = 3600  # 1 —á–∞—Å

def get_user_settings(chat_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)."""
    try:
        user = crud.get_user(chat_id)
        if user:
            return (user[2], user[3])  # words_per_day, repetitions_per_word
        return (5, 3)  # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", chat_id, e)
        return (5, 3)

def reset_daily_words_cache(chat_id):
    """–°–±—Ä–æ—Å –∫—ç—à–∞ —Å–ª–æ–≤ –¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        if chat_id in daily_words_cache:
            del daily_words_cache[chat_id]
            if not PRODUCTION_MODE:
                logger.info("–ö—ç—à —Å–ª–æ–≤ –¥–Ω—è —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", chat_id)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫—ç—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", chat_id, e)

def load_words_for_set(level: str, chosen_set: str):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞.
    """
    if not level or not chosen_set:
        return []
        
    cache_key = f"{level}_{chosen_set}"
    current_time = datetime.now().timestamp()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Ñ–∞–π–ª–æ–≤
    if cache_key in _words_file_cache:
        cached_data, cache_time = _words_file_cache[cache_key]
        if current_time - cache_time < _cache_max_age:
            return cached_data
    
    filename = os.path.join(LEVELS_DIR, level, f"{chosen_set}.txt")
    words = []
    
    try:
        if not os.path.exists(filename):
            if not PRODUCTION_MODE:
                logger.warning("–§–∞–π–ª –Ω–∞–±–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", filename)
            return words
            
        # –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        for encoding in ("utf-8", "cp1251"):
            try:
                with open(filename, encoding=encoding) as f:
                    words = [line.strip() for line in f if line.strip()]
                break
            except UnicodeDecodeError:
                continue
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        _words_file_cache[cache_key] = (words, current_time)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
        if len(_words_file_cache) > 50:
            oldest_key = min(_words_file_cache.keys(), 
                           key=lambda k: _words_file_cache[k][1])
            del _words_file_cache[oldest_key]
        
        if not PRODUCTION_MODE:
            logger.debug("–ó–∞–≥—Ä—É–∂–µ–Ω–æ %d —Å–ª–æ–≤ –∏–∑ %s", len(words), filename)
        
        return words
        
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤ –∏–∑ %s: %s", filename, e)
        return words

def compute_notification_times(total_count, first_time, duration_hours, tz="Europe/Moscow"):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è).
    """
    try:
        if len(first_time.split(':')) == 2:
            first_time = f"{first_time}:00"
            
        base_time = datetime.strptime(first_time, "%H:%M:%S")
        
        if total_count <= 1:
            return [base_time.strftime("%H:%M")]
            
        interval_seconds = (duration_hours * 3600) / (total_count - 1) if total_count > 1 else 0
        
        times = []
        for i in range(total_count):
            notification_time = base_time + timedelta(seconds=i * interval_seconds)
            times.append(notification_time.strftime("%H:%M"))
            
        return times
        
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)
        return [f"{int(i * 24 / total_count):02d}:00" for i in range(total_count)]

def get_daily_words_for_user(chat_id, level, words_count, repetitions, first_time, duration_hours, 
                           force_reset=False, chosen_set=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–Ω—è (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞).
    """
    # –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try:
        from handlers.settings import user_set_selection
    except ImportError:
        user_set_selection = {}

    try:
        from utils.subscription_helpers import is_set_available_for_user
    except ImportError:
        def is_set_available_for_user(chat_id, set_name):
            return True

    try:
        today = datetime.now().strftime("%Y-%m-%d")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –∫—ç—à–∞
        if force_reset:
            if chat_id in daily_words_cache:
                del daily_words_cache[chat_id]
            if chat_id in previous_daily_words:
                del previous_daily_words[chat_id]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        if chat_id in daily_words_cache and not force_reset:
            cached = daily_words_cache[chat_id]
            if (cached[0] == today and cached[3] == first_time and 
                cached[4] == duration_hours and cached[5] == words_count and cached[6] == repetitions):
                return cached[1], cached[2]
            reset_daily_words_cache(chat_id)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞
        if chosen_set is None:
            chosen_set = user_set_selection.get(chat_id, DEFAULT_SETS.get(level))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–∞–±–æ—Ä–∞
        if not is_set_available_for_user(chat_id, chosen_set):
            try:
                from utils.subscription_helpers import get_available_sets_for_user
                available_sets = get_available_sets_for_user(chat_id, level)
                if available_sets:
                    chosen_set = available_sets[0]
                else:
                    return None
            except ImportError:
                chosen_set = DEFAULT_SETS.get(level)
                if not chosen_set:
                    return None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —É—Ä–æ–≤–Ω—è –∏ –Ω–∞–±–æ—Ä–∞
        default_set = DEFAULT_SETS.get(level)
        set_level_mismatch = False
        
        for prefix in ["A1", "A2", "B1", "B2", "C1", "C2"]:
            if chosen_set and chosen_set.startswith(prefix) and prefix != level:
                set_level_mismatch = True
                break
        
        set_file_path = os.path.join(LEVELS_DIR, level, f"{chosen_set}.txt")
        if not os.path.exists(set_file_path) or set_level_mismatch:
            if default_set:
                default_set_path = os.path.join(LEVELS_DIR, level, f"{default_set}.txt")
                if os.path.exists(default_set_path):
                    return None, None, default_set
                else:
                    return None
            else:
                return None

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤ –∏–∑ –Ω–∞–±–æ—Ä–∞
        file_words = load_words_for_set(level, chosen_set)
        if not file_words:
            return None

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        try:
            learned_raw = crud.get_learned_words(chat_id)
            learned_set = set(extract_english(item[0]).lower() for item in learned_raw)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", chat_id, e)
            learned_set = set()

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤
        available_words = []
        for word in file_words:
            eng_word = extract_english(word).lower()
            if eng_word not in learned_set:
                available_words.append(word)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
        leftover_words = []
        if chat_id in previous_daily_words:
            for word in previous_daily_words[chat_id]:
                eng_word = extract_english(word).lower()
                if eng_word not in learned_set:
                    leftover_words.append(word)
        
        total_available = len(available_words) + len(leftover_words)
        min_words_threshold = min(3, words_count // 2)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        is_revision_mode = (total_available == 0) or (total_available < min_words_threshold and len(file_words) > 0)
        
        unique_words = []
        prefix_message = ""
        
        if is_revision_mode:
            prefix_message = "üéì –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –≤ —ç—Ç–æ–º –Ω–∞–±–æ—Ä–µ. –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:\n\n"
            
            if len(file_words) <= words_count:
                unique_words = file_words.copy()
            else:
                unique_words = random.sample(file_words, words_count)
        else:
            # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
            if leftover_words:
                if len(leftover_words) <= words_count:
                    unique_words.extend(leftover_words)
                else:
                    unique_words.extend(random.sample(leftover_words, words_count))
            
            # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
            if len(unique_words) < words_count:
                words_needed = words_count - len(unique_words)
                remaining_available = [w for w in available_words if w not in unique_words]
                
                if remaining_available:
                    if len(remaining_available) <= words_needed:
                        unique_words.extend(remaining_available)
                    else:
                        unique_words.extend(random.sample(remaining_available, words_needed))
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å–ª–æ–≤
            if len(unique_words) < words_count:
                total_unique = len(set([extract_english(w).lower() for w in (available_words + leftover_words)]))
                
                if total_unique > 0:
                    prefix_message = f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {total_unique} –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ —ç—Ç–æ–º –Ω–∞–±–æ—Ä–µ!\n\n"
                else:
                    prefix_message = "üéì –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –≤ —ç—Ç–æ–º –Ω–∞–±–æ—Ä–µ.\n\n"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            if prefix_message:
                messages_unique = [prefix_message] + ["üîπ " + word for word in unique_words]
            else:
                messages_unique = ["üîπ " + word for word in unique_words]
                
            repeated_messages = []
            for _ in range(repetitions):
                repeated_messages.extend(messages_unique)
                
            total_notifications = len(repeated_messages)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: %s", e)
            messages_unique = ["üîπ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤"]
            repeated_messages = messages_unique * repetitions
            total_notifications = len(repeated_messages)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user = crud.get_user(chat_id)
            user_tz = user[5] if user and len(user) > 5 and user[5] else "Europe/Moscow"
        except Exception:
            user_tz = "Europe/Moscow"

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        times = compute_notification_times(total_notifications, first_time, duration_hours, tz=user_tz)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
        daily_words_cache[chat_id] = (today, repeated_messages, times, first_time, duration_hours, 
                                    words_count, repetitions, user_tz, unique_words, is_revision_mode)
        
        return repeated_messages, times
        
    except Exception as e:
        logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ get_daily_words_for_user –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", chat_id, e)
        return ["üîπ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤ –¥–Ω—è"], ["12:00"]

def cleanup_caches():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–µ–π (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)."""
    try:
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Ñ–∞–π–ª–æ–≤
        current_time = datetime.now().timestamp()
        expired_keys = [
            key for key, (_, cache_time) in _words_file_cache.items()
            if current_time - cache_time > _cache_max_age
        ]
        for key in expired_keys:
            del _words_file_cache[key]
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å–ª–æ–≤ –¥–Ω—è (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ)
        today = datetime.now().strftime("%Y-%m-%d")
        expired_users = [
            chat_id for chat_id, cached_data in daily_words_cache.items()
            if cached_data[0] != today
        ]
        for chat_id in expired_users:
            del daily_words_cache[chat_id]
        
        if not PRODUCTION_MODE and (expired_keys or expired_users):
            logger.info("–û—á–∏—â–µ–Ω—ã –∫—ç—à–∏: %d —Ñ–∞–π–ª–æ–≤, %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 
                       len(expired_keys), len(expired_users))
                       
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–µ–π: %s", e)