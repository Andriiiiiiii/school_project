import os
import random
import logging
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from config import LEVELS_DIR, REMINDER_START, DURATION_HOURS, DEFAULT_SETS
from database import crud
from utils.cache_manager import CacheManager

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫—ç—à–∞ —Å –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è 24 —á–∞—Å–∞
daily_words_manager = CacheManager(expiry_time=86400)  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
previous_daily_words_manager = CacheManager(expiry_time=172800)  # 48 —á–∞—Å–æ–≤

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

def reset_daily_words_cache(chat_id):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫—ç—à —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –¥–Ω—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    daily_words_manager.delete(chat_id)
    logger.debug(f"Daily words cache reset for user {chat_id}")

def load_words_for_set(level: str, chosen_set: str):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ç–∞.
    –§–∞–π–ª –∏—â–µ—Ç—Å—è –ø–æ –ø—É—Ç–∏ LEVELS_DIR/level/chosen_set.txt.
    """
    filename = os.path.join(LEVELS_DIR, level, f"{chosen_set}.txt")
    if not os.path.exists(filename):
        logger.warning(f"Set file not found: {filename}")
        return []
        
    try:
        with open(filename, encoding="utf-8") as f:
            words = [line.strip() for line in f if line.strip()]
        logger.debug(f"Loaded {len(words)} words from {filename}")
        return words
    except Exception as e:
        logger.error(f"Error loading words from {filename}: {e}")
        return []

def compute_notification_times(total_count, first_time, duration_hours, tz="Europe/Moscow"):
    try:
        base = datetime.strptime(first_time, "%H:%M").replace(tzinfo=ZoneInfo(tz))
        interval = timedelta(hours=duration_hours / total_count)
        times = [(base + n * interval).strftime("%H:%M") for n in range(total_count)]
        return times
    except Exception as e:
        logger.error(f"Error computing notification times: {e}")
        # Fallback to evenly distributed times
        try:
            hours_per_notification = duration_hours / total_count
            return [f"{int(hours_per_notification * n):02d}:00" for n in range(total_count)]
        except:
            logger.critical("Critical error in computing notification times")
            return ["12:00"] * total_count

def extract_english(word_line: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫—É—é —á–∞—Å—Ç—å –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ 'word - translation'. –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å—é —Å—Ç—Ä–æ–∫—É."""
    if " - " in word_line:
        return word_line.split(" - ", 1)[0].strip()
    return word_line.strip()

def get_daily_words_for_user(chat_id, level, words_count, repetitions, first_time, duration_hours, force_reset=False, chosen_set=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–Ω—è —Å —É—á–µ—Ç–æ–º —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª.
    –ï—Å–ª–∏ chosen_set –Ω–µ –∑–∞–¥–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–µ—Ç –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è,
    –∞ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±–∏—Ä–∞–ª ‚Äì –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–±–æ—Ä –∏–∑ DEFAULT_SETS.
    """
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from handlers.settings import user_set_selection

    today = datetime.now().strftime("%Y-%m-%d")
    
    if force_reset:
        reset_daily_words_cache(chat_id)
        previous_daily_words_manager.delete(chat_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    cached_data = daily_words_manager.get(chat_id)
    if cached_data:
        cached_today, repeated_messages, times, cached_first_time, cached_duration_hours, cached_words_count, cached_repetitions, user_tz, unique_words = cached_data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞
        if (cached_today == today and cached_first_time == first_time and 
            cached_duration_hours == duration_hours and cached_words_count == words_count and 
            cached_repetitions == repetitions):
            logger.debug(f"Using cached daily words for user {chat_id}")
            return repeated_messages, times
        
        # –ï—Å–ª–∏ –∫—ç—à –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
        reset_daily_words_cache(chat_id)
        logger.debug(f"Cache invalidated for user {chat_id}: settings changed")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç: –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è, –∏–Ω–∞—á–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–∑ DEFAULT_SETS
    if chosen_set is None:
        chosen_set = user_set_selection.get(chat_id, DEFAULT_SETS.get(level))
    
    file_words = load_words_for_set(level, chosen_set)
    if not file_words:
        logger.warning(f"No words found for level {level}, set {chosen_set}")
        return None

    try:
        learned_raw = crud.get_learned_words(chat_id)
        learned_set = set(extract_english(item[0]) for item in learned_raw)

        # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
        if len(learned_set) >= len(file_words):
            if len(file_words) >= words_count:
                unique_words = random.sample(file_words, words_count)
            else:
                unique_words = file_words[:]
        else:
            available_words = [w for w in file_words if extract_english(w) not in learned_set]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è –∏–∑ –∫—ç—à–∞
            previous_words = previous_daily_words_manager.get(chat_id) or []
            leftover = [w for w in previous_words if extract_english(w) not in learned_set]
            
            if len(leftover) >= words_count:
                unique_words = random.sample(leftover, words_count)
            else:
                needed_new = words_count - len(leftover)
                candidates = [w for w in available_words if w not in leftover]
                if len(candidates) >= needed_new:
                    new_words = random.sample(candidates, needed_new)
                else:
                    new_words = candidates
                unique_words = leftover + new_words
        
        messages_unique = ["üîπ " + word for word in unique_words]
        repeated_messages = messages_unique * repetitions
        total_notifications = len(unique_words) * repetitions

        user = crud.get_user(chat_id)
        user_tz = user[5] if user and len(user) > 5 and user[5] else "Europe/Moscow"
        times = compute_notification_times(total_notifications, first_time, duration_hours, tz=user_tz)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        cache_data = (today, repeated_messages, times, first_time, duration_hours, words_count, repetitions, user_tz, unique_words)
        daily_words_manager.set(chat_id, cache_data)
        logger.debug(f"Daily words generated and cached for user {chat_id}")
        
        return repeated_messages, times
    except Exception as e:
        logger.error(f"Error generating daily words for user {chat_id}: {e}")
        return None