import os
import random
import logging
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from config import LEVELS_DIR, REMINDER_START, DURATION_HOURS, DEFAULT_SETS
from database import crud

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö—ç—à –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–ª–æ–≤
daily_words_cache = {}

# –•—Ä–∞–Ω–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
previous_daily_words = {}
# –î–æ–±–∞–≤—å—Ç–µ –≤ utils/helpers.py —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–±—Ä–æ—Å–∞ –∫—ç—à–∞

def reset_daily_words_cache(chat_id):
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫—ç—à —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –¥–Ω—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    """
    try:
        if chat_id in daily_words_cache:
            logger.info(f"Resetting daily words cache for user {chat_id}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            entry = daily_words_cache[chat_id]
            if len(entry) > 9:
                is_revision = entry[9]
                logger.debug(f"User {chat_id} was in revision mode: {is_revision}")
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –∫—ç—à–∞
            del daily_words_cache[chat_id]
            logger.debug(f"Cache reset for user {chat_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
            if chat_id not in daily_words_cache:
                logger.info(f"Cache successfully reset for user {chat_id}")
            else:
                logger.error(f"Failed to reset cache for user {chat_id}")
        else:
            logger.debug(f"No cache found for user {chat_id}, nothing to reset")
    except Exception as e:
        logger.error(f"Error resetting cache for user {chat_id}: {e}")

def load_words_for_set(level: str, chosen_set: str):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ç–∞.
    –§–∞–π–ª –∏—â–µ—Ç—Å—è –ø–æ –ø—É—Ç–∏ LEVELS_DIR/level/chosen_set.txt.
    """
    if not level or not chosen_set:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: —É—Ä–æ–≤–µ–Ω—å={level}, —Å–µ—Ç={chosen_set}")
        return []
        
    filename = os.path.join(LEVELS_DIR, level, f"{chosen_set}.txt")
    words = []
    
    try:
        if not os.path.exists(filename):
            logger.warning(f"Set file not found: {filename}")
            return words
            
        with open(filename, encoding="utf-8") as f:
            words = [line.strip() for line in f if line.strip()]
        
        logger.debug(f"Loaded {len(words)} words from {filename}")
        return words
    except FileNotFoundError:
        logger.error(f"File not found: {filename}")
        return words
    except PermissionError:
        logger.error(f"Permission denied when accessing file: {filename}")
        return words
    except UnicodeDecodeError:
        logger.error(f"Unicode decode error in file: {filename}")
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª —Å –¥—Ä—É–≥–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
            with open(filename, encoding="cp1251") as f:
                words = [line.strip() for line in f if line.strip()]
            logger.info(f"Successfully loaded file with cp1251 encoding: {filename}")
            return words
        except Exception as e:
            logger.error(f"Failed to load file with alternative encoding: {e}")
            return words
    except Exception as e:
        logger.error(f"Error loading words from {filename}: {e}")
        return words

def compute_notification_times(total_count, first_time, duration_hours, tz="Europe/Moscow"):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    try:
        base = datetime.strptime(first_time, "%H:%M").replace(tzinfo=ZoneInfo(tz))
        interval = timedelta(hours=duration_hours / total_count)
        times = [(base + n * interval).strftime("%H:%M") for n in range(total_count)]
        return times
    except ValueError as e:
        logger.error(f"Invalid time format '{first_time}': {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        return [f"{int(i * 24 / total_count):02d}:00" for i in range(total_count)]
    except Exception as e:
        logger.error(f"Error computing notification times: {e}")
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return ["12:00"] * total_count

# –í —Ñ–∞–π–ª–µ utils/helpers.py –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é extract_english

def extract_english(word_line: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫—É—é —á–∞—Å—Ç—å –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ 'word - translation'.
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π —Ä–∞–±–æ—Ç—ã.
    """
    try:
        if not word_line or not isinstance(word_line, str):
            logger.error(f"Invalid input to extract_english: {word_line}")
            return ""
            
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 'word - translation'
        if " - " in word_line:
            return word_line.split(" - ", 1)[0].strip()
            
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 'word ‚Äì translation' (—Å –¥–ª–∏–Ω–Ω—ã–º —Ç–∏—Ä–µ)
        if " ‚Äì " in word_line:
            return word_line.split(" ‚Äì ", 1)[0].strip()
            
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 'word: translation'
        if ": " in word_line:
            return word_line.split(": ", 1)[0].strip()
            
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å emoji –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, —É–¥–∞–ª—è–µ–º –∏—Ö
        cleaned_line = word_line.strip()
        if cleaned_line and (cleaned_line[0] in ['üîπ', 'üìå', '‚è∞', '‚ö†Ô∏è', 'üéì']):
            cleaned_line = cleaned_line[1:].strip()
            
        # –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É
        return cleaned_line
    except Exception as e:
        logger.error(f"Error extracting English word from '{word_line}': {e}")
        return word_line.strip() if isinstance(word_line, str) else ""

def get_daily_words_for_user(chat_id, level, words_count, repetitions, first_time, duration_hours, force_reset=False, chosen_set=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–Ω—è.
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤ –∏ —Ä–µ–∂–∏–º–æ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - tuple (messages, times) - —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –≤—Ä–µ–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    - None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    try:
        from handlers.settings import user_set_selection
    except ImportError as e:
        logger.error(f"Error importing user_set_selection: {e}")
        user_set_selection = {}

    try:
        today = datetime.now().strftime("%Y-%m-%d")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –∫—ç—à–∞ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if force_reset:
            reset_daily_words_cache(chat_id)
            if chat_id in previous_daily_words:
                del previous_daily_words[chat_id]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã
        if chat_id in daily_words_cache:
            cached = daily_words_cache[chat_id]
            if (cached[0] == today and cached[3] == first_time and 
                cached[4] == duration_hours and cached[5] == words_count and cached[6] == repetitions):
                return cached[1], cached[2]
            reset_daily_words_cache(chat_id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç —Å–ª–æ–≤
        if chosen_set is None:
            chosen_set = user_set_selection.get(chat_id, DEFAULT_SETS.get(level))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
        set_file_path = os.path.join(LEVELS_DIR, level, f"{chosen_set}.txt")
        if not os.path.exists(set_file_path):
            logger.warning(f"–°–µ—Ç '{chosen_set}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è {level}. –ü—É—Ç—å: {set_file_path}")
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–π —Å–µ—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
            default_set = DEFAULT_SETS.get(level)
            if default_set:
                default_set_path = os.path.join(LEVELS_DIR, level, f"{default_set}.txt")
                if os.path.exists(default_set_path):
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∫—ç—à–µ
                    try:
                        from database import crud
                        crud.update_user_chosen_set(chat_id, default_set)
                        user_set_selection[chat_id] = default_set
                        chosen_set = default_set
                        logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∞–∑–æ–≤—ã–π —Å–µ—Ç '{default_set}' –¥–ª—è —É—Ä–æ–≤–Ω—è {level} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
                else:
                    logger.error(f"–ë–∞–∑–æ–≤—ã–π —Å–µ—Ç '{default_set}' —Ç–æ–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è {level}. –ü—É—Ç—å: {default_set_path}")
                    return None
            else:
                logger.error(f"–ù–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ —Å–µ—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è {level}")
                return None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ç–∞
        file_words = load_words_for_set(level, chosen_set)
        if not file_words:
            logger.warning(f"No words found for level {level}, set {chosen_set}")
            return None

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        try:
            learned_raw = crud.get_learned_words(chat_id)
            # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º extract_english –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞
            learned_set = set(extract_english(item[0]) for item in learned_raw)
        except Exception as e:
            logger.error(f"Error getting learned words for user {chat_id}: {e}")
            learned_set = set()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞
        available_words = []
        for word in file_words:
            eng_word = extract_english(word)
            if eng_word not in learned_set:
                available_words.append(word)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
        leftover_words = []
        if chat_id in previous_daily_words:
            for word in previous_daily_words[chat_id]:
                eng_word = extract_english(word)
                if eng_word not in learned_set:
                    leftover_words.append(word)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ —Ä–µ–∂–∏–º–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –º—ã –∏–ª–∏ –Ω–µ—Ç
        is_revision_mode = len(available_words) == 0 and len(file_words) > 0
        
        unique_words = []
        prefix_message = ""
        
        if is_revision_mode:
            # –†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è - –≤—Å–µ —Å–ª–æ–≤–∞ —É–∂–µ –≤—ã—É—á–µ–Ω—ã
            prefix_message = "üéì –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –≤ —ç—Ç–æ–º –Ω–∞–±–æ—Ä–µ. –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:\n\n"
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤—Å–µ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            if len(file_words) <= words_count:
                unique_words = file_words.copy()
            else:
                unique_words = random.sample(file_words, words_count)
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –µ—Å—Ç—å –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
            
            # 1. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
            if leftover_words:
                if len(leftover_words) <= words_count:
                    unique_words.extend(leftover_words)
                else:
                    unique_words.extend(random.sample(leftover_words, words_count))
            
            # 2. –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, –µ—Å–ª–∏ –º–µ—Å—Ç–æ –µ—â–µ –æ—Å—Ç–∞–ª–æ—Å—å
            if len(unique_words) < words_count:
                words_needed = words_count - len(unique_words)
                remaining_available = [w for w in available_words if w not in unique_words]
                
                if remaining_available:
                    if len(remaining_available) <= words_needed:
                        unique_words.extend(remaining_available)
                    else:
                        unique_words.extend(random.sample(remaining_available, words_needed))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–µ–Ω—å—à–µ –ª–∏ —Å–ª–æ–≤, —á–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–æ
            if len(unique_words) < words_count:
                # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                total_words = len(available_words) + len(leftover_words)
                # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                total_unique = len(set([extract_english(w) for w in (available_words + leftover_words)]))
                
                if total_unique > 0:
                    prefix_message = f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {total_unique} –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ —ç—Ç–æ–º –Ω–∞–±–æ—Ä–µ!\n\n"
                else:
                    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ö–æ—Ç—è —ç—Ç–æ—Ç —Å–ª—É—á–∞–π –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ is_revision_mode
                    prefix_message = "üéì –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –≤ —ç—Ç–æ–º –Ω–∞–±–æ—Ä–µ.\n\n"
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        try:
            if prefix_message:
                messages_unique = [prefix_message] + ["üîπ " + word for word in unique_words]
            else:
                messages_unique = ["üîπ " + word for word in unique_words]
                
            repeated_messages = messages_unique * repetitions
            total_notifications = len(repeated_messages)
        except Exception as e:
            logger.error(f"Error creating messages: {e}")
            messages_unique = ["üîπ Error loading words"]
            repeated_messages = messages_unique * repetitions
            total_notifications = len(repeated_messages)

        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user = crud.get_user(chat_id)
            user_tz = user[5] if user and len(user) > 5 and user[5] else "Europe/Moscow"
        except Exception as e:
            logger.error(f"Error getting user timezone: {e}")
            user_tz = "Europe/Moscow"

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        times = compute_notification_times(total_notifications, first_time, duration_hours, tz=user_tz)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ñ–ª–∞–≥–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        daily_words_cache[chat_id] = (today, repeated_messages, times, first_time, duration_hours, 
                                    words_count, repetitions, user_tz, unique_words, is_revision_mode)
        
        return repeated_messages, times
    except Exception as e:
        logger.error(f"Unhandled error in get_daily_words_for_user for chat_id {chat_id}: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return ["üîπ Error loading daily words"], ["12:00"]