# utils/helpers.py
import os
import random
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from config import LEVELS_DIR, REMINDER_START, DURATION_HOURS
from database import crud

# –ö—ç—à –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–ª–æ–≤: –∫–ª—é—á ‚Äì chat_id, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì 
# (today, repeated_messages, times, first_time, duration_hours, words_count, repetitions, user_tz, unique_words)
daily_words_cache = {}

# –•—Ä–∞–Ω–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è (–∫–∞–∫ –æ–Ω–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª–µ): –∫–ª—é—á ‚Äì chat_id, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
previous_daily_words = {}

def reset_daily_words_cache(chat_id):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫—ç—à —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –¥–Ω—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if chat_id in daily_words_cache:
        del daily_words_cache[chat_id]

def load_words_for_level(level: str):
    filename = os.path.join(LEVELS_DIR, f"{level}.txt")
    if not os.path.exists(filename):
        return []
    with open(filename, encoding="utf-8") as f:
        words = [line.strip() for line in f if line.strip()]
    return words

def compute_notification_times(total_count, first_time, duration_hours, tz="Europe/Moscow"):
    base = datetime.strptime(first_time, "%H:%M").replace(tzinfo=ZoneInfo(tz))
    interval = timedelta(hours=duration_hours / total_count)
    times = [(base + n * interval).strftime("%H:%M") for n in range(total_count)]
    return times

def extract_english(word_line: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫—É—é —á–∞—Å—Ç—å –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ 'word - translation'. –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å—é —Å—Ç—Ä–æ–∫—É."""
    if " - " in word_line:
        return word_line.split(" - ", 1)[0].strip()
    return word_line.strip()

def get_daily_words_for_user(chat_id, level, words_count, repetitions, first_time, duration_hours, force_reset=False):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–Ω—è —Å —É—á–µ—Ç–æ–º —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª:
    
    1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∏–∑—É—á–∏–ª –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ —É—Ä–æ–≤–Ω—è, –∏–∑ —Ñ–∞–π–ª–∞ –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è —Å–ª–æ–≤–∞, —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ "–º–æ–µ–º —Å–ª–æ–≤–∞—Ä–µ". 
       –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∞—è —á–∞—Å—Ç—å (–∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ extract_english).
    2. –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –º–µ–Ω—å—à–µ —Å–ª–æ–≤, —á–µ–º –∑–∞–¥–∞–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç—Ä–µ–±—É–µ—Ç—Å—è 8, –∞ –æ—Å—Ç–∞–ª–æ—Å—å 4),
       –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤.
    3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑—É—á–∏–ª –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ —É—Ä–æ–≤–Ω—è, –≤—ã–±–æ—Ä –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–ª—É—á–∞–π–Ω–æ –∏–∑ –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞.
    4. –ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–ø—Ä–∏ —Å–º–µ–Ω–µ –¥–Ω—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫) —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è:
       - –ï—Å–ª–∏ –≤ previous_daily_words –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ chat_id –µ—Å—Ç—å –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, –æ–Ω–∏ –≤–∫–ª—é—á–∞—é—Ç—Å—è –≤ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫,
         –∞ –∑–∞—Ç–µ–º –¥–æ–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–æ–≤—ã–º–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –¥–æ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.
    5. –ï—Å–ª–∏ force_reset=True (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫), —Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –∫—ç—à –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫.
    """
    today = datetime.now().strftime("%Y-%m-%d")
    
    if force_reset:
        reset_daily_words_cache(chat_id)
        if chat_id in previous_daily_words:
            del previous_daily_words[chat_id]
    
    if chat_id in daily_words_cache:
        cached = daily_words_cache[chat_id]
        if (cached[0] == today and cached[3] == first_time and 
            cached[4] == duration_hours and cached[5] == words_count and cached[6] == repetitions):
            return cached[1], cached[2]
        reset_daily_words_cache(chat_id)

    file_words = load_words_for_level(level)
    if not file_words:
        return None

    learned_raw = crud.get_learned_words(chat_id)
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —á–∞—Å—Ç–∏ –¥–ª—è —É–∂–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    learned_set = set(extract_english(item[0]) for item in learned_raw)

    if len(learned_set) >= len(file_words):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑—É—á–∏–ª –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞, –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
        if len(file_words) >= words_count:
            unique_words = random.sample(file_words, words_count)
        else:
            unique_words = file_words[:]  # –≤—Å–µ —Å–ª–æ–≤–∞
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤:
        available_words = [w for w in file_words if extract_english(w) not in learned_set]
        leftover = []
        if chat_id in previous_daily_words:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è (—É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏) –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏—Ö –ø–æ –∏–∑—É—á–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞–º
            leftover = [w for w in previous_daily_words[chat_id] if extract_english(w) not in learned_set]
        if len(leftover) >= words_count:
            unique_words = random.sample(leftover, words_count)
        else:
            needed_new = words_count - len(leftover)
            candidates = [w for w in available_words if w not in leftover]
            if len(candidates) >= needed_new:
                new_words = random.sample(candidates, needed_new)
            else:
                new_words = candidates
            unique_words = leftover + new_words
            # –ï—Å–ª–∏ –∏—Ç–æ–≥–æ–≤–æ–µ —á–∏—Å–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –º–µ–Ω—å—à–µ, —á–µ–º words_count, —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –∫–æ—Ä–æ—á–µ.
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
    messages_unique = ["üîπ " + word for word in unique_words]
    repeated_messages = messages_unique * repetitions
    total_notifications = len(unique_words) * repetitions

    user = crud.get_user(chat_id)
    user_tz = user[5] if user and len(user) > 5 and user[5] else "Europe/Moscow"
    times = compute_notification_times(total_notifications, first_time, duration_hours, tz=user_tz)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –≤–º–µ—Å—Ç–µ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    daily_words_cache[chat_id] = (today, repeated_messages, times, first_time, duration_hours, words_count, repetitions, user_tz, unique_words)
    return repeated_messages, times
