# utils/visual_helpers.py
import logging
from typing import List, Tuple
import re

logger = logging.getLogger(__name__)

# –°–∏–º–≤–æ–ª—ã –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
PROGRESS_FILLED = "‚ñà"
PROGRESS_EMPTY = "‚ñë"
BULLET_STYLES = {
    "standard": "‚Ä¢ ",
    "numbered": None,  # –ë—É–¥–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ "1. ", "2. " –∏ —Ç.–¥.
    "arrow": "‚Üí ",
    "star": "‚òÖ ",
    "check": "‚úì ",
    "diamond": "‚óÜ "
}

SECTION_DIVIDERS = {
    "light": "‚îÄ" * 30,
    "medium": "‚îÅ" * 30,
    "heavy": "‚ïê" * 30,
    "double": "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê",
    "decorated": "‚Ä¢‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚Ä¢",
    "star": "‚úßÔΩ•Ôæü: *‚úßÔΩ•Ôæü:* *:ÔΩ•Ôæü‚úß*:ÔΩ•Ôæü‚úß"
}

# –≠–º–æ–¥–∑–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
EMOJI = {
    "learn": ["üìö", "üìñ", "üìù", "üîç", "üéì", "‚úèÔ∏è", "üìò"],
    "success": ["‚úÖ", "üéâ", "üèÜ", "üåü", "üëç", "üéä", "üíØ"],
    "warning": ["‚ö†Ô∏è", "‚ùó", "üîî", "üì¢", "‚ÄºÔ∏è"],
    "error": ["‚ùå", "üö´", "‚õî", "üî¥", "‚ùó"],
    "time": ["‚è∞", "‚åö", "üïí", "‚è±Ô∏è", "üìÖ"],
    "level": ["üîÑ", "üîº", "üÜô", "üìä", "üìà"],
    "quiz": ["üéØ", "‚ùì", "üéÆ", "üß©", "üé≤", "üé™"],
    "settings": ["‚öôÔ∏è", "üîß", "üõ†Ô∏è", "üî®", "üî©"],
    "menu": ["üìã", "üìä", "üìë", "üìÅ"]
}

# –°—Ç–∏–∫–µ—Ä—ã –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π (ID —Å—Ç–∏–∫–µ—Ä–æ–≤)
CONGRATULATION_STICKERS = [
    "CAACAgIAAxkBAAEKX2RlB3TN7AAB3o7Dh4QXsaU6SWHccpQAAjcHAAJlhUhLOh2LB8jQBDswBA",  # –ü—Ä–∏–º–µ—Ä ID —Å—Ç–∏–∫–µ—Ä–∞
    "CAACAgIAAxkBAAEKX2ZlB3VnXKiJ7AABaRpSmMhlg3JFQmQAAkIHAAL2U-hLNLtFY_Tf0GUwBA",  # –ü—Ä–∏–º–µ—Ä ID —Å—Ç–∏–∫–µ—Ä–∞
    "CAACAgIAAxkBAAEKX2hlB3V8Tit78f3MF-Z20VkfUvl7KAACbgUAAvLm-UtcQxCPuiDzijAE"    # –ü—Ä–∏–º–µ—Ä ID —Å—Ç–∏–∫–µ—Ä–∞
]

def format_header(text: str, emoji: str = None, top_divider: str = None, bottom_divider: str = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏."""
    header = f"{emoji} {text} {emoji}" if emoji else text
    
    if top_divider:
        header = f"{top_divider}\n{header}"
    if bottom_divider:
        header = f"{header}\n{bottom_divider}"
        
    return header

def format_bullet_list(items: List[str], style: str = "standard", start_index: int = 1) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ –º–∞—Ä–∫–µ—Ä–æ–≤."""
    bullet_style = BULLET_STYLES.get(style, BULLET_STYLES["standard"])
    formatted_items = []
    
    for i, item in enumerate(items):
        if style == "numbered":
            line = f"{i+start_index}. {item}"
        else:
            line = f"{bullet_style}{item}"
        formatted_items.append(line)
        
    return "\n".join(formatted_items)

def format_word_item(word: str, translation: str, transcription: str = None, 
                    example: str = None, emoji: str = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä–Ω–æ–µ —Å–ª–æ–≤–æ —Å –¥–µ—Ç–∞–ª—è–º–∏."""
    if not emoji:
        emoji = "üìù"
        
    result = f"{emoji} *{word}* ‚Äî _{translation}_"
    
    if transcription:
        result += f"\n  [{transcription}]"
        
    if example:
        result += f"\n  –ü—Ä–∏–º–µ—Ä: \"{example}\""
        
    return result

def format_progress_bar(current: int, total: int, length: int = 10) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —à–∫–∞–ª—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    filled_length = int(length * current / total) if total > 0 else 0
    bar = PROGRESS_FILLED * filled_length + PROGRESS_EMPTY * (length - filled_length)
    return f"[{bar}] {current}/{total}"

def format_quiz_question(question_number: int, total_questions: int, word: str, 
                         options: List[str], is_revision: bool = False) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    progress = format_progress_bar(question_number, total_questions)
    
    header = "üîÑ –ü–û–í–¢–û–†–ï–ù–ò–ï" if is_revision else "üéØ –°–õ–û–í–ê–†–ù–´–ô –ö–í–ò–ó"
    question = f"{header}\n{progress}\n\n–í–æ–ø—Ä–æ—Å {question_number}/{total_questions}:\n\n–ö–∞–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ '*{word}*'?"
    
    return question

def format_result_message(correct: int, total: int, is_revision: bool = False) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–≤–∏–∑–∞."""
    percentage = (correct / total) * 100 if total > 0 else 0
    
    # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if percentage >= 90:
        emoji = "üéâ"
    elif percentage >= 70:
        emoji = "üëç"
    elif percentage >= 50:
        emoji = "üëå"
    else:
        emoji = "üîÑ"
        
    progress = format_progress_bar(correct, total, 20)
    
    header = f"{emoji} –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! {emoji}"
    divider = SECTION_DIVIDERS["decorated"]
    
    message = f"{header}\n{divider}\n\n"
    message += f"*–°—á–µ—Ç:* {correct} –∏–∑ {total} ({percentage:.1f}%)\n{progress}\n\n"
    
    if is_revision:
        message += "–í—ã –±—ã–ª–∏ –≤ *—Ä–µ–∂–∏–º–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è*. –≠—Ç–∏ —Å–ª–æ–≤–∞ —É–∂–µ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ.\n\n"
        if percentage < 70:
            message += "üí° *–°–æ–≤–µ—Ç:* –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è —ç—Ç–∏—Ö —Å–ª–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."
    else:
        message += "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å.\n\n"
        if percentage < 70:
            message += "üí° *–°–æ–≤–µ—Ç:* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–≤–∏–∑ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞, —á—Ç–æ–±—ã –æ—Å–≤–æ–∏—Ç—å —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏."
            
    return message

def extract_english(word_line: str) -> str:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è extract_english —Å –ª—É—á—à–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    try:
        if not word_line or not isinstance(word_line, str):
            return ""
            
        # –£–¥–∞–ª—è–µ–º –≤–µ–¥—É—â–∏–µ —ç–º–æ–¥–∑–∏ –∏–ª–∏ —Å–∏–º–≤–æ–ª—ã
        cleaned_line = re.sub(r'^[^\w]*', '', word_line).strip()
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        for separator in [" - ", " ‚Äì ", ": "]:
            if separator in cleaned_line:
                return cleaned_line.split(separator, 1)[0].strip()
                
        return cleaned_line
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ '{word_line}': {e}")
        return word_line.strip() if isinstance(word_line, str) else ""

def format_daily_words_message(messages: List[str], times: List[str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ–≤–∞–º–∏ –¥–Ω—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤–∏–∑—É–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º."""
    header = format_header("üìö –°–ª–æ–≤–∞—Ä—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", top_divider=SECTION_DIVIDERS["decorated"], 
                          bottom_divider=SECTION_DIVIDERS["decorated"])
    
    result = f"{header}\n\n"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª—é–±–æ–µ –ø—Ä–µ—Ñ–∏–∫—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞—á–∏–Ω–∞—é—â–µ–µ—Å—è —Å üéì –∏–ª–∏ ‚ö†Ô∏è)
    prefix_message = ""
    word_messages = messages.copy()
    
    if messages and (messages[0].startswith("üéì") or messages[0].startswith("‚ö†Ô∏è")):
        prefix_message = messages[0]
        word_messages = messages[1:]
    
    if prefix_message:
        result += f"{prefix_message}\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    time_groups = {}
    for i, time in enumerate(times):
        if i < len(word_messages):
            if time not in time_groups:
                time_groups[time] = []
            time_groups[time].append(word_messages[i])
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
    for time, words in time_groups.items():
        result += f"‚è∞ *{time}*\n"
        for word in words:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            word_text = word
            if word.startswith("üîπ "):
                word_text = word[2:].strip()
            result += f"‚Ä¢ {word_text}\n"
        result += "\n"
    
    return result

def format_dictionary_message(words: List[Tuple[str, str]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å–∏ —Å–ª–æ–≤–∞—Ä—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤–∏–∑—É–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º."""
    if not words:
        return "üìö *–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç*\n\n–ü—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑—ã, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –≤ —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å!"
    
    header = format_header("üìö –í–∞—à —Å–ª–æ–≤–∞—Ä—å", 
                          top_divider=SECTION_DIVIDERS["decorated"],
                          bottom_divider=SECTION_DIVIDERS["decorated"])
    
    result = f"{header}\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    alpha_dict = {}
    for word, translation in words:
        first_letter = word[0].upper() if word else "?"
        if first_letter not in alpha_dict:
            alpha_dict[first_letter] = []
        alpha_dict[first_letter].append((word, translation))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    for letter in sorted(alpha_dict.keys()):
        result += f"*{letter}*\n"
        for word, translation in alpha_dict[letter]:
            result += f"‚Ä¢ {word} ‚Äî _{translation}_\n"
        result += "\n"
    
    return result

def format_level_test_question(q_index: int, total: int, level: str, word: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞ —É—Ä–æ–≤–Ω—è —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏."""
    progress = format_progress_bar(q_index + 1, total)
    
    header = format_header(f"üìä –¢–µ—Å—Ç —É—Ä–æ–≤–Ω—è: {level}", bottom_divider=SECTION_DIVIDERS["light"])
    
    result = f"{header}\n\n"
    result += f"{progress}\n\n"
    result += f"–í–æ–ø—Ä–æ—Å {q_index + 1} –∏–∑ {total}:\n\n"
    result += f"–ö–∞–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ '*{word}*'?"
    
    return result

def format_level_test_results(results_by_level: dict, new_level: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ —É—Ä–æ–≤–Ω—è —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏."""
    header = format_header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ —É—Ä–æ–≤–Ω—è", 
                          top_divider=SECTION_DIVIDERS["decorated"],
                          bottom_divider=SECTION_DIVIDERS["decorated"])
    
    result = f"{header}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
    result += "*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º*\n"
    for level, (score, total) in sorted(results_by_level.items()):
        progress = format_progress_bar(score, total, 10)
        result += f"*{level}*: {score}/{total} {progress}\n"
    
    result += f"\n{SECTION_DIVIDERS['light']}\n\n"
    result += f"üéì *–í–∞—à —É—Ä–æ–≤–µ–Ω—å —Ç–µ–ø–µ—Ä—å: {new_level}*\n\n"
    
    if new_level == "A1":
        result += "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ! –í—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ."
    elif new_level in ["A2", "B1"]:
        result += "–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –í—ã —Å—Ç—Ä–æ–∏—Ç–µ –ø—Ä–æ—á–Ω—ã–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç."
    elif new_level in ["B2", "C1"]:
        result += "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –í—ã —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ–≤–æ–ª—å–Ω–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º."
    else:  # C2
        result += "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–∞–∏–≤—ã—Å—à–µ–≥–æ —É—Ä–æ–≤–Ω—è."
    
    return result

def format_settings_overview(user_settings: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏."""
    header = format_header("‚öôÔ∏è –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", 
                          top_divider=SECTION_DIVIDERS["decorated"],
                          bottom_divider=SECTION_DIVIDERS["decorated"])
    
    result = f"{header}\n\n"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º —ç–º–æ–¥–∑–∏
    result += f"üî§ *–£—Ä–æ–≤–µ–Ω—å*: {user_settings.get('level', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}\n"
    result += f"üìù *–°–ª–æ–≤ –≤ –¥–µ–Ω—å*: {user_settings.get('words_per_day', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n"
    result += f"üîÅ *–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π*: {user_settings.get('repetitions', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n"
    result += f"üåê *–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å*: {user_settings.get('timezone', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}\n"
    result += f"üìö *–í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä*: {user_settings.get('chosen_set', '–ù–µ –≤—ã–±—Ä–∞–Ω')}\n"
    
    return result