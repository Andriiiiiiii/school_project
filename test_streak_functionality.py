# test_streak_functionality.py
import sys
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_database_migration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    print("=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ò–ì–†–ê–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    try:
        from database.db import db_manager
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        with db_manager.get_cursor() as cursor:
            cursor.execute("PRAGMA table_info(users)")
            columns = [row[1] for row in cursor.fetchall()]
            
            required_columns = ['days_streak', 'last_test_date']
            missing_columns = [col for col in required_columns if col not in columns]
            
            if missing_columns:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã: {missing_columns}")
                print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python alter_db_streak.py")
                return False
            else:
                print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–æ–ª–±—Ü–æ–≤
            cursor.execute("""
                SELECT days_streak, last_test_date 
                FROM users 
                LIMIT 1
            """)
            print("‚úÖ –°—Ç–æ–ª–±—Ü—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_crud_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç CRUD —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ streak."""
    print("\n" + "=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CRUD –§–£–ù–ö–¶–ò–ô")
    print("=" * 60)
    
    try:
        from database import crud
        
        test_chat_id = 999999  # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user = crud.get_user(test_chat_id)
            if not user:
                crud.add_user(test_chat_id)
                print(f"   –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {test_chat_id}")
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
        
        # –¢–µ—Å—Ç 1: –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        print("\nüìã –¢–µ—Å—Ç 1: –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        streak, last_test_date = crud.get_user_streak(test_chat_id)
        print(f"   –ù–∞—á–∞–ª—å–Ω—ã–π streak: {streak}")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ —Ç–µ—Å—Ç–∞: {last_test_date}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        crud.reset_user_streak(test_chat_id)
        streak, last_test_date = crud.get_user_streak(test_chat_id)
        assert streak == 0, f"–ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –æ–∂–∏–¥–∞–ª—Å—è streak=0, –ø–æ–ª—É—á–µ–Ω {streak}"
        print("‚úÖ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ streak
        print("\nüìã –¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ streak")
        today = datetime.now().strftime("%Y-%m-%d")
        
        print(f"   –û–±–Ω–æ–≤–ª—è–µ–º streak –Ω–∞ 5, –¥–∞—Ç–∞: {today}")
        crud.update_user_streak(test_chat_id, 5, today)
        
        streak, last_test_date = crud.get_user_streak(test_chat_id)
        print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π streak: {streak}")
        print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –¥–∞—Ç–∞: {last_test_date}")
        
        assert streak == 5, f"–û–∂–∏–¥–∞–ª—Å—è streak=5, –ø–æ–ª—É—á–µ–Ω {streak}"
        assert last_test_date == today, f"–û–∂–∏–¥–∞–ª–∞—Å—å –¥–∞—Ç–∞={today}, –ø–æ–ª—É—á–µ–Ω–∞ {last_test_date}"
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ streak —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç 3: –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç streak
        print("\nüìã –¢–µ—Å—Ç 3: –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç streak")
        
        # –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏–º –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É, —á—Ç–æ–±—ã –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—Ä–∞–±–æ—Ç–∞–ª
        yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
        crud.update_user_streak(test_chat_id, 5, yesterday)
        
        new_streak = crud.increment_user_streak(test_chat_id)
        print(f"   –ù–æ–≤—ã–π streak –ø–æ—Å–ª–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞: {new_streak}")
        assert new_streak == 6, f"–û–∂–∏–¥–∞–ª—Å—è streak=6, –ø–æ–ª—É—á–µ–Ω {new_streak}"
        
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å
        same_day_streak = crud.increment_user_streak(test_chat_id)
        print(f"   Streak –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞: {same_day_streak}")
        assert same_day_streak == 6, f"Streak –Ω–µ –¥–æ–ª–∂–µ–Ω —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è –¥–≤–∞–∂–¥—ã –≤ –¥–µ–Ω—å"
        print("‚úÖ –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç streak —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç 4: –°–±—Ä–æ—Å streak
        print("\nüìã –¢–µ—Å—Ç 4: –°–±—Ä–æ—Å streak")
        crud.reset_user_streak(test_chat_id)
        streak, _ = crud.get_user_streak(test_chat_id)
        print(f"   Streak –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞: {streak}")
        assert streak == 0, f"–û–∂–∏–¥–∞–ª—Å—è streak=0, –ø–æ–ª—É—á–µ–Ω {streak}"
        print("‚úÖ –°–±—Ä–æ—Å streak —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ CRUD —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_discount_calculation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç —Å–∫–∏–¥–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ streak."""
    print("\n" + "=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–ß–ï–¢–ê –°–ö–ò–î–û–ö")
    print("=" * 60)
    
    try:
        from database import crud
        from services.payment import PaymentService
        
        test_chat_id = 999999
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        user = crud.get_user(test_chat_id)
        if not user:
            crud.add_user(test_chat_id)
        
        # –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –ª—é–±–æ–π –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
        crud.update_user_subscription(test_chat_id, "free", None, None)
        
        # –¢–µ—Å—Ç 1: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        print("\nüìã –¢–µ—Å—Ç 1: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–±–µ–∑ —Å–∫–∏–¥–∫–∏)")
        crud.update_user_streak(test_chat_id, 15)
        discount = crud.calculate_streak_discount(test_chat_id)
        print(f"   Streak: 15, –°–∫–∏–¥–∫–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ: {discount}%")
        assert discount == 0, f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∞—Ç—å —Å–∫–∏–¥–∫—É, –ø–æ–ª—É—á–µ–Ω–∞ {discount}%"
        print("‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞—é—Ç —Å–∫–∏–¥–∫—É")
        
        # –î–µ–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–º–∏—É–º
        print("\nüìã –¢–µ—Å—Ç 2: –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        future_date = (datetime.now() + timedelta(days=30)).isoformat()
        crud.update_user_subscription(test_chat_id, "premium", future_date, "test_payment")
        
        # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π streak
        test_cases = [
            (0, 0, "–ù–µ—Ç streak"),
            (5, 5, "5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥"),
            (15, 15, "15 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥"),
            (30, 30, "30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥"),
            (45, 30, "45 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ (–º–∞–∫—Å–∏–º—É–º 30%)"),
            (100, 30, "100 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ (–º–∞–∫—Å–∏–º—É–º 30%)")
        ]
        
        for streak_days, expected_discount, description in test_cases:
            crud.update_user_streak(test_chat_id, streak_days)
            discount = crud.calculate_streak_discount(test_chat_id)
            print(f"   {description}: {discount}% (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_discount}%)")
            assert discount == expected_discount, f"–û–∂–∏–¥–∞–ª–∞—Å—å —Å–∫–∏–¥–∫–∞ {expected_discount}%, –ø–æ–ª—É—á–µ–Ω–∞ {discount}%"
        
        print("‚úÖ –†–∞—Å—á–µ—Ç —Å–∫–∏–¥–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π
        print("\nüìã –¢–µ—Å—Ç 3: –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π")
        crud.update_user_streak(test_chat_id, 20)  # 20% —Å–∫–∏–¥–∫–∞
        
        price_info = PaymentService.calculate_discounted_price(test_chat_id, 1)
        print(f"   –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {price_info['base_price']}")
        print(f"   –°–∫–∏–¥–∫–∞: {price_info['discount_percent']}%")
        print(f"   –°—É–º–º–∞ —Å–∫–∏–¥–∫–∏: {price_info['discount_amount']}")
        print(f"   –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {price_info['final_price']}")
        
        expected_final = price_info['base_price'] * 0.8  # 20% —Å–∫–∏–¥–∫–∞
        assert abs(price_info['final_price'] - expected_final) < 0.01, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Ü–µ–Ω—ã"
        print("‚úÖ –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–∏–¥–æ–∫: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_daily_reset_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ streak."""
    print("\n" + "=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–ö–ò –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –°–ë–†–û–°–ê")
    print("=" * 60)
    
    try:
        from database import crud
        from services.scheduler import process_daily_reset
        
        test_chat_id = 999999
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        user = crud.get_user(test_chat_id)
        if not user:
            crud.add_user(test_chat_id)
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç –≤—á–µ—Ä–∞
        print("\nüìã –¢–µ—Å—Ç 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç –≤—á–µ—Ä–∞")
        yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
        crud.update_user_streak(test_chat_id, 10, yesterday)
        
        streak_before, date_before = crud.get_user_streak(test_chat_id)
        print(f"   Streak –¥–æ —Å–±—Ä–æ—Å–∞: {streak_before}, –¥–∞—Ç–∞: {date_before}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
        # –û—á–∏—â–∞–µ–º –∫—ç—à —Å–±—Ä–æ—Å–∞ —á—Ç–æ–±—ã –æ–Ω —Å—Ä–∞–±–æ—Ç–∞–ª
        if hasattr(process_daily_reset, 'processed_resets'):
            process_daily_reset.processed_resets.clear()
        
        process_daily_reset(test_chat_id)
        
        streak_after, date_after = crud.get_user_streak(test_chat_id)
        print(f"   Streak –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞: {streak_after}, –¥–∞—Ç–∞: {date_after}")
        print("‚úÖ Streak —Å–æ—Ö—Ä–∞–Ω–µ–Ω (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª—Å—è –≤—á–µ—Ä–∞)")
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç –ø–æ–∑–∞–≤—á–µ—Ä–∞
        print("\nüìã –¢–µ—Å—Ç 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç –ø–æ–∑–∞–≤—á–µ—Ä–∞")
        day_before_yesterday = (datetime.now() - timedelta(days=2)).strftime("%Y-%m-%d")
        crud.update_user_streak(test_chat_id, 15, day_before_yesterday)
        
        streak_before, date_before = crud.get_user_streak(test_chat_id)
        print(f"   Streak –¥–æ —Å–±—Ä–æ—Å–∞: {streak_before}, –¥–∞—Ç–∞: {date_before}")
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à —Å–±—Ä–æ—Å–∞ —á—Ç–æ–±—ã –æ–Ω —Å—Ä–∞–±–æ—Ç–∞–ª
        if hasattr(process_daily_reset, 'processed_resets'):
            process_daily_reset.processed_resets.clear()
        
        process_daily_reset(test_chat_id)
        
        streak_after, date_after = crud.get_user_streak(test_chat_id)
        print(f"   Streak –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞: {streak_after}, –¥–∞—Ç–∞: {date_after}")
        assert streak_after == 0, f"Streak –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–±—Ä–æ—à–µ–Ω –¥–æ 0, –ø–æ–ª—É—á–µ–Ω {streak_after}"
        print("‚úÖ Streak —Å–±—Ä–æ—à–µ–Ω (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª –¥–µ–Ω—å)")
        
        # –¢–µ—Å—Ç 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–æ–±—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç—ã
        print("\nüìã –¢–µ—Å—Ç 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –∑–∞–ø–∏—Å–∏ –æ —Ç–µ—Å—Ç–∞—Ö")
        crud.update_user_streak(test_chat_id, 5, None)  # –ù–µ—Ç –¥–∞—Ç—ã —Ç–µ—Å—Ç–∞
        
        streak_before, date_before = crud.get_user_streak(test_chat_id)
        print(f"   Streak –¥–æ —Å–±—Ä–æ—Å–∞: {streak_before}, –¥–∞—Ç–∞: {date_before}")
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à —Å–±—Ä–æ—Å–∞ —á—Ç–æ–±—ã –æ–Ω —Å—Ä–∞–±–æ—Ç–∞–ª
        if hasattr(process_daily_reset, 'processed_resets'):
            process_daily_reset.processed_resets.clear()
        
        process_daily_reset(test_chat_id)
        
        streak_after, date_after = crud.get_user_streak(test_chat_id)
        print(f"   Streak –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞: {streak_after}, –¥–∞—Ç–∞: {date_after}")
        assert streak_after == 0, f"Streak –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–±—Ä–æ—à–µ–Ω –¥–æ 0 –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–ø–∏—Å–∏, –ø–æ–ª—É—á–µ–Ω {streak_after}"
        print("‚úÖ Streak —Å–±—Ä–æ—à–µ–Ω (–Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –æ —Ç–µ—Å—Ç–∞—Ö)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–∫–∏ —Å–±—Ä–æ—Å–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_quiz_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–æ —Å–∏—Å—Ç–µ–º–æ–π —Ç–µ—Å—Ç–æ–≤."""
    print("\n" + "=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –¢–ï–°–¢–ê–ú–ò")
    print("=" * 60)
    
    try:
        from database import crud
        
        test_chat_id = 999999
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        user = crud.get_user(test_chat_id)
        if not user:
            crud.add_user(test_chat_id)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º streak
        crud.reset_user_streak(test_chat_id)
        
        print("\nüìã –¢–µ—Å—Ç: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–Ω–µ–π
        for day in range(5):
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
            test_date = (datetime.now() - timedelta(days=4-day)).strftime("%Y-%m-%d")
            
            # –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞, —á—Ç–æ–±—ã —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å
            old_streak, _ = crud.get_user_streak(test_chat_id)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è, —á—Ç–æ–±—ã –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—Ä–∞–±–æ—Ç–∞–ª
            if day > 0:
                prev_date = (datetime.now() - timedelta(days=5-day)).strftime("%Y-%m-%d")
                crud.update_user_streak(test_chat_id, old_streak, prev_date)
            
            # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º streak (—ç—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞)
            new_streak = crud.increment_user_streak(test_chat_id)
            
            print(f"   –î–µ–Ω—å {day + 1} ({test_date}): streak = {new_streak}")
        
        final_streak, last_date = crud.get_user_streak(test_chat_id)
        today = datetime.now().strftime("%Y-%m-%d")
        
        print(f"   –§–∏–Ω–∞–ª—å–Ω—ã–π streak: {final_streak}")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ —Ç–µ—Å—Ç–∞: {last_date}")
        print(f"   –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: {today}")
        
        assert final_streak == 5, f"–û–∂–∏–¥–∞–ª—Å—è streak=5, –ø–æ–ª—É—á–µ–Ω {final_streak}"
        print("‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ç–µ—Å—Ç–∞–º–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_subscription_display():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ."""
    print("\n" + "=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ü–û–î–ü–ò–°–ö–ò")
    print("=" * 60)
    
    try:
        from services.payment import PaymentService
        from keyboards.subscription import subscription_period_keyboard
        
        print("\nüìã –¢–µ—Å—Ç: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞")
        keyboard = subscription_period_keyboard()
        
        print("   –ö–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:")
        for row in keyboard.inline_keyboard:
            for button in row:
                print(f"     - {button.text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ä–∞—Å—á–µ—Ç –Ω–∞ –º–µ—Å—è—Ü, –∞ –Ω–µ —Å–∫–∏–¥–∫–∏
        button_texts = []
        for row in keyboard.inline_keyboard:
            for button in row:
                if "–º–µ—Å" in button.text or "–≥–æ–¥" in button.text:
                    button_texts.append(button.text)
        
        print("‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç –±–∞–∑–æ–≤—ã—Ö —Ü–µ–Ω
        print("\nüìã –¢–µ—Å—Ç: –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Ü–µ–Ω")
        for months in [1, 3, 6, 12]:
            savings_info = PaymentService.calculate_savings(months)
            print(f"   {months} –º–µ—Å: {savings_info['monthly_equivalent']:.0f}‚ÇΩ/–º–µ—Å")
        
        print("‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_edge_cases():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏."""
    print("\n" + "=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í")
    print("=" * 60)
    
    try:
        from database import crud
        
        test_chat_id = 999999
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        user = crud.get_user(test_chat_id)
        if not user:
            crud.add_user(test_chat_id)
        
        # –¢–µ—Å—Ç 1: –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π streak
        print("\nüìã –¢–µ—Å—Ç 1: –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π streak")
        crud.update_user_subscription(test_chat_id, "premium", 
                                    (datetime.now() + timedelta(days=30)).isoformat(), "test")
        crud.update_user_streak(test_chat_id, 999)
        
        discount = crud.calculate_streak_discount(test_chat_id)
        print(f"   Streak 999 –¥–Ω–µ–π: —Å–∫–∏–¥–∫–∞ {discount}%")
        assert discount == 30, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 30%"
        print("‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ 30%")
        
        # –¢–µ—Å—Ç 2: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π streak (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–º)
        print("\nüìã –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
        crud.update_user_streak(test_chat_id, -5)
        streak, _ = crud.get_user_streak(test_chat_id)
        discount = crud.calculate_streak_discount(test_chat_id)
        print(f"   –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π streak: {streak}, —Å–∫–∏–¥–∫–∞: {discount}%")
        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –º–æ–∂–µ—Ç –±—ã—Ç—å 0 –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
        print("‚úÖ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        
        # –¢–µ—Å—Ç 3: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        print("\nüìã –¢–µ—Å—Ç 3: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        fake_chat_id = 888888
        try:
            streak, date = crud.get_user_streak(fake_chat_id)
            discount = crud.calculate_streak_discount(fake_chat_id)
            print(f"   –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: streak={streak}, —Å–∫–∏–¥–∫–∞={discount}%")
            print("‚úÖ –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            print("‚úÖ –û—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

def cleanup_test_data():
    """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    print("\n" + "=" * 60)
    print("üßπ –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    try:
        from database.db import db_manager
        
        test_chat_id = 999999
        
        with db_manager.transaction() as conn:
            conn.execute("DELETE FROM users WHERE chat_id = ?", (test_chat_id,))
            conn.execute("DELETE FROM dictionary WHERE chat_id = ?", (test_chat_id,))
            conn.execute("DELETE FROM learned_words WHERE chat_id = ?", (test_chat_id,))
            conn.execute("DELETE FROM active_payments WHERE chat_id = ?", (test_chat_id,))
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ù–ê–ß–ê–õ–û –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê '–î–ù–ï–ô –ü–û–î–†–Ø–î'")
    print("=" * 80)
    
    tests = [
        ("–ú–∏–≥—Ä–∞—Ü–∏—è –ë–î", test_database_migration),
        ("CRUD —Ñ—É–Ω–∫—Ü–∏–∏", test_crud_functions),
        ("–†–∞—Å—á–µ—Ç —Å–∫–∏–¥–æ–∫", test_discount_calculation),
        ("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å", test_daily_reset_logic),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç–µ—Å—Ç–∞–º–∏", test_quiz_integration),
        ("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏", test_subscription_display),
        ("–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏", test_edge_cases),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
            if result:
                print(f"\n‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                print(f"\n‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"\nüí• {test_name}: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - {e}")
            results.append((test_name, False))
    
    # –û—á–∏—Å—Ç–∫–∞
    cleanup_test_data()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 80)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:.<50} {status}")
    
    print(f"\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüí° –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª '–î–Ω–µ–π –ø–æ–¥—Ä—è–¥' –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é: python alter_db_streak.py")
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)