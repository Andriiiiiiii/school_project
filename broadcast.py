#!/usr/bin/env python3
# broadcast.py - –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞

import asyncio
import logging
import sys
import time
from datetime import datetime
from pathlib import Path

from aiogram import Bot
from aiogram.utils.exceptions import BotBlocked, ChatNotFound, TelegramAPIError, UserDeactivated

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent))

from config import BOT_TOKEN
from database import crud
from database.db import db_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('broadcast.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class BroadcastManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    
    def __init__(self, bot_token: str):
        self.bot = Bot(token=bot_token, parse_mode="Markdown")
        self.stats = {
            'total': 0,
            'sent': 0,
            'failed': 0,
            'blocked': 0,
            'not_found': 0,
            'deactivated': 0,
            'other_errors': 0
        }
        
    async def get_all_users(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        try:
            users = crud.get_all_users()
            user_ids = [user[0] for user in users]  # –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return user_ids
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    async def send_message_to_user(self, chat_id: int, message: str, delay: float = 0.05):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
        
        Args:
            chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        """
        try:
            await self.bot.send_message(chat_id, message)
            self.stats['sent'] += 1
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            
        except BotBlocked:
            self.stats['blocked'] += 1
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            
        except ChatNotFound:
            self.stats['not_found'] += 1
            logger.debug(f"–ß–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        except UserDeactivated:
            self.stats['deactivated'] += 1
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
        except TelegramAPIError as e:
            self.stats['other_errors'] += 1
            logger.warning(f"Telegram API –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
            
        except Exception as e:
            self.stats['failed'] += 1
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        
        finally:
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
            if delay > 0:
                await asyncio.sleep(delay)
    
    async def broadcast_message(self, message: str, batch_size: int = 30, delay: float = 1.0):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏.
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
            batch_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞—Ç—á–µ
            delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        """
        users = await self.get_all_users()
        if not users:
            logger.error("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
            return
        
        self.stats['total'] = len(users)
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É {self.stats['total']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        
        start_time = time.time()
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –±–∞—Ç—á–∏
        for i in range(0, len(users), batch_size):
            batch = users[i:i + batch_size]
            batch_number = i // batch_size + 1
            total_batches = (len(users) + batch_size - 1) // batch_size
            
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á {batch_number}/{total_batches} ({len(batch)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –±–∞—Ç—á–µ
            tasks = []
            for chat_id in batch:
                task = self.send_message_to_user(chat_id, message, 0.03)  # 30ms –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                tasks.append(task)
            
            await asyncio.gather(*tasks)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            processed = min(i + batch_size, len(users))
            progress = (processed / len(users)) * 100
            logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {processed}/{len(users)} ({progress:.1f}%)")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i + batch_size < len(users):
                logger.info(f"–ü–∞—É–∑–∞ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –±–∞—Ç—á–µ–º...")
                await asyncio.sleep(delay)
        
        # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        elapsed_time = time.time() - start_time
        self.print_statistics(elapsed_time)
    
    def print_statistics(self, elapsed_time: float):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏."""
        logger.info("=" * 50)
        logger.info("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–°–°–´–õ–ö–ò")
        logger.info("=" * 50)
        logger.info(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {self.stats['total']}")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.stats['sent']}")
        logger.info(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {self.stats['blocked']}")
        logger.info(f"–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.stats['not_found']}")
        logger.info(f"–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {self.stats['deactivated']}")
        logger.info(f"–î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ API: {self.stats['other_errors']}")
        logger.info(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏: {self.stats['failed']}")
        logger.info(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.1f} —Å–µ–∫—É–Ω–¥")
        
        success_rate = (self.stats['sent'] / self.stats['total']) * 100 if self.stats['total'] > 0 else 0
        logger.info(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {success_rate:.1f}%")
        logger.info("=" * 50)
    
    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º."""
        await self.bot.session.close()

def get_message_from_user():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    print("\n" + "="*60)
    print("           –°–ö–†–ò–ü–¢ –ú–ê–°–°–û–í–û–ô –†–ê–°–°–´–õ–ö–ò")
    print("="*60)
    print()
    
    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    templates = {
        "1": {
            "name": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞",
            "text": """üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞*

–£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!

–ú—ã –≤—ã–ø—É—Å—Ç–∏–ª–∏ –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏:
‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∏
‚Ä¢ –£–ª—É—á—à–µ–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º! üôè"""
        },
        "2": {
            "name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", 
            "text": """‚öôÔ∏è *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ*

–£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!

–°–µ–≥–æ–¥–Ω—è —Å 02:00 –¥–æ 04:00 (–ú–°–ö) –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ.

–í —ç—Ç–æ –≤—Ä–µ–º—è –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ.

–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! üîß"""
        },
        "3": {
            "name": "–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è",
            "text":  """üí∞ –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ = –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –∏ –æ–≥—Ä–æ–º–Ω—ã–π –≤—ã–±–æ—Ä –Ω–∞–±–æ—Ä–æ–≤ —Å–ª–æ–≤ –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º
            
–ö–æ–≥–¥–∞ –≤—ã –≤–∫–ª–∞–¥—ã–≤–∞–µ—Ç–µ –¥–µ–Ω—å–≥–∏ –≤ –æ–±—É—á–µ–Ω–∏–µ, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å –±–æ–ª–µ–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏. –≠—Ç–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è ‚Äî –º—ã –Ω–µ –±—Ä–æ—Å–∞–µ–º —Ç–æ, –∑–∞ —á—Ç–æ –∑–∞–ø–ª–∞—Ç–∏–ª–∏.

–ü–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
"""
        },
        "4": {
            "name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "text": """üí∞ –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ = –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –∏ –æ–≥—Ä–æ–º–Ω—ã–π –≤—ã–±–æ—Ä –Ω–∞–±–æ—Ä–æ–≤ —Å–ª–æ–≤ –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º

–ö–æ–≥–¥–∞ –≤—ã –≤–∫–ª–∞–¥—ã–≤–∞–µ—Ç–µ –¥–µ–Ω—å–≥–∏ –≤ –æ–±—É—á–µ–Ω–∏–µ, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å –±–æ–ª–µ–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏. –≠—Ç–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è ‚Äî –º—ã –Ω–µ –±—Ä–æ—Å–∞–µ–º —Ç–æ, –∑–∞ —á—Ç–æ –∑–∞–ø–ª–∞—Ç–∏–ª–∏.
–ü–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
"""
        }
    }
    
    print("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è:")
    for key, template in templates.items():
        print(f"{key}. {template['name']}")
    print()
    
    choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —à–∞–±–ª–æ–Ω–∞ (1-4): ").strip()
    
    if choice in templates:
        if choice == "4":
            print("\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown):")
            print("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–±–µ—Ä–∏—Ç–µ 'END' –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ")
            print("-" * 40)
            
            lines = []
            while True:
                line = input()
                if line.strip() == "END":
                    break
                lines.append(line)
            
            message = "\n".join(lines).strip()
        else:
            message = templates[choice]["text"]
            
        if not message:
            print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return get_message_from_user()
            
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        return get_message_from_user()
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    print("\n" + "="*60)
    print("           –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–†")
    print("="*60)
    print(message)
    print("="*60)
    
    confirm = input("\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º? (y/N): ").strip().lower()
    
    if confirm in ['y', 'yes', '–¥–∞', '–¥']:
        return message
    else:
        print("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return None

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        if not BOT_TOKEN or BOT_TOKEN == "YOUR_DEFAULT_TOKEN":
            logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ config.py")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        message = get_message_from_user()
        if not message:
            return
        
        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –°–µ–π—á–∞—Å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞!")
        final_confirm = input("–í—ã –∞–±—Å–æ–ª—é—Ç–Ω–æ —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ 'SEND' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ").strip()
        
        if final_confirm != "SEND":
            print("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏
        broadcast_manager = BroadcastManager(BOT_TOKEN)
        
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
            batch_size = 30  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞—Ç—á–µ
            delay = 1.0      # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
            logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            await broadcast_manager.broadcast_message(
                message=message,
                batch_size=batch_size,
                delay=delay
            )
            
            logger.info("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await broadcast_manager.close()
    
    except KeyboardInterrupt:
        logger.info("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    required_files = ["config.py", "database/crud.py", "database/db.py"]
    missing_files = [f for f in required_files if not Path(f).exists()]
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    asyncio.run(main())