# quick_streak_test_fixed.py
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê –î–ù–ï–ô –ü–û–î–†–Ø–î
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
"""

import sys
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv

load_dotenv()
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def quick_test():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥."""
    print("‚ö° –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê –î–ù–ï–ô –ü–û–î–†–Ø–î")
    print("=" * 60)
    
    test_user_id = 777777
    test_premium_id = 777778
    
    try:
        from database import crud
        from services.payment import PaymentService
        from database.db import db_manager
        
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –û—á–∏—Å—Ç–∫–∞
        with db_manager.transaction() as tx:
            for user_id in [test_user_id, test_premium_id]:
                tx.execute("DELETE FROM users WHERE chat_id = ?", (user_id,))
                tx.execute("DELETE FROM dictionary WHERE chat_id = ?", (user_id,))
                tx.execute("DELETE FROM learned_words WHERE chat_id = ?", (user_id,))
                tx.execute("DELETE FROM active_payments WHERE chat_id = ?", (user_id,))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        crud.add_user(test_user_id)
        crud.add_user(test_premium_id)
        
        # –î–µ–ª–∞–µ–º –ø—Ä–µ–º–∏—É–º
        future_date = (datetime.now() + timedelta(days=30)).isoformat()
        crud.update_user_subscription(test_premium_id, "premium", future_date, "test")
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã")
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ datetime
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ datetime...")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç datetime
            initial_streak, initial_date = crud.get_user_streak(test_user_id)
            print(f"   ‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Å datetime —Ä–∞–±–æ—Ç–∞—é—Ç (–Ω–∞—á–∞–ª—å–Ω—ã–π streak: {initial_streak})")
        except NameError as e:
            if "datetime" in str(e):
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ datetime: {e}")
                print("   üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python fix_datetime_import.py")
                return False
            else:
                raise e
        
        # –¢–µ—Å—Ç 2: –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
        
        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        streak, date = crud.get_user_streak(test_user_id)
        assert streak == 0 and date is None, f"–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–µ: {streak}, {date}"
        print("   ‚úÖ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –ü–µ—Ä–≤—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç
        new_streak = crud.increment_user_streak(test_user_id)
        assert new_streak == 1, f"–ü–µ—Ä–≤—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –¥–∞—Ç—å 1, –ø–æ–ª—É—á–µ–Ω–æ {new_streak}"
        print("   ‚úÖ –ü–µ—Ä–≤—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å
        repeat_streak = crud.increment_user_streak(test_user_id)
        assert repeat_streak == 1, f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è 1, –ø–æ–ª—É—á–µ–Ω–æ {repeat_streak}"
        print("   ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç 3: –õ–æ–≥–∏–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω–µ–π
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω–µ–π...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
        yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
        crud.update_user_streak(test_user_id, 5, yesterday)
        
        # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å–µ–≥–æ–¥–Ω—è
        streak_today = crud.increment_user_streak(test_user_id)
        assert streak_today == 6, f"Streak –¥–æ–ª–∂–µ–Ω —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è —Å 5 –¥–æ 6, –ø–æ–ª—É—á–µ–Ω–æ {streak_today}"
        print("   ‚úÖ –õ–æ–≥–∏–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç 4: –°–±—Ä–æ—Å –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç —Å–±—Ä–æ—Å–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –¥–Ω—è...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∞–≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
        day_before_yesterday = (datetime.now() - timedelta(days=2)).strftime("%Y-%m-%d")
        crud.update_user_streak(test_user_id, 10, day_before_yesterday)
        
        # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å–µ–≥–æ–¥–Ω—è (–¥–æ–ª–∂–µ–Ω —Å–±—Ä–æ—Å–∏—Ç—å—Å—è)
        reset_streak = crud.increment_user_streak(test_user_id)
        assert reset_streak == 1, f"–ü—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –¥–Ω—è streak –¥–æ–ª–∂–µ–Ω —Å–±—Ä–æ—Å–∏—Ç—å—Å—è –Ω–∞ 1, –ø–æ–ª—É—á–µ–Ω–æ {reset_streak}"
        print("   ‚úÖ –°–±—Ä–æ—Å –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç 5: –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–±—Ä–æ—Å–∞...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º streak –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
        crud.update_user_streak(test_user_id, 15, "2025-06-01")
        crud.reset_user_streak(test_user_id)
        
        streak_after_reset, date_after_reset = crud.get_user_streak(test_user_id)
        assert streak_after_reset == 0, f"–ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ streak –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0, –ø–æ–ª—É—á–µ–Ω–æ {streak_after_reset}"
        assert date_after_reset is None, f"–ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å None, –ø–æ–ª—É—á–µ–Ω–æ {date_after_reset}"
        print("   ‚úÖ –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç 6: –°–∫–∏–¥–∫–∏
        print("\n6Ô∏è‚É£ –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–∏–¥–æ–∫...")
        
        # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        crud.update_user_streak(test_user_id, 15, datetime.now().strftime("%Y-%m-%d"))
        free_discount = crud.calculate_streak_discount(test_user_id)
        assert free_discount == 0, f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å —Å–∫–∏–¥–∫—É, –ø–æ–ª—É—á–µ–Ω–æ {free_discount}"
        print("   ‚úÖ –°–∫–∏–¥–∫–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è = 0%")
        
        # –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        crud.update_user_streak(test_premium_id, 20, datetime.now().strftime("%Y-%m-%d"))
        premium_discount = crud.calculate_streak_discount(test_premium_id)
        assert premium_discount == 20, f"–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å —Å–∫–∏–¥–∫—É 20%, –ø–æ–ª—É—á–µ–Ω–æ {premium_discount}"
        print("   ‚úÖ –°–∫–∏–¥–∫–∞ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è = 20%")
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞
        crud.update_user_streak(test_premium_id, 50, datetime.now().strftime("%Y-%m-%d"))
        max_discount = crud.calculate_streak_discount(test_premium_id)
        assert max_discount == 30, f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 30%, –ø–æ–ª—É—á–µ–Ω–æ {max_discount}"
        print("   ‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ = 30%")
        
        # –¢–µ—Å—Ç 7: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
        print("\n7Ô∏è‚É£ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏...")
        
        # –¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏
        crud.update_user_streak(test_premium_id, 0, None)
        price_no_discount = PaymentService.calculate_discounted_price(test_premium_id, 1)
        assert not price_no_discount['has_discount'], "–ü—Ä–∏ streak=0 –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–∫–∏–¥–∫–∏"
        assert price_no_discount['final_price'] == 299.0, f"–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 299, –ø–æ–ª—É—á–µ–Ω–æ {price_no_discount['final_price']}"
        print("   ‚úÖ –¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏ = 299‚ÇΩ")
        
        # –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π
        crud.update_user_streak(test_premium_id, 15, datetime.now().strftime("%Y-%m-%d"))
        price_with_discount = PaymentService.calculate_discounted_price(test_premium_id, 1)
        expected_price = round(299.0 * 0.85, 2)  # 15% —Å–∫–∏–¥–∫–∞, –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
        actual_price = round(price_with_discount['final_price'], 2)
        
        assert price_with_discount['has_discount'], "–ü—Ä–∏ streak=15 –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–∫–∏–¥–∫–∞"
        assert actual_price == expected_price, f"–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å {expected_price}‚ÇΩ, –ø–æ–ª—É—á–µ–Ω–æ {actual_price}‚ÇΩ"
        print(f"   ‚úÖ –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π 15% = {actual_price}‚ÇΩ")
        
        # –û—á–∏—Å—Ç–∫–∞
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        with db_manager.transaction() as tx:
            for user_id in [test_user_id, test_premium_id]:
                tx.execute("DELETE FROM users WHERE chat_id = ?", (user_id,))
                tx.execute("DELETE FROM dictionary WHERE chat_id = ?", (user_id,))
                tx.execute("DELETE FROM learned_words WHERE chat_id = ?", (user_id,))
                tx.execute("DELETE FROM active_payments WHERE chat_id = ?", (user_id,))
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        
        print("\n" + "=" * 60)
        print("üéâ –í–°–ï –ë–´–°–¢–†–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –ò–º–ø–æ—Ä—Ç datetime –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
        print("‚úÖ –í—Å–µ –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–∫–∏–¥–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("=" * 60)
        
        return True
        
    except AssertionError as e:
        print(f"\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {e}")
        return False
    except NameError as e:
        if "datetime" in str(e):
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê DATETIME: {e}")
            print("üí° –†–µ—à–µ–Ω–∏–µ: –∑–∞–ø—É—Å—Ç–∏—Ç–µ 'python fix_datetime_import.py'")
        else:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê: {e}")
        return False
    except Exception as e:
        print(f"\n‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = quick_test()
    if success:
        print("\nüí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("   python test_streak_full_functionality.py")
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print("\nüí° –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        print("   1. python fix_datetime_import.py")
        print("   2. python quick_streak_test_fixed.py")
    
    sys.exit(0 if success else 1)