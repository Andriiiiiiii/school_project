# test_streak_full_functionality.py
"""
–ü–û–õ–ù–´–ô –¢–ï–°–¢ –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê –î–ù–ï–ô –ü–û–î–†–Ø–î
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã —Å–∏—Å—Ç–µ–º—ã streak: CRUD, —Ç–µ—Å—Ç—ã, —Å–∫–∏–¥–∫–∏, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
"""

import sys
import os
import asyncio
from datetime import datetime, timedelta
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def print_section(title):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞ —Ç–µ—Å—Ç–∞."""
    print(f"\n{'='*60}")
    print(f"üìã {title}")
    print(f"{'='*60}")

def print_test(test_name):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞."""
    print(f"\nüîç –¢–µ—Å—Ç: {test_name}")
    print("-" * 40)

def print_result(expected, actual, test_description):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞."""
    status = "‚úÖ –ü–†–û–ô–î–ï–ù" if expected == actual else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
    print(f"   {test_description}")
    print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
    print(f"   –ü–æ–ª—É—á–µ–Ω–æ: {actual}")
    print(f"   {status}")
    return expected == actual

def print_info(message):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    print(f"   ‚ÑπÔ∏è  {message}")

class StreakTester:
    def __init__(self):
        self.test_user_id = 888888
        self.test_premium_user_id = 888889
        self.passed_tests = 0
        self.total_tests = 0
        self.failed_tests = []
        
    def setup_test_environment(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        print_section("–ù–ê–°–¢–†–û–ô–ö–ê –¢–ï–°–¢–û–í–û–ì–û –û–ö–†–£–ñ–ï–ù–ò–Ø")
        
        try:
            from database import crud
            from database.db import db_manager
            
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            with db_manager.transaction() as tx:
                for user_id in [self.test_user_id, self.test_premium_user_id]:
                    tx.execute("DELETE FROM users WHERE chat_id = ?", (user_id,))
                    tx.execute("DELETE FROM dictionary WHERE chat_id = ?", (user_id,))
                    tx.execute("DELETE FROM learned_words WHERE chat_id = ?", (user_id,))
                    tx.execute("DELETE FROM active_payments WHERE chat_id = ?", (user_id,))
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            crud.add_user(self.test_user_id)
            crud.add_user(self.test_premium_user_id)
            
            # –î–µ–ª–∞–µ–º –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            future_date = (datetime.now() + timedelta(days=30)).isoformat()
            crud.update_user_subscription(self.test_premium_user_id, "premium", future_date, "test_payment")
            
            print_info(f"–°–æ–∑–¥–∞–Ω –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.test_user_id}")
            print_info(f"–°–æ–∑–¥–∞–Ω –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.test_premium_user_id}")
            print_info("–¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            return False
    
    def test_basic_crud_operations(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å streak."""
        print_section("–¢–ï–°–¢ 1: –ë–ê–ó–û–í–´–ï CRUD –û–ü–ï–†–ê–¶–ò–ò")
        
        try:
            from database import crud
            
            # –¢–µ—Å—Ç 1.1: –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            print_test("–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ streak")
            streak, date = crud.get_user_streak(self.test_user_id)
            self.assert_test(0, streak, "–ù–∞—á–∞–ª—å–Ω—ã–π streak –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0")
            self.assert_test(None, date, "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å None")
            
            # –¢–µ—Å—Ç 1.2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ streak
            print_test("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ streak")
            test_date = "2025-06-01"
            crud.update_user_streak(self.test_user_id, 5, test_date)
            streak, date = crud.get_user_streak(self.test_user_id)
            self.assert_test(5, streak, "Streak –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 5")
            self.assert_test(test_date, date, f"–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {test_date}")
            
            # –¢–µ—Å—Ç 1.3: –°–±—Ä–æ—Å streak
            print_test("–°–±—Ä–æ—Å streak")
            crud.reset_user_streak(self.test_user_id)
            streak, date = crud.get_user_streak(self.test_user_id)
            self.assert_test(0, streak, "Streak –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–±—Ä–æ—à–µ–Ω –Ω–∞ 0")
            self.assert_test(None, date, "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–±—Ä–æ—à–µ–Ω–∞ –Ω–∞ None")
            
            # –¢–µ—Å—Ç 1.4: –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç streak (–ø–µ—Ä–≤—ã–π —Ä–∞–∑)
            print_test("–ü–µ—Ä–≤—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç streak")
            new_streak = crud.increment_user_streak(self.test_user_id)
            self.assert_test(1, new_streak, "–ü–µ—Ä–≤—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –¥–∞—Ç—å streak = 1")
            
            # –¢–µ—Å—Ç 1.5: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å
            print_test("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å")
            repeat_streak = crud.increment_user_streak(self.test_user_id)
            self.assert_test(1, repeat_streak, "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–≤–∏—Ç—å streak = 1")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ CRUD —Ç–µ—Å—Ç–∞—Ö: {e}")
            return False
        
        return True
    
    def test_streak_logic_scenarios(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ª–æ–≥–∏–∫–∏ streak."""
        print_section("–¢–ï–°–¢ 2: –õ–û–ì–ò–ö–ê STREAK")
        
        try:
            from database import crud
            
            # –¢–µ—Å—Ç 2.1: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏
            print_test("–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏")
            crud.reset_user_streak(self.test_user_id)
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ 5 –¥–Ω–µ–π
            test_dates = [
                "2025-06-01",
                "2025-06-02", 
                "2025-06-03",
                "2025-06-04",
                "2025-06-05"
            ]
            
            for i, test_date in enumerate(test_dates):
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
                if i > 0:
                    prev_date = test_dates[i-1]
                    crud.update_user_streak(self.test_user_id, i, prev_date)
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç (–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
                expected_streak = i + 1
                current_streak, _ = crud.get_user_streak(self.test_user_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É: –µ—Å–ª–∏ –≤—á–µ—Ä–∞ –±—ã–ª —Ç–µ—Å—Ç, streak –¥–æ–ª–∂–µ–Ω —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è
                if i == 0:
                    # –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å
                    crud.update_user_streak(self.test_user_id, 1, test_date)
                    result_streak = 1
                else:
                    # –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –¥–Ω–∏ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º streak
                    crud.update_user_streak(self.test_user_id, expected_streak, test_date)
                    result_streak = expected_streak
                
                self.assert_test(expected_streak, result_streak, f"–î–µ–Ω—å {i+1}: streak –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å {expected_streak}")
            
            # –¢–µ—Å—Ç 2.2: –ü—Ä–æ–ø—É—Å–∫ –¥–Ω—è (streak –¥–æ–ª–∂–µ–Ω —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å—Å—è)
            print_test("–ü—Ä–æ–ø—É—Å–∫ –¥–Ω—è")
            crud.update_user_streak(self.test_user_id, 5, "2025-06-05")  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç 5 –∏—é–Ω—è
            
            # –¢–µ—Å—Ç 7 –∏—é–Ω—è (–ø—Ä–æ–ø—É—Å–∫ 6 –∏—é–Ω—è)
            crud.update_user_streak(self.test_user_id, 1, "2025-06-07")  # Streak –¥–æ–ª–∂–µ–Ω —Å–±—Ä–æ—Å–∏—Ç—å—Å—è
            streak, _ = crud.get_user_streak(self.test_user_id)
            self.assert_test(1, streak, "–ü–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–Ω—è streak –¥–æ–ª–∂–µ–Ω —Å–±—Ä–æ—Å–∏—Ç—å—Å—è –Ω–∞ 1")
            
            # –¢–µ—Å—Ç 2.3: –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            print_test("–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
            crud.update_user_streak(self.test_user_id, -5, "2025-06-08")
            streak, _ = crud.get_user_streak(self.test_user_id)
            self.assert_test(0, streak, "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π streak –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–≤–µ–¥–µ–Ω –∫ 0")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –ª–æ–≥–∏–∫–∏ streak: {e}")
            return False
        
        return True
    
    def test_discount_calculation(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç —Å–∫–∏–¥–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ streak."""
        print_section("–¢–ï–°–¢ 3: –†–ê–°–ß–ï–¢ –°–ö–ò–î–û–ö")
        
        try:
            from database import crud
            
            # –¢–µ—Å—Ç 3.1: –°–∫–∏–¥–∫–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 0)
            print_test("–°–∫–∏–¥–∫–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            crud.update_user_streak(self.test_user_id, 15, "2025-06-08")
            discount = crud.calculate_streak_discount(self.test_user_id)
            self.assert_test(0, discount, "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å —Å–∫–∏–¥–∫—É")
            
            # –¢–µ—Å—Ç 3.2: –°–∫–∏–¥–∫–∞ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ 30 –¥–Ω–µ–π)
            print_test("–°–∫–∏–¥–∫–∞ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (15 –¥–Ω–µ–π)")
            crud.update_user_streak(self.test_premium_user_id, 15, "2025-06-08")
            discount = crud.calculate_streak_discount(self.test_premium_user_id)
            self.assert_test(15, discount, "–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å —Å–∫–∏–¥–∫—É —Ä–∞–≤–Ω—É—é streak")
            
            # –¢–µ—Å—Ç 3.3: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ (30%)
            print_test("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ (–±–æ–ª—å—à–µ 30 –¥–Ω–µ–π)")
            crud.update_user_streak(self.test_premium_user_id, 45, "2025-06-08")
            discount = crud.calculate_streak_discount(self.test_premium_user_id)
            self.assert_test(30, discount, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 30%")
            
            # –¢–µ—Å—Ç 3.4: –°–∫–∏–¥–∫–∞ –ø—Ä–∏ streak = 0
            print_test("–°–∫–∏–¥–∫–∞ –ø—Ä–∏ streak = 0")
            crud.reset_user_streak(self.test_premium_user_id)
            discount = crud.calculate_streak_discount(self.test_premium_user_id)
            self.assert_test(0, discount, "–ü—Ä–∏ streak = 0 —Å–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 0")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–∏–¥–æ–∫: {e}")
            return False
        
        return True
    
    def test_payment_integration(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–ª–∞—Ç–µ–∂–µ–π."""
        print_section("–¢–ï–°–¢ 4: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ü–õ–ê–¢–ï–ñ–ê–ú–ò")
        
        try:
            from services.payment import PaymentService
            from database import crud
            
            # –¢–µ—Å—Ç 4.1: –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –±–µ–∑ —Å–∫–∏–¥–∫–∏
            print_test("–†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –±–µ–∑ —Å–∫–∏–¥–∫–∏")
            crud.reset_user_streak(self.test_premium_user_id)
            price_info = PaymentService.calculate_discounted_price(self.test_premium_user_id, 1)
            
            self.assert_test(False, price_info['has_discount'], "–ü—Ä–∏ streak = 0 –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–∫–∏–¥–∫–∏")
            self.assert_test(299.0, price_info['base_price'], "–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 299")
            self.assert_test(299.0, price_info['final_price'], "–§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–≤–Ω—è—Ç—å—Å—è –±–∞–∑–æ–≤–æ–π")
            
            # –¢–µ—Å—Ç 4.2: –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π
            print_test("–†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π (20%)")
            crud.update_user_streak(self.test_premium_user_id, 20, "2025-06-08")
            price_info = PaymentService.calculate_discounted_price(self.test_premium_user_id, 1)
            
            expected_discount = 299.0 * 0.20  # 20%
            expected_final = 299.0 - expected_discount
            
            self.assert_test(True, price_info['has_discount'], "–ü—Ä–∏ streak = 20 –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–∫–∏–¥–∫–∞")
            self.assert_test(20, price_info['discount_percent'], "–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 20%")
            self.assert_test(expected_final, price_info['final_price'], f"–§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å {expected_final}")
            
            # –¢–µ—Å—Ç 4.3: –†–∞—Å—á–µ—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
            print_test("–†–∞—Å—á–µ—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤")
            periods_prices = {3: 799.0, 6: 1499.0, 12: 2899.0}
            
            for months, base_price in periods_prices.items():
                price_info = PaymentService.calculate_discounted_price(self.test_premium_user_id, months)
                expected_final = base_price * 0.8  # 20% —Å–∫–∏–¥–∫–∞
                
                success = self.assert_test(
                    expected_final, 
                    price_info['final_price'], 
                    f"–¶–µ–Ω–∞ –∑–∞ {months} –º–µ—Å—è—Ü–µ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å {expected_final}"
                )
                if not success:
                    break
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏: {e}")
            return False
        
        return True
    
    async def test_quiz_integration(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–æ–π —Ç–µ—Å—Ç–æ–≤."""
        print_section("–¢–ï–°–¢ 5: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –¢–ï–°–¢–ê–ú–ò")
        
        try:
            from database import crud
            from handlers.quiz import quiz_states
            from unittest.mock import AsyncMock, MagicMock
            
            # –ú–æ–∫–∞–µ–º –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            mock_bot = AsyncMock()
            mock_bot.send_message = AsyncMock()
            
            # –¢–µ—Å—Ç 5.1: –£–≤–µ–ª–∏—á–µ–Ω–∏–µ streak –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ç–µ—Å—Ç–∞
            print_test("–£–≤–µ–ª–∏—á–µ–Ω–∏–µ streak –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ç–µ—Å—Ç–∞")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            crud.reset_user_streak(self.test_user_id)
            yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
            crud.update_user_streak(self.test_user_id, 5, yesterday)
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ (–±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
            from datetime import datetime
            today = datetime.now().strftime("%Y-%m-%d")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
            old_streak, _ = crud.get_user_streak(self.test_user_id)
            new_streak = crud.increment_user_streak(self.test_user_id)
            
            self.assert_test(6, new_streak, "Streak –¥–æ–ª–∂–µ–Ω —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è —Å 5 –¥–æ 6")
            
            # –¢–µ—Å—Ç 5.2: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å
            print_test("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å")
            repeat_streak = crud.increment_user_streak(self.test_user_id)
            self.assert_test(6, repeat_streak, "–ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—É—Å–∫–µ streak –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è 6")
            
            # –¢–µ—Å—Ç 5.3: –°–±—Ä–æ—Å streak –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –¥–Ω—è
            print_test("–°–±—Ä–æ—Å streak –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –¥–Ω—è")
            day_before_yesterday = (datetime.now() - timedelta(days=2)).strftime("%Y-%m-%d")
            crud.update_user_streak(self.test_user_id, 10, day_before_yesterday)
            
            reset_streak = crud.increment_user_streak(self.test_user_id)
            self.assert_test(1, reset_streak, "–ü–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–Ω—è streak –¥–æ–ª–∂–µ–Ω —Å–±—Ä–æ—Å–∏—Ç—å—Å—è –Ω–∞ 1")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ç–µ—Å—Ç–∞–º–∏: {e}")
            return False
        
        return True
    
    def test_scheduler_integration(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º (—Å–±—Ä–æ—Å streak)."""
        print_section("–¢–ï–°–¢ 6: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–ú")
        
        try:
            from services.scheduler import process_daily_reset
            from database import crud
            
            # –¢–µ—Å—Ç 6.1: –°–±—Ä–æ—Å streak –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –¥–Ω—è
            print_test("–°–±—Ä–æ—Å streak –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º streak —Å –¥–∞—Ç–æ–π –ø–æ–∑–∞–≤—á–µ—Ä–∞
            day_before_yesterday = (datetime.now() - timedelta(days=2)).strftime("%Y-%m-%d")
            crud.update_user_streak(self.test_user_id, 15, day_before_yesterday)
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å
            process_daily_reset(self.test_user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ streak —Å–±—Ä–æ—à–µ–Ω
            streak, _ = crud.get_user_streak(self.test_user_id)
            self.assert_test(0, streak, "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–±—Ä–æ—Å–∏—Ç—å streak –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –¥–Ω—è")
            
            # –¢–µ—Å—Ç 6.2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ streak –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—á–µ—Ä–∞
            print_test("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ streak –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—á–µ—Ä–∞")
            
            yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
            crud.update_user_streak(self.test_user_id, 7, yesterday)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º streak –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            original_streak, _ = crud.get_user_streak(self.test_user_id)
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å
            process_daily_reset(self.test_user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ streak —Å–æ—Ö—Ä–∞–Ω–µ–Ω (–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –µ–≥–æ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å)
            streak, _ = crud.get_user_streak(self.test_user_id)
            self.assert_test(original_streak, streak, "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å streak –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—á–µ—Ä–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º: {e}")
            return False
        
        return True
    
    def test_edge_cases(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫."""
        print_section("–¢–ï–°–¢ 7: –ì–†–ê–ù–ò–ß–ù–´–ï –°–õ–£–ß–ê–ò")
        
        try:
            from database import crud
            
            # –¢–µ—Å—Ç 7.1: –û—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è streak
            print_test("–û—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è streak")
            crud.update_user_streak(self.test_premium_user_id, 999999, "2025-06-08")
            discount = crud.calculate_streak_discount(self.test_premium_user_id)
            self.assert_test(30, discount, "–î–∞–∂–µ –ø—Ä–∏ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–º streak –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ 30%")
            
            # –¢–µ—Å—Ç 7.2: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            print_test("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            fake_user_id = 999999999
            streak, date = crud.get_user_streak(fake_user_id)
            self.assert_test(0, streak, "–î–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è streak –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0")
            self.assert_test(None, date, "–î–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å None")
            
            # –¢–µ—Å—Ç 7.3: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            print_test("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∞—Ç—ã")
            try:
                crud.update_user_streak(self.test_user_id, 5, "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è-–¥–∞—Ç–∞")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Å–ª–æ–º–∞–ª–∞—Å—å
                streak, _ = crud.get_user_streak(self.test_user_id)
                print_info(f"–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É, streak = {streak}")
            except Exception as e:
                print_info(f"–°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–±—Ä–æ—Å–∏–ª–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            
            # –¢–µ—Å—Ç 7.4: –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–∏–º–∏—Ç–∞—Ü–∏—è)
            print_test("–ò–º–∏—Ç–∞—Ü–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
            for i in range(5):
                crud.update_user_streak(self.test_user_id, i, f"2025-06-{8+i:02d}")
            
            final_streak, _ = crud.get_user_streak(self.test_user_id)
            self.assert_test(4, final_streak, "–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: {e}")
            return False
        
        return True
    
    def cleanup_test_environment(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        print_section("–û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–û–ì–û –û–ö–†–£–ñ–ï–ù–ò–Ø")
        
        try:
            from database.db import db_manager
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            with db_manager.transaction() as tx:
                for user_id in [self.test_user_id, self.test_premium_user_id]:
                    tx.execute("DELETE FROM users WHERE chat_id = ?", (user_id,))
                    tx.execute("DELETE FROM dictionary WHERE chat_id = ?", (user_id,))
                    tx.execute("DELETE FROM learned_words WHERE chat_id = ?", (user_id,))
                    tx.execute("DELETE FROM active_payments WHERE chat_id = ?", (user_id,))
            
            print_info("–¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã")
            print_info("–¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
    
    def assert_test(self, expected, actual, description):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        self.total_tests += 1
        success = print_result(expected, actual, description)
        
        if success:
            self.passed_tests += 1
        else:
            self.failed_tests.append(f"{self.total_tests}: {description}")
        
        return success
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã."""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê –î–ù–ï–ô –ü–û–î–†–Ø–î")
        print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not self.setup_test_environment():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
            return False
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        tests = [
            self.test_basic_crud_operations,
            self.test_streak_logic_scenarios,
            self.test_discount_calculation,
            self.test_payment_integration,
            self.test_quiz_integration,
            self.test_scheduler_integration,
            self.test_edge_cases
        ]
        
        for test in tests:
            try:
                if asyncio.iscoroutinefunction(test):
                    await test()
                else:
                    test()
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
                import traceback
                traceback.print_exc()
        
        # –û—á–∏—Å—Ç–∫–∞
        self.cleanup_test_environment()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_final_report()
        
        return self.passed_tests == self.total_tests
    
    def print_final_report(self):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç."""
        print_section("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        
        success_rate = (self.passed_tests / self.total_tests * 100) if self.total_tests > 0 else 0
        
        print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.total_tests}")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {self.passed_tests}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.total_tests - self.passed_tests}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        if self.failed_tests:
            print(f"\n‚ùå –ü–†–û–í–ê–õ–ò–í–®–ò–ï–°–Ø –¢–ï–°–¢–´:")
            for failed_test in self.failed_tests:
                print(f"   ‚Ä¢ {failed_test}")
        
        print(f"\n{'='*60}")
        if self.passed_tests == self.total_tests:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
            print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞")
        print(f"{'='*60}")
        
        print(f"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤."""
    tester = StreakTester()
    success = await tester.run_all_tests()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    asyncio.run(main())